<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Harvey&#39;s Randomized Algorithms on Mostafa Touny</title>
    <link>https://www.mostafatouny.github.io/harvey-rand-post/</link>
    <description>Recent content in Harvey&#39;s Randomized Algorithms on Mostafa Touny</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.mostafatouny.github.io/harvey-rand-post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chapter 01</title>
      <link>https://www.mostafatouny.github.io/harvey-rand-post/pset01/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://www.mostafatouny.github.io/harvey-rand-post/pset01/</guid>
      <description>&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ex.-1&#34; class=&#34;unnumbered&#34;&gt;Ex. 1&lt;/h3&gt;&#xA;&lt;h4 id=&#34;part-i&#34; class=&#34;unnumbered&#34;&gt;Part I&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    def randElement(A[1..n])&#xA;      X = random( [n] )&#xA;      return A[X]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since the probability space is uniform, For event $M = \{ \frac{\displaystyle{n}}{\displaystyle{4}}+1, \dots, \frac{\displaystyle{3}}{\displaystyle{4}}n \}$, $Pr[M] = \frac{\displaystyle{1}}{\displaystyle{n}} \cdot |M| = \frac{\displaystyle{1}}{\displaystyle{n}} \cdot \frac{\displaystyle{n}}{\displaystyle{2}} = \frac{\displaystyle{1}}{\displaystyle{2}}$.&lt;/p&gt;&#xA;&lt;h4 id=&#34;part-ii&#34; class=&#34;unnumbered&#34;&gt;Part II&lt;/h4&gt;&#xA;&lt;p&gt;Additionally we certify if the randomly generated element is in middle half.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    def randElement2(A[1..n])&#xA;      # Select a random element of A&#xA;      k = randElement(A)&#xA;&#xA;      # Certify whether it is in middle half&#xA;&#xA;      # count values less and greater&#xA;      countLess = countGreater = 0&#xA;      for i in 1..n:&#xA;        if A[i] &amp;lt; k&#xA;          countLess = countLess + 1&#xA;        else if A[i] &amp;gt; k&#xA;          countGreater = countGreater + 1&#xA;&#xA;      # check if k is between first and forth quarters&#xA;      if (countLess &amp;gt;= n/4) and (countGreater &amp;gt;= n/4)&#xA;        return k&#xA;      return FAIL&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let $R$ be the algorithm&amp;rsquo;s output. $R = FAIL$ if and only if $\neg M$. So $Pr[R=FAIL] = Pr[\neg M] = 1 - Pr[M] = 1 - \frac{\displaystyle{1}}{\displaystyle{2}} = \frac{\displaystyle{1}}{\displaystyle{2}}$.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chapter 02</title>
      <link>https://www.mostafatouny.github.io/harvey-rand-post/pset02/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://www.mostafatouny.github.io/harvey-rand-post/pset02/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;&#xA;&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ex.-1&#34; class=&#34;unnumbered&#34;&gt;Ex. 1&lt;/h3&gt;&#xA;&lt;h4 id=&#34;part-i&#34; class=&#34;unnumbered&#34;&gt;Part I&lt;/h4&gt;&#xA;&lt;p&gt;Take $m = n-1$, and let $R$ be the algorithm&amp;rsquo;s output. $R = 0$ if and only if $RNG()$ returned $0$ or $n-1$. So $Pr[R = 0] = 2/n$ and $Pr[R = i] = 1/n$ for $i \neq 0$.&lt;/p&gt;&#xA;&lt;h4 id=&#34;part-ii&#34; class=&#34;unnumbered&#34;&gt;Part II&lt;/h4&gt;&#xA;&lt;p&gt;Define $k = \lfloor n/m \rfloor$, So $k$ is the greatest integer such that $mk \leq n$. Define $r = n \mod mk$, so $n = mk + r$ where $0 \leq r &lt; m$.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
