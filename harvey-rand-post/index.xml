<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Harvey's Randomized Algorithms on Mostafa Touny</title><link>https://mostafatouny.github.io/harvey-rand-post/</link><description>Recent content in Harvey's Randomized Algorithms on Mostafa Touny</description><generator>Hugo -- 0.136.5</generator><language>en-us</language><lastBuildDate>Mon, 11 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mostafatouny.github.io/harvey-rand-post/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter 01</title><link>https://mostafatouny.github.io/harvey-rand-post/pset01/</link><pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate><guid>https://mostafatouny.github.io/harvey-rand-post/pset01/</guid><description>&lt;h2 id="exercises" class="unnumbered">Exercises&lt;/h2>
&lt;h3 id="ex.-1" class="unnumbered">Ex. 1&lt;/h3>
&lt;h4 id="part-i" class="unnumbered">Part I&lt;/h4>
&lt;pre tabindex="0">&lt;code> def randElement(A[1..n])
X = random( [n] )
return A[X]
&lt;/code>&lt;/pre>&lt;p>Since the probability space is uniform, For event $M = \{ \frac{\displaystyle{n}}{\displaystyle{4}}+1, \dots, \frac{\displaystyle{3}}{\displaystyle{4}}n \}$, $Pr[M] = \frac{\displaystyle{1}}{\displaystyle{n}} \cdot |M| = \frac{\displaystyle{1}}{\displaystyle{n}} \cdot \frac{\displaystyle{n}}{\displaystyle{2}} = \frac{\displaystyle{1}}{\displaystyle{2}}$.&lt;/p>
&lt;h4 id="part-ii" class="unnumbered">Part II&lt;/h4>
&lt;p>Additionally we certify if the randomly generated element is in middle half.&lt;/p>
&lt;pre tabindex="0">&lt;code> def randElement2(A[1..n])
# Select a random element of A
k = randElement(A)
# Certify whether it is in middle half
# count values less and greater
countLess = countGreater = 0
for i in 1..n:
if A[i] &amp;lt; k
countLess = countLess + 1
else if A[i] &amp;gt; k
countGreater = countGreater + 1
# check if k is between first and forth quarters
if (countLess &amp;gt;= n/4) and (countGreater &amp;gt;= n/4)
return k
return FAIL
&lt;/code>&lt;/pre>&lt;p>Let $R$ be the algorithm&amp;rsquo;s output. $R = FAIL$ if and only if $\neg M$. So $Pr[R=FAIL] = Pr[\neg M] = 1 - Pr[M] = 1 - \frac{\displaystyle{1}}{\displaystyle{2}} = \frac{\displaystyle{1}}{\displaystyle{2}}$.&lt;/p></description></item><item><title>Chapter 02</title><link>https://mostafatouny.github.io/harvey-rand-post/pset02/</link><pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate><guid>https://mostafatouny.github.io/harvey-rand-post/pset02/</guid><description>&lt;p>$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p>
&lt;h2 id="exercises" class="unnumbered">Exercises&lt;/h2>
&lt;h3 id="ex.-1" class="unnumbered">Ex. 1&lt;/h3>
&lt;h4 id="part-i" class="unnumbered">Part I&lt;/h4>
&lt;p>Take $m = n-1$, and let $R$ be the algorithm&amp;rsquo;s output. $R = 0$ if and only if $RNG()$ returned $0$ or $n-1$. So $Pr[R = 0] = 2/n$ and $Pr[R = i] = 1/n$ for $i \neq 0$.&lt;/p>
&lt;h4 id="part-ii" class="unnumbered">Part II&lt;/h4>
&lt;p>Define $k = \lfloor n/m \rfloor$, So $k$ is the greatest integer such that $mk \leq n$. Define $r = n \mod mk$, so $n = mk + r$ where $0 \leq r &lt; m$.&lt;/p></description></item></channel></rss>