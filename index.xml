<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mostafa Touny</title>
    <link>https://mostafatouny.github.io/</link>
      <atom:link href="https://mostafatouny.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Mostafa Touny</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 27 Jan 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://mostafatouny.github.io/media/icon_hucf8be6c19c9550cf4f3e1aa359e52dbd_889622_512x512_fill_lanczos_center_3.png</url>
      <title>Mostafa Touny</title>
      <link>https://mostafatouny.github.io/</link>
    </image>
    
    <item>
      <title>Ch. 03, Sec. F</title>
      <link>https://mostafatouny.github.io/axler-linear-post/ch03-secf/</link>
      <pubDate>Sat, 27 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/axler-linear-post/ch03-secf/</guid>
      <description>&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex.-01&#34; class=&#34;unnumbered&#34;&gt;Ex. 01&lt;/h3&gt;
&lt;p&gt;Assume $\varphi$ is not the zero map. Then for some vector $v_0$, $\varphi(v_0) = \lambda_0 \neq 0$. Let $\lambda \in F$ be arbitrary. Then by linearity $\varphi(\lambda \cdot (\lambda_0)^{-1} v_0) = \lambda (\lambda_0)^{-1} \lambda_0 = \lambda$. Hence surjective.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 02 - Section 01</title>
      <link>https://mostafatouny.github.io/vraj-kni-post/ch02-sec01/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/vraj-kni-post/ch02-sec01/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;1&lt;/h3&gt;
&lt;p&gt;No. The statement holds if and only if $x$ is not integer. For example $\lceil 1 \rceil = 1 \neq 1 + \lfloor 1 \rfloor = 2$.&lt;/p&gt;
&lt;p&gt;Let $x = z + y$ where $z$ is integer and $0 &amp;lt; y &amp;lt; 1$. Then $\lceil x \rceil = z + 1 = \lfloor x \rfloor + 1$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 03 - Section 02</title>
      <link>https://mostafatouny.github.io/henry-linear-post/ch03-sec02/</link>
      <pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/henry-linear-post/ch03-sec02/</guid>
      <description>&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;b&#34; class=&#34;unnumbered&#34;&gt;B&lt;/h3&gt;
&lt;h4 id=&#34;ex.-2&#34; class=&#34;unnumbered&#34;&gt;Ex. 2&lt;/h4&gt;
&lt;p&gt;$(\rightarrow)$ Trivial.&lt;/p&gt;
&lt;p&gt;$(\leftarrow)$ Consider
$$
v_i = \begin{bmatrix}
0 \\
\vdots \\
1 \\
\vdots \\
0
\end{bmatrix}
$$
Where only ith position is $1$. Then
\begin{align*}
(Av_i)[Col \ i] &amp;amp;= (Bv_i)[Col \ i] \quad \text{By hypothesis} \\
&amp;amp;= A[Col \ i] \quad \text{Multiplication by 1}
\end{align*}
Then it follows $A[Col \ i] = B[Col \ i]$ for all $i$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Henry&#39;s Linear Algebra</title>
      <link>https://mostafatouny.github.io/post/henry-linear-pset/</link>
      <pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/henry-linear-pset/</guid>
      <description>&lt;h2 id=&#34;materials&#34;&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Book: &lt;a href=&#34;https://www.taylorfrancis.com/books/mono/10.1201/b16027/modern-introduction-linear-algebra-henry-ricardo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Henry Ricardo. A Modern Introduction to Linear Algebra. CRC&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;problem-set&#34;&gt;Problem Set&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chapter&lt;/th&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Chapter 03, Section 02&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch03-sec02_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/henry-linear-post/ch03-sec02&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chapter 04, Section 05&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch04-sec05_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/henry-linear-post/ch04-sec05&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 04 - Section 05</title>
      <link>https://mostafatouny.github.io/henry-linear-post/ch04-sec05/</link>
      <pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/henry-linear-post/ch04-sec05/</guid>
      <description>&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;b&#34; class=&#34;unnumbered&#34;&gt;B&lt;/h3&gt;
&lt;h4 id=&#34;ex.-1&#34; class=&#34;unnumbered&#34;&gt;Ex. 1&lt;/h4&gt;
&lt;p&gt;If $A$ is diagonalizable, then $A = P^{-1} D P$ for some diagonal matrix $D$. It follows
\begin{aligned}
A^T &amp;amp;= (P^{-1} D P)^T \\
&amp;amp;= P^T D^T (P^{-1})^T \\
&amp;amp;= Q D Q^{-1}
\end{aligned}
Where we defined $Q = P^T$.&lt;/p&gt;
&lt;h4 id=&#34;ex.-2&#34; class=&#34;unnumbered&#34;&gt;Ex. 2&lt;/h4&gt;
&lt;p&gt;If $A$ is diagonal, then $A = P^{-1} D P$ for some diagonal matrix $D$. It follows
\begin{aligned}
A^{-1} &amp;amp;= (P^{-1} D P)^{-1} \\
&amp;amp;= P^{-1} D^{-1} P \\
&amp;amp;= P^{-1} D P
\end{aligned}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bartle &amp; Sherbert&#39;s Real Analysis</title>
      <link>https://mostafatouny.github.io/post/bartle-analysis-pset/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/bartle-analysis-pset/</guid>
      <description>&lt;h2 id=&#34;materials&#34;&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Book: &lt;a href=&#34;https://www.wiley.com/en-us/Introduction&amp;#43;to&amp;#43;Real&amp;#43;Analysis%2C&amp;#43;4th&amp;#43;Edition-p-9781119496786&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bartle &amp;amp; Sherbert. Introduction to Real Analysis. Wiley&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;problem-set&#34;&gt;Problem Set&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chapter&lt;/th&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Chapter 08, Section 01&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch08-sec01_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/bartle-analysis-post/ch08-sec01&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chapter 10, Section 01&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch10-sec01_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/bartle-analysis-post/ch10-sec01&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 08 - Section 01</title>
      <link>https://mostafatouny.github.io/bartle-analysis-post/ch08-sec01/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/bartle-analysis-post/ch08-sec01/</guid>
      <description>&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex.-11&#34; class=&#34;unnumbered&#34;&gt;Ex. 11&lt;/h3&gt;
&lt;p&gt;For $f_n(x) = \frac{\displaystyle{x}}{\displaystyle{x+n}}$, and $f = 0$, Clearly&lt;/p&gt;
&lt;p&gt;

$||f_n - f ||_{[0,a]} = ||f_n||_{[0,a]} = \frac{\displaystyle{a}}{\displaystyle{a+n}}$. But $\lim_{n \rightarrow \infty} \frac{\displaystyle{a}}{\displaystyle{a+n}} = 0$. Hence by &lt;em&gt;lemma 8.1.8&lt;/em&gt; (page 244), The uniform convergence on $[0,a]$ follows.&lt;/p&gt;
&lt;p&gt;We follow &lt;em&gt;Lemma 8.1.5&lt;/em&gt; (page 244). Consider subsequences $n_k = x_k = k$. Then $f_{n_k}(x_k) = \frac{\displaystyle{k + k}}{\displaystyle{k}} = \frac{\displaystyle{1}}{\displaystyle{2}}$. Therefore $|f_{n_k}(x_k) - f(x_k)| = |f_{n_k}(x_k)| = \frac{\displaystyle{1}}{\displaystyle{2}} = \epsilon_0$.&lt;/p&gt;
&lt;h3 id=&#34;ex.-18&#34; class=&#34;unnumbered&#34;&gt;Ex. 18&lt;/h3&gt;
&lt;p&gt;We use &lt;em&gt;lemma 8.1.8&lt;/em&gt; (page 244). Note $f_n(x) = xe^{-nx}$ and $f = 0$. Then $||f_n - f||&lt;em&gt;{[0,\infty)} = ||f_n||&lt;/em&gt;{[0,\infty)} = 1/n$.&lt;/p&gt;
&lt;p&gt;To see why, Observe $f_n&amp;rsquo;(x) = (e^{-nx})(1-nx)$, and setting $f_n&amp;rsquo;(x) = 0$ yields local max/min at $x = 0$ and $x = 1/n$. That justifies the supremum we aforementioned.&lt;/p&gt;
&lt;p&gt;But $\lim_{n \rightarrow \infty} 1/n = 0$, Concluding uniform convergence.&lt;/p&gt;
&lt;h3 id=&#34;ex.-21&#34; class=&#34;unnumbered&#34;&gt;Ex. 21&lt;/h3&gt;
&lt;p&gt;Observe $| (f_n(x) + g_n(x) ) - ( f(x) + g(x) ) | \leq |f_n(x) - f(x)| + |g_n(x) - g(x)| &amp;lt; \epsilon/2 + \epsilon/2 = \epsilon$, Following by the triangle inequality.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 10 - Section 01</title>
      <link>https://mostafatouny.github.io/bartle-analysis-post/ch10-sec01/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/bartle-analysis-post/ch10-sec01/</guid>
      <description>&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;1&lt;/h3&gt;
&lt;h4 id=&#34;a&#34; class=&#34;unnumbered&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;By definition of a gauge, we have
\begin{aligned}
t_i - \delta(t_i) &amp;amp;\leq x_{i-1} \\
x_i &amp;amp;\leq t_i + \delta(t_i)
\end{aligned}
Implying,
\begin{aligned}
x_i - x_{i-1} \leq t_i + \delta(t_i) - x_{i-1} \\
-t_i + \delta(t_i) \geq -x_{i-1}
\end{aligned}
Concluding for all $i \in { 1,2, \dots, n }$,
\begin{aligned}
x_i - x_{i-1} &amp;amp;\leq t_i + \delta(t_i) - t_i + \delta(t_i) \\
&amp;amp;\leq 2 \delta(t_i)
\end{aligned}&lt;/p&gt;
&lt;h4 id=&#34;b&#34; class=&#34;unnumbered&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;Clearly 

$x_i - x_{i-1} \leq 2 \delta^*$ for all $i \in {1, 2, \dots, n}$. Then 

$\max \\{x_i - x_{i-1}\\} = ||\dot{p}|| \leq 2 \delta^*$.&lt;/p&gt;
&lt;h4 id=&#34;c&#34; class=&#34;unnumbered&#34;&gt;c&lt;/h4&gt;
&lt;p&gt;$\max \{ x_i - x_{i-1} \} \leq \delta_* = inf \{ \delta(t) \}$. Then 

$x_i - x_{i-1} \leq \delta_*$
\begin{aligned}
x_i &amp;amp;\leq \delta(t_i) + x_{i-1} \\
&amp;amp;\leq \delta(t_i) + t_i \qquad \text{by def } x_{i-1} \leq t_i \\
\end{aligned}
Analogously,


\begin{aligned}
    x_{i-1} &amp;\geq - \delta_*(t_i) + x_i \\\\
    &amp;\geq - \delta_*(t_i) + t_i \qquad \text{by def } x_i \geq t_i
\end{aligned}
Therefore, $[x_{i-1}, x_i] \subset [ t_i - \delta(t_i), t_i + \delta(t_i) ]$, i.e
$Q$ is $\delta-$fine.&lt;/p&gt;
&lt;h4 id=&#34;d&#34; class=&#34;unnumbered&#34;&gt;d&lt;/h4&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;2&lt;/h3&gt;
&lt;h4 id=&#34;a-1&#34; class=&#34;unnumbered&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;Observe for interval $[x_{i-1}, x_i]$ for any partition,



\begin{aligned}
    \forall i,j, \quad [x_{i-1}, x_i] \cap [x_{j-1}, x_j] = \begin{cases}
        [x_{i-1}, x_i]\qquad &amp; i = j \\\\
        \{ x_i \} \qquad &amp;j = i + 1 \\\\
        \{ x_{i-1} \} \qquad &amp;j= i - 1 \\\\
        \phi \qquad &amp;\text{otherwise}
    \end{cases}
\end{aligned}

It is easy to see considering any third interval containing a point $x$, necessarily implies two intervals share an intermediary point, violating the partitioning condition.&lt;/p&gt;
&lt;h4 id=&#34;b-1&#34; class=&#34;unnumbered&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;Yes. For example, on $[0,1]$, we have the partition:
\begin{aligned}
&amp;amp;([0, 1/4], 1/4),  \\
&amp;amp;([1/4, 1/2], 1/4), \\
&amp;amp;([1/2, 3/4], 3/4), \\
&amp;amp;([3/4, 1], 3/4)
\end{aligned}&lt;/p&gt;
&lt;h3 id=&#34;3&#34;&gt;3&lt;/h3&gt;
&lt;h4 id=&#34;a-2&#34;&gt;a&lt;/h4&gt;
&lt;!-- ![](./2-0.jpg) --&gt;
&lt;img src=&#34;2-0.jpg&#34; width=60%&gt;
&lt;p&gt;For every intervals $I_1, I_2$ with a common tag $t_1 = t_2$, subtitute them by a single interval $I$ with tag $t = t_1 = t_2$.&lt;/p&gt;
&lt;p&gt;Clearly $S(f,{I}) = S(f, {I_1, I_2})$.&lt;/p&gt;
&lt;h4 id=&#34;b-2&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;Yes.&lt;/p&gt;
&lt;h4 id=&#34;c-1&#34;&gt;c&lt;/h4&gt;
&lt;!-- ![](./2-1.jpg) --&gt;
&lt;img src=&#34;2-1.jpg&#34; width=60%&gt;
&lt;p&gt;For every interval $I$ with a tag $t$ contained only in it, Partition $I$ to $I_1, I_2$ separated at $t$, with tags $t_1 = t_2 = t$.&lt;/p&gt;
&lt;h3 id=&#34;4&#34;&gt;4&lt;/h3&gt;
&lt;h4 id=&#34;a-3&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;Let $I$ be an interval containing $1$. Denote its tag by $t = 1 + x$. As both $1$ and $1 + x$ are in $I$, $|I| \geq x$. But by definition $\delta(t) = \delta(1+x) = 0.5 x &amp;lt; x$, Contradiction. Therefore the tag of $I$ is necessarily $1$.&lt;/p&gt;
&lt;h4 id=&#34;b-3&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;At maximum two intervals $I_1$ and $I_2$ can contain $1$. From &lt;em&gt;a&lt;/em&gt;, their tags are $t_1 = t_1 = 1$. By definition $\delta(1) = 0.01$, So $|I_1| + |I_2| \leq 0.01 + 0.01 = 0.02$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Axler&#39;s Linear Algebra</title>
      <link>https://mostafatouny.github.io/post/axler-linear-pset/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/axler-linear-pset/</guid>
      <description>&lt;h2 id=&#34;materials&#34;&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Book: Linear Algebra Done Right by Sheldon Axler, 3rd ed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Section&lt;/th&gt;
&lt;th&gt;Source&lt;/th&gt;
&lt;th&gt;Solution&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ch. 03, Sec. E&lt;/td&gt;
&lt;td&gt;Page 98&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch03-secE_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/axler-linear-post/ch03-sece&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch. 03, Sec. F&lt;/td&gt;
&lt;td&gt;Page 113&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch03-secF_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/axler-linear-post/ch03-secf&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch. 07, Sec. A&lt;/td&gt;
&lt;td&gt;Page 214&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch07-secA_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/axler-linear-post/ch07-seca&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch. 07, Sec. B&lt;/td&gt;
&lt;td&gt;Page 223&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch07-secB_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/axler-linear-post/ch07-secb&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Ch. 03, Sec. E</title>
      <link>https://mostafatouny.github.io/axler-linear-post/ch03-sece/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/axler-linear-post/ch03-sece/</guid>
      <description>&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex.-02&#34; class=&#34;unnumbered&#34;&gt;Ex. 02&lt;/h3&gt;
&lt;p&gt;It follows immediately by &lt;em&gt;dimension of a product&lt;/em&gt; theorem (page 92), As any $dim V_j$ must be upper-bounded by a finite number.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 06 - Section 07</title>
      <link>https://mostafatouny.github.io/vraj-kni-post/ch06-sec07/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/vraj-kni-post/ch06-sec07/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;3&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fact.&lt;/strong&gt; Given a set $A$ of distinct elements in a random order, The positition of the maximum element of a subset $S \subset A$ is uniform in $S$.&lt;/p&gt;
&lt;p&gt;Define indicator random variables $L_i$ as
$$
L_i =
\begin{cases}
1 &amp;amp; a_i &amp;gt; a_{i-1}, a_{i-2}, \dots, a_{1} \\
0 &amp;amp; a_i &amp;lt; a_j, \text{ for some } j = 1,2, \dots, i-1
\end{cases}
$$
So $L_i = 1$ if and only if the ith item $a_i$ is the maximum in subset $A[1:i]$.&lt;/p&gt;
&lt;p&gt;It follows $Pr[L_i = 1] = 1/i$ and $Ex[Li] = 1/i$.&lt;/p&gt;
&lt;p&gt;Let $X$ be a random variable for the number of times the line &lt;code&gt;a[first] &amp;gt; a[max_loc]&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt;. Observe $X = L_2 + L_3 + \dots + L_n$. So $Ex[X] = 1/2 + \dots + 1/n = H(n) - 1 \approx \ln n - 1$.&lt;/p&gt;
&lt;p&gt;$H(n)$ here is the nth harmonic sum.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;4&lt;/h3&gt;
&lt;h4 id=&#34;a&#34; class=&#34;unnumbered&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Note.&lt;/strong&gt; Our solution was initially flawed until we read the description of &lt;em&gt;exercise 6&lt;/em&gt; which gave the correct answer. We only reconstructred the proof given the answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact 1.&lt;/strong&gt; On the ith step of the first pass of bubble-sort, $A[i]$ is the maximum element among $A[0:i]$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact 2.&lt;/strong&gt; Given $A$ is a set of distinct elements in a random order, The probability of $A[i]$ being the maximum element of $A[0:i]$ is $\frac{\displaystyle{1}}{\displaystyle{i+1}}$.&lt;/p&gt;
&lt;p&gt;Let $R_i$ be an indicator random variable, Indicating whether $A[i] &amp;gt; A[i+1]$, at the ith step of the loop. From &lt;em&gt;Fact 1&lt;/em&gt;, $R_i = 1$ if and only if $A[i+1]$ is not the maximum among $A[0:i+1]$. The probability of that event is $\frac{\displaystyle{i+1}}{\displaystyle{i+2}}$ from &lt;em&gt;Fact 2&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Clearly $Ex[R_i] = \frac{\displaystyle{i+1}}{\displaystyle{i+2}}$. It follows $W = \sum_{i=0}^{n-2} R_i = \frac{\displaystyle{1}}{\displaystyle{2}} + \frac{\displaystyle{2}}{\displaystyle{3}} + \dots + \frac{\displaystyle{n-1}}{\displaystyle{n}} = (n-1) - \left ( \nfrac{1}{2} + \nfrac{1}{3} + \dots + \nfrac{1}{n} \right ) = n - 1 - H_n + 1 \approx n - \lg n$.&lt;/p&gt;
&lt;h4 id=&#34;b&#34; class=&#34;unnumbered&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;That event happens if and only if&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$max(A[1], A[2]) &amp;lt; A[3]$. Its probability is $\frac{\displaystyle{2}}{\displaystyle{3}}$. Or&lt;/li&gt;
&lt;li&gt;$max(A[1], A[2]) &amp;gt; A[3]$ and $A[1] &amp;lt; A[3]$. Its probability is $\frac{\displaystyle{1}}{\displaystyle{3}} \cdot \frac{\displaystyle{1}}{\displaystyle{2}} = \frac{\displaystyle{1}}{\displaystyle{6}}$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the probability $A[1] &amp;lt; A[2]$ after the first pass of bubble-sort is $\frac{\displaystyle{2}}{\displaystyle{3}} + \frac{\displaystyle{1}}{\displaystyle{6}} = \frac{\displaystyle{4}}{\displaystyle{6}} = \frac{\displaystyle{2}}{\displaystyle{3}}$.&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;5&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fact.&lt;/strong&gt; Given a randomly ordered $A$, Any $A[:K]$ is also randomly ordered.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact.&lt;/strong&gt; Uniformly $A[k] \in { q_1, q_2, \dots, q_k }$ where $q_i \in A[:k]$ and $q_1 &amp;gt; q_2 &amp;gt; \dots &amp;gt; q_k$.&lt;/p&gt;
&lt;p&gt;In kth iteration, $A[1:k-1]$ is sorted, and $A[k]$ will be uniformly displaced to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;position $k, k-1, \dots, 1$. Respectively,&lt;/li&gt;
&lt;li&gt;#comparisons $= 1,2, \dots, k$. Respectively,&lt;/li&gt;
&lt;li&gt;#assignments $= 0, 1, \dots, k-1$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Denote total number of comparisons by $C$ and comparisons in kth iteration by $C_k$. Similarly $A$ and $A_k$ for assignments. In expectation
\begin{aligned}
Ex[C_k] &amp;amp;= \nfrac{1}{k} (1 + \dots + k) = \nfrac{1}{k} \nfrac{k \cdot k+1}{2} = \nfrac{k+1}{2} \\
Ex[A_k] &amp;amp;= \nfrac{1}{k} (1 + \dots + k-1) = \nfrac{1}{k} \nfrac{(k-1)k}{2} = \nfrac{k-1}{2}
\end{aligned}
Clearly $C = \sum_{k=2}^n C_k$ and $A = \sum_{k=2}^n A_k$. So
\begin{aligned}
Ex[C] &amp;amp;= \sum_{k=2}^n \nfrac{k+1}{2} \\
&amp;amp;= \nfrac{1}{2} \sum_{k=2}^n k+1 \\
&amp;amp;= \nfrac{1}{2} \left [ ( \sum_{k=1}^{n+1} k) - 1 - 2 \right ] \\
&amp;amp;= \nfrac{1}{2} \left [ \nfrac{(n+1)(n+2)}{2} - 3 \right ] \\
&amp;amp;= \nfrac{(n+1)(n+2)}{4} - \nfrac{3}{2} \\
Ex[A] &amp;amp;= \sum_{k=2}^n \nfrac{k-1}{2} \\
&amp;amp;= \nfrac{1}{2} \sum_{k=2}^n k-1 \\
&amp;amp;= \nfrac{1}{2} \sum_{k=1}^{n-1} k \\
&amp;amp;= \nfrac{1}{2} \nfrac{n(n-1)}{2} \\
&amp;amp;= \nfrac{n(n-1)}{4}
\end{aligned}&lt;/p&gt;
&lt;h3 id=&#34;6&#34;&gt;6&lt;/h3&gt;
&lt;p&gt;The fact $Ex[W_n] = n - H(n)$ rests on the assumption array $A$ is randomly ordered. That is not the case after the first pass. This is clear from our answer in &lt;em&gt;Ex. 4, b&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;9&#34;&gt;9&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fact 1.&lt;/strong&gt; The number of comparisons took by the algorithm is decided by the smaller-position target.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact 2.&lt;/strong&gt; Given $A$ is randomly ordered, target $t_1$ is uniform among all $n$ positions, and target $t_2$ is uniform among all remaining $n-1$ positions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact 3.&lt;/strong&gt; Since we are operating on remaining $n-1$ positions, The choice of $t_1$ is irrelevant. In other words the two events independent.&lt;/p&gt;
&lt;p&gt;Let $R$ be the number of algorithm&amp;rsquo;s comparisons. Let $W$ be the position of smaller-position target. By &lt;em&gt;Fact 1&lt;/em&gt; $R = W+1$. Observe $Pr[W=0] = Pr[R=1] = \frac{\displaystyle{1}}{\displaystyle{n}} \cdot \frac{\displaystyle{n-1}}{\displaystyle{n-1}}$, $Pr[W=1] = Pr[R=2] = \frac{\displaystyle{1}}{\displaystyle{n}} \cdot \frac{\displaystyle{n-2}}{\displaystyle{n-1}}$&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex09-0.png&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Generally, for $k \in { 0, 1, \dots, n-1 }$, $Pr[R=k] = \frac{\displaystyle{n-k}}{\displaystyle{n-1}}$. So by definition,
\begin{aligned}
Ex[R] &amp;amp;= \sum_{k=1}^{n-1} i \cdot \frac{\displaystyle{1}}{\displaystyle{n}} \cdot \frac{\displaystyle{n-i}}{\displaystyle{n-1}} \\
&amp;amp;= \frac{\displaystyle{1}}{\displaystyle{n}} \cdot \frac{\displaystyle{1}}{\displaystyle{n-1}} \sum_{i=1}^{n-1} i (n-i) \\
&amp;amp;= \frac{\displaystyle{1}}{\displaystyle{n}} \cdot \frac{\displaystyle{1}}{\displaystyle{n-1}} \left ( n \sum_{i=1}^{n-1} i - \sum_{i=1}^{n-1} i^2 \right ) \\
&amp;amp;= \frac{\displaystyle{1}}{\displaystyle{n}} \cdot \frac{\displaystyle{1}}{\displaystyle{n-1}} \left ( n \frac{\displaystyle{n(n-1)}}{\displaystyle{2}} - \frac{\displaystyle{(n-1)n(2n-1)}}{\displaystyle{6}} \right ) \\
&amp;amp;= \frac{\displaystyle{3n}}{\displaystyle{6}} - \frac{\displaystyle{2n-1}}{\displaystyle{6}} = \frac{\displaystyle{n+1}}{\displaystyle{6}}
\end{aligned}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vrajitoru &amp; Knight&#39;s Probabilistic Analysis of Algorithms</title>
      <link>https://mostafatouny.github.io/post/vraj-kni-pset/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/vraj-kni-pset/</guid>
      <description>&lt;h2 id=&#34;materials&#34;&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Book: &lt;a href=&#34;https://link.springer.com/book/10.1007/978-3-319-09888-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vrajitoru &amp;amp; Knight. Practical Analysis of Algorithms. Springer&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;problem-set&#34;&gt;Problem Set&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chapter&lt;/th&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Chapter 02, Section 01&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch02-sec01_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/vraj-kni-post/ch02-sec01&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chapter 06, Section 07&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch06-sec07_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/vraj-kni-post/ch06-sec07&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Ch. 07, Sec. B</title>
      <link>https://mostafatouny.github.io/axler-linear-post/ch07-secb/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/axler-linear-post/ch07-secb/</guid>
      <description>&lt;p&gt;$\newcommand{\ddfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex.-01&#34; class=&#34;unnumbered&#34;&gt;Ex. 01&lt;/h3&gt;
&lt;p&gt;False. If there is a basis consisting of eigenvectors of $T$, Then $M(T)$ is diagonal. It follows $M(T) M(T)^* = M(T)^* M(T)$, Equivalently $TT^* = T^*T$, So $T$ is self-adjoint.&lt;/p&gt;
&lt;h3 id=&#34;ex.-02&#34; class=&#34;unnumbered&#34;&gt;Ex. 02&lt;/h3&gt;
&lt;p&gt;Assume $F = \mathbb{R}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Observation.&lt;/strong&gt; $p(x) = x^2 -5x + 6 = (x-2)(x-3)$. $p(T) = T^2 -5T + 6I = (T-2I)(T-3I)$&lt;/p&gt;
&lt;p&gt;The goal is $p(T) = 0$. It suffices to show $p(T)v = 0$ for any vector $v$.&lt;/p&gt;
&lt;p&gt;By &lt;em&gt;Real Spectral Theorem&lt;/em&gt; (p. 221), There is a basis of eigenvectors of $T$ corresponding to eigenvalues $\lambda_1, .., \lambda_n$. By hypothesis we know $\lambda_i = 2$ or $\lambda_i = 3$.&lt;/p&gt;
&lt;p&gt;Let $v$ be an arbitrary vector $v$. Then $v = a_1v_1 + \dots + a_nv_n$. Observe $p(T)(v) = p(T)(a_1v_1) + \dots + p(T)(a_nv_n) = a_1p(\lambda_1)v_1 + \dots + a_np(\lambda_n)v_n$. But $p(\lambda_i) = 0$, so $p(T)v = 0$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 09</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset09/</link>
      <pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset09/</guid>
      <description>&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;1&lt;/h3&gt;
&lt;p&gt;We use &lt;em&gt;Theorem 9.1&lt;/em&gt; (page 175) to show the answer is NO. $(2 3) \in S_3$ and yet, $(2 3)H(2 3) = { (2 3)(1)(2 3), (2 3)(1 2)(2 3) } = { (1), (1 3)} \not\subset H$.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;2&lt;/h3&gt;
&lt;p&gt;We use &lt;em&gt;Theorem 9.1&lt;/em&gt; (page 174). We know from earlier chapters, $A_n$ is a subgroup of $S_n$. Then for any $x \in S_n$ and any $h \in A_n$, we get a permutation $xhx^{1}$ consisting of even 2-cycles. To see why, Observe we know $x^{-1}$ has the same number of 2-cycles as $x$. Whether $x$ consists of even or odd number of 2-cycles, The contribution of 2-cycles of both $x$ and $x^{-1}$ is even.&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;6&lt;/h3&gt;
&lt;p&gt;NO. It suffices to take some matrix $h \in H$ and a matrix $x \in GL(2,R)$, and show $xhx^{-1} \not\in H$. Clearly:&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix} 2 &amp;amp; 1 \\ 1 &amp;amp; 2  \end{bmatrix} \begin{bmatrix} 1 &amp;amp; 1 \\ 0 &amp;amp; 1 \end{bmatrix} \begin{bmatrix} 2 &amp;amp; 1 \\ 1  &amp;amp; 2  \end{bmatrix}^{-1} \\ = \begin{bmatrix} 2 &amp;amp; 1 \\ 1 &amp;amp; 2 \end{bmatrix} \begin{bmatrix} 1 &amp;amp; 1 \\ 0 &amp;amp; 1 \end{bmatrix} \begin{bmatrix} 2/3 &amp;amp; -1/3 \\ -1/3  &amp;amp; 2/3 \end{bmatrix} = \begin{bmatrix} 4/3 &amp;amp; -1 \\ -1/3  &amp;amp; 2 \end{bmatrix} \not\in H
$$&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;8&lt;/h3&gt;
&lt;p&gt;We immediately prove the general case of $\langle k \rangle / \langle n \rangle \cong \mathcal{Z}_{n/k}$, given $k$ divides $n$.&lt;/p&gt;
&lt;p&gt;For arbitrary two elements of under the operation:
\begin{aligned}
(k^a \langle n \rangle) (k^b \langle n \rangle)
&amp;amp;= k^{a+b} \langle n \rangle \qquad &amp;amp;\text{Definition} \\
&amp;amp;= k^{\frac{n}{k} q + r} \langle n \rangle, 0 \leq r &amp;lt; n/k \qquad &amp;amp;\text{Euclidean Division} \\
&amp;amp;= k^{\frac{n}{k} q} k^r \langle n \rangle \\
&amp;amp;= k^r (k^{\frac{n}{k} q} \langle n \rangle) \qquad &amp;amp;\text{Commutativity and Associativity of $\mathcal{Z}$} \\
&amp;amp;= k^r (n \langle n \rangle) \\
&amp;amp;= k^r \langle n \rangle
\end{aligned}&lt;/p&gt;
&lt;p&gt;But in $\mathcal{Z}_{n/k}$, $ab = a + b \mod \frac{n}{k}$, which corresponds to $(k^a \langle n \rangle) (k^b \langle n \rangle) = k^{a + b \mod r} \langle n \rangle$.&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;9&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fact.&lt;/strong&gt; Citing from the course TA, Ibrahim, left/right cosets parition
the group $G$. (msh naseek ya bob).&lt;/p&gt;
&lt;p&gt;Since the index is given to be $2$, We know $G/H = { H, g_0 H } = { H, Hg_0}$.&lt;/p&gt;
&lt;p&gt;Consider arbitrary $x \in G$. If $x \in H$ then $xH = H = Hx$ from &lt;em&gt;Lemma&lt;/em&gt; (page 139). If $x \not\in H$, Then $x \in g_0H$ and $x \in Hg_0$ by our &lt;em&gt;Fact&lt;/em&gt;. It follows $g_0h_0 = x = h_1g_0$ for some $h_0, h_1 \in H$, and in turn $xH = g_0H = Hg_0 = Hx$.&lt;/p&gt;
&lt;p&gt;It follows $H$ is normal.&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;10&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(a).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;By &lt;em&gt;Theorem 9.1&lt;/em&gt; (page 175), We construct $xhx^{-1} \not\in H$ for some $x \in A_4$ and $h \in H$.&lt;/p&gt;
&lt;p&gt;Let $h = (1 2)(3 4)$ and $x = (1 3)(2 3)$. Then $x^{-1} = (2 3)(1 3)$, and in turn $xhx^{-1} = (1 3)(2 3)(1 2)(3 4)(2 3)(1 3)$. In other notation,&lt;/p&gt;
&lt;p&gt;$$
xhx^{-1} = \begin{bmatrix} 1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 \\ 3 &amp;amp; 4 &amp;amp; 1 &amp;amp; 2 \end{bmatrix} \neq (1 2)(3 4)
$$&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;12&lt;/h3&gt;
&lt;p&gt;For arbitrary abelian group $G$ with elements $a_0$ and $a_1$, and factor group $G/H$, We have:
\begin{aligned}
(a_0 H)(a_1 H) &amp;amp;= (a_0 a_1) H \qquad &amp;amp;\text{Definition} \\
&amp;amp;= (a_1 a_0) H \qquad &amp;amp;\text{$G$ is Abelian} \\
&amp;amp;= (a_1 H)(a_0 H)
\end{aligned}&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;14&lt;/h3&gt;
&lt;p&gt;We know the identity of $\mathcal{Z}_{24}/ \langle 8 \rangle$ is $0 + \langle 8 \rangle$. We are looking for smallest $k$ satisfying
\begin{aligned}
(14 + \langle 8 \rangle)^k &amp;amp;= 0 + \langle 8 \rangle \\
14^k + \langle 8 \rangle &amp;amp;=
\end{aligned}
Thanks for the course TA, Ibrahim, That can be satisfied while $14^k \neq 0$.&lt;/p&gt;
&lt;p&gt;From the &lt;em&gt;lemma&lt;/em&gt; (page 139), This is true if and only if $14^k \in \langle 8 \rangle$. In other words, We want smallest positive $k$, such that $14^k = 8^m$ for some integer $m$. By computation, $k = 3$ as $14^3 = 8$.&lt;/p&gt;
&lt;h3 id=&#34;section-8&#34; class=&#34;unnumbered&#34;&gt;22&lt;/h3&gt;
&lt;p&gt;Observe $(Z \oplus Z) / \langle (2,2) \rangle = \{ (0,0)+\langle (2,2) \rangle, (0,1)+\langle (2,2) \rangle), (1,0)+\langle (2,2) \rangle, (1,1)+\langle (2,2) \rangle \}$.&lt;/p&gt;
&lt;p&gt;To see why consider arbitrary $(a,b) \in Z \oplus Z$ and apply Euclid&amp;rsquo;s
division theorem to get $a = 2k_0 + r_0$ and $b = 2k_1 +r_1$ where
$0 \leq r_0,r_1 &amp;lt; 2$.&lt;/p&gt;
&lt;p&gt;Then the order is $4$.&lt;/p&gt;
&lt;p&gt;It is not cyclic as no single $(a,b)$ can generate all of $(0,0), (0,1), (1,0), (1,1)$.&lt;/p&gt;
&lt;h3 id=&#34;section-9&#34; class=&#34;unnumbered&#34;&gt;37&lt;/h3&gt;
&lt;p&gt;Recall the notation of $|g|$ as the order of element $g$. By definition $g^{|g|} = 0$. Then $(gH)^{|g|} = g^{|g|}H = H$. By &lt;em&gt;Corollary 2&lt;/em&gt; (page 77), $|gH|$ divides $|g|$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 10</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset10/</link>
      <pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset10/</guid>
      <description>&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;8&lt;/h3&gt;
&lt;p&gt;Homomorphism. If $\sigma_1$ and $\sigma_2$ are both even or both odd, then $\sigma_1 \sigma_2$ is even and $sgn(\sigma_1) sgn(\sigma_2) = 1$. If one of them is even and the other is odd, then $\sigma_1 \sigma_2$ is odd and $sgn(\sigma_1) sgn(\sigma_2) = 1 * -1 = -1$.&lt;/p&gt;
&lt;p&gt;Kernel. $Ker , sgn$ is the subgroup of even permutations of $G$.&lt;/p&gt;
&lt;p&gt;$A_n$ is a normal subgroup of $S_n$. When $G = S_n$, $Ker , sgn = A_n$. By &lt;em&gt;corollary&lt;/em&gt; (page 198), $Ker , sgn$ is a normal subgroup.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ex 23&lt;/em&gt; in &lt;em&gt;Ch 05&lt;/em&gt;. Now consider the homomorphism $sgn$ on arbitrary subgroup $H$. We know the identity must be $sgn(H)$. If $sgn(H) = { 1 }$ then all permutations of H are even. Otherwise $sgn(H) = { 0, 1}$. By &lt;em&gt;property 5&lt;/em&gt; in &lt;em&gt;theorem 10.2&lt;/em&gt; (page 197), we have n-to-1 mapping from even permutations, and n-to-1 mapping from odd permutations. Hence exactly half of $H$ are even.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;12&lt;/h3&gt;
&lt;p&gt;By definition, $Z_n/\langle k \rangle = { x + \langle k \rangle \mid x \in \mathcal{Z}_n }$. But by &lt;em&gt;Euclid&amp;rsquo;s Division&lt;/em&gt;, $x + \langle k \rangle = (kq + r) + \langle k \rangle = r + (kq + \langle k \rangle) = r + \langle k \rangle$. It follows $\mathcal{Z}_n / \langle k \rangle = { x + \langle k \rangle \mid x \in \mathcal{Z}_k }$.&lt;/p&gt;
&lt;p&gt;Now define $\phi: \mathcal{Z}_n / \langle k \rangle \rightarrow \mathcal{Z}_k$ by $\phi(x + \langle k \rangle) = x$. It is injective as $\phi(x + \langle k \rangle) = \phi(y + \langle k \rangle)$ implies $x = y$. Surjective as for any $y \in \mathcal{Z}_k$ we have $\phi(y + \langle k \rangle = y$. Finally it preservers the operation as $\phi(x + \langle k \rangle) + \phi(y + \langle k \rangle) = x + y = \phi( (x+y) + \langle k \rangle )$.&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;15&lt;/h3&gt;
&lt;p&gt;Let $x$ be arbitrary such that $\phi(x) = 9$. Then
\begin{aligned}
\phi(x) - \phi(23) &amp;amp;= 9 - 9 = 0 \\
\phi(x - 23) &amp;amp;= 0 \\
x - 23 &amp;amp;\in \{ 0, 10, 20 \} \\
x + 7 &amp;amp;\in \{ 0, 10, 20 \} \\
x &amp;amp;\in \{ 23, 3, 13 \}
\end{aligned}&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;16&lt;/h3&gt;
&lt;p&gt;Let $\phi$ be an arbitrary homomorphism.&lt;/p&gt;
&lt;p&gt;Since both $\mathcal{Z}_8 \oplus \mathcal{Z}_2$ and $\mathcal{Z}_4 \oplus \mathcal{Z}_4$ have exactly 16 elements, the surjectivity of homomorphism $\phi$ implies isomorphism.&lt;/p&gt;
&lt;p&gt;Recall &lt;em&gt;property 5&lt;/em&gt;, of &lt;em&gt;Theorem 6.2&lt;/em&gt; (page 126) which states isomorphism preserves orders. So $8 = |(1,0)| = |\phi(1,0)|$. So there is some element in $\mathcal{Z}_4 \oplus \mathcal{Z}_4$ which is of order 8. Contradiction.&lt;/p&gt;
&lt;p&gt;Observe all elements of $Z_4$ are of orders $1,2,4$. Since all of them divides $4$, The order of any element of $\mathcal{Z}_4 \oplus \mathcal{Z}_4$ is at most $4$.&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;20&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(1).&lt;/strong&gt; $\mathcal{Z}_{20}$ onto $\mathcal{Z}_8$.&lt;/p&gt;
&lt;p&gt;Let $\phi$ be an arbitrary homomorphism. By surjectivity we know $\phi(\mathcal{Z}_{20}) = \mathcal{Z}_8$. By theorem 10.2, 5 (page 197), $20$ is a multiple of $8$. Contradiction. It follows the number of homomorphisms is zero.&lt;/p&gt;
&lt;p&gt;P.S. The TA Ibrahim notified me Math is not about hacking puzzles but seeing the structure behind. He told me an alternative proof by cosets and quotient groups. For academic integrity I present the proof I discovered on my own.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2).&lt;/strong&gt; $\mathcal{Z}_{20}$ to $\mathcal{Z}_8$.&lt;/p&gt;
&lt;p&gt;Let $\phi: \mathcal{Z}_{20} \rightarrow \mathcal{Z}_8$ be an arbitrary homomorphism. We follow the procedure of example 10 (page 199). Let $\phi(1) = a$. Then $|a|$ divides both $20$ and $8$. It follows $|a| \in {1, 2, 4}$ and in turn $a \in { 0, 2, 4, 6 }$. Since $\phi(1)$ decides the homomorphism, There are 4 possible homomorphisms.&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;24&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(a).&lt;/strong&gt; In light of &lt;em&gt;property 2&lt;/em&gt; of &lt;em&gt;theorem 10.1&lt;/em&gt; (page 196), Observe $6 = \phi(7) = \phi(7 \cdot 1) = 7 \cdot \phi(1)$. But $13 \cdot 7 \mod 15 = 1$. It follows $\phi(1) = 13 \cdot 6 = 3$. Therefore $\phi(x) = \phi(1 \cdot x) = \phi(1) \cdot x = 3x$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(b).&lt;/strong&gt; The image is all multiples of 3 strictly less than 15.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(c).&lt;/strong&gt; By definition we are looking for $x \in \mathcal{Z}_{50}$ such that $\phi(x) = 3x = 0$. But $3x \equiv 0$ if and only if $3x - 0 = 3x$ is a multiple of $15$ if and only if $x = 5i$. In other words the kernel are multiples of 5 strictly less than $50$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(d).&lt;/strong&gt; We want to characterize $x$ such that $\phi(x) = 3$. But by definition we know $\phi(x) = 3x$. Then
\begin{aligned}
3 &amp;amp;\equiv 3x \mod 15 \\
3x - 3 &amp;amp;= 15i \\
x - 1 &amp;amp;= 5i \\
x &amp;amp;= 5i + 1
\end{aligned}
So $\phi^{-1}(3) = \{ 5i + 1 \mid 0 \leq i \leq 9 \}$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 11</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset11/</link>
      <pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset11/</guid>
      <description>&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;2&lt;/h3&gt;
&lt;p&gt;$n = 3$.&lt;/p&gt;
&lt;p&gt;The table in page 213 shows that.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;5&lt;/h3&gt;
&lt;p&gt;$45 = 3^2 \cdot 5^1$. By the &lt;em&gt;fundamental theorem of finite abelian
groups&lt;/em&gt;, All possible groups are
\begin{aligned}
Z_9 \oplus Z_5 &amp;amp;\approx Z_{45} \\
Z_3 \oplus Z_3 \oplus Z_5 &amp;amp;\approx Z_3 \oplus Z_{15}
\end{aligned}&lt;/p&gt;
&lt;p&gt;Group $(1)$ has element $3$ whose order is $|3| = 15$. Group $(2)$ has element $(0,1)$ whose order is $|(0,1)| = 15$. Therefore, Any finite abelian group of order $45$ has an element of order $15$.&lt;/p&gt;
&lt;p&gt;By &lt;em&gt;The fundamental theorem of cyclic groups&lt;/em&gt; (page 81) we know all elements orders of $Z_3$ are: $1, 3$, and all elements orders of $Z_{15}$ are: $1, 3, 5$. But by &lt;em&gt;Theorem 8.1&lt;/em&gt; (page 158) all elements&amp;rsquo; orders of $Z_3 \oplus Z_{15}$ are: $1, 3, 5, 15$, by computing $lcm$ of all possible pairs of elements orders. Therefore, It is not necessarily the case any finite abelian group of order $45$ has an element of order $9$.&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;10&lt;/h3&gt;
&lt;p&gt;$360 = 2^3 \cdot 3^2 \cdot 5^1$.&lt;/p&gt;
&lt;p&gt;For $2^3$, $k = 3$,
\begin{aligned}
3 &amp;amp;\qquad Z_8 \\
2 + 1 &amp;amp;\qquad Z_4 \oplus Z_2 \\
1 + 1 + 1 &amp;amp;\qquad Z_2 \oplus Z_2 \oplus Z_2
\end{aligned}&lt;/p&gt;
&lt;p&gt;For $3^2$, $k = 2$,
\begin{aligned}
2 &amp;amp;\qquad Z_9 \\
1 + 1 &amp;amp;\qquad Z_3 \oplus Z_3
\end{aligned}$$&lt;/p&gt;
&lt;p&gt;For $5^1$, $k = 1$,
\begin{aligned}
1 \qquad Z_5
\end{aligned}&lt;/p&gt;
&lt;p&gt;It follows all groups are
\begin{aligned}
&amp;amp;Z_8 \oplus Z_9 \oplus Z_5 \\
&amp;amp;Z_8 \oplus Z_3 \oplus Z_3 \oplus Z_5 \\
&amp;amp;Z_4 \oplus Z_2 \oplus Z_9 \oplus Z_5 \\
&amp;amp;Z_4 \oplus Z_2 \oplus Z_3 \oplus Z_3 \oplus Z_5 \\
&amp;amp;Z_2 \oplus Z_2 \oplus Z_2 \oplus Z_9 \oplus Z_5 \\
&amp;amp;Z_2 \oplus Z_2 \oplus Z_2 \oplus Z_3 \oplus Z_3 \oplus Z_5
\end{aligned}&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;22&lt;/h3&gt;
&lt;p&gt;By &lt;em&gt;the fundamental theorem of finite abelian groups&lt;/em&gt;, $G \approx Z_{p_1^{n_1}} \oplus Z_{p_2^{n_2}} \oplus \dots \oplus Z_{p_k^{n_k}}$ where $|G| = p_1^{n_1} \cdot .. \cdot p_k^{n_k}$. We claim $n_1 = n_2 = \dots = n_k = 1$.&lt;/p&gt;
&lt;p&gt;Assume for contradiction some $n_i &amp;gt; 1$. Then by the theorem we can substitute $Z_{p_i^{n_i}}$ by $Z_{p_i^1} \oplus Z_{p_i^1} \oplus Z_{p_i^{n_i-2}}$. If $n_i = 2$ then just ignore the third term. It follows we have two distinct subgroups of cardinality $p_i$. In other words, two distinct subgroups of the same order of divisor $p_i$ of $|G|$. Contradiction.&lt;/p&gt;
&lt;p&gt;Therefore $G \approx Z_{p_1^1} \oplus Z_{p_2^1} \oplus \dots \oplus Z_{p_k^1}$. But all $p_i$s are coprime, So $G \approx Z_{p_1 \cdot .. \cdot p_k}$, Concluding it is cyclic.&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;31&lt;/h3&gt;
&lt;p&gt;If $a = b$ then $a^2 = b^2$. So $a$ and $b$ are distinct. Moreover $(a^2)^2 = a^4 = e$ and $(b^2)^2 = b^4 = e$. So we have distinct elements $a^2$ and $b^2$ of order 2.&lt;/p&gt;
&lt;p&gt;By the &lt;em&gt;fundamental theorem of finite abelian groups&lt;/em&gt;, All possible classes are:
\begin{aligned}
&amp;amp;Z_{16} \\
&amp;amp;Z_8 \oplus Z_2 \\
&amp;amp;Z_4 \oplus Z_4 \\
&amp;amp;Z_4 \oplus Z_2 \oplus Z_2 \\
&amp;amp;Z_2 \oplus Z_2 \oplus Z_2 \oplus Z_2
\end{aligned}&lt;/p&gt;
&lt;p&gt;$(3)$ is excluded as it has only one element of order $2$, namely $8$.&lt;/p&gt;
&lt;p&gt;$(4)$ is excluded. All orders of elements are $1,2,4,8$ and $1,2$ respectively. Elements of order $4$ in group $(4)$ can be only obtained by an element of order $4$ in $Z_8$. Otherwise the $lcm$ would be $1,2,8$. There are only two elements of order $4$ in $Z_8$, namely $2$ and $6$. So all possible elements of order $4$ in group $(4)$ are $(2,0), (6,0), (2,1), (6,1)$. But the square of any of them is $(4,0)$, Violating the given condition $a^2 \neq b^2$.&lt;/p&gt;
&lt;p&gt;$(6)$ is excluded. All orders of elements are $1,2,4$ and $1,2$ respectively. There are only two elements in $Z_8$ of order $4$, namely $1$ and $3$. So all possible elements of order $4$ in group $(4)$ are $(1,0), (3,0), (1,1), (3,1)$. But the square of any of them is $(2,0)$, Violating the given condition of $a^2 \neq b^2$.&lt;/p&gt;
&lt;p&gt;$(7)$ is excluded as all elements orders of $Z_2$ are $1,2$, So taking $lcm$ would always be $1,2$. So it has no element of order $4$.&lt;/p&gt;
&lt;p&gt;Therefore the class is group $(5)$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 12</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset12/</link>
      <pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset12/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;2&lt;/h3&gt;
&lt;p&gt;It is $6$. For any $i \in \{ 0,2,4,6,8 \}$, $6i \mod 10 = i$.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;3&lt;/h3&gt;
&lt;p&gt;It suffices to find a ring with a subgroup which in turn is not closed under multiplication. Particularly the ring of rationals $\mathbb{Q}$ and its subset $S = \{ \nfrac{x}{2} \mid x \in \mathbb{Z} \} = \{ x\ \nfrac{r}{2} \mid x \in \mathbb{Z}, y = 0,1 \}$. It is a subgroup as $\nfrac{x_0}{2} + \nfrac{x_1}{2} = \nfrac{x_0 + x_1}{2}$ where $x_0 + x_1 \in \mathbb{Z}$, and for $\nfrac{x_0}{2}$ there is $\nfrac{-x_0}{2}$ such that $\nfrac{x_0}{2} + \nfrac{-x_0}{2} = 0$. Observe $\nfrac{1}{2} \cdot \nfrac{1}{2} = \nfrac{1}{4} \notin S$, So $S$ is not closed under multiplication.&lt;/p&gt;
&lt;p&gt;P.S.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any subgroup under addition of a ring, satisfies the ring&amp;rsquo;s definition, except for being closed under multiplication.&lt;/li&gt;
&lt;li&gt;Any set $S$ closed under usual addition of integers, is also closed under usual multiplication of integers, Since $ab = \underbrace{a + a + \dots + a}_{b \text{ times}} \in S$.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;5&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Unity&amp;rsquo;s uniqueness.&lt;/strong&gt; Let $1$ and $1&amp;rsquo;$ be two unities. Then by definition $11&amp;rsquo; = 1&#39;1 = 1&amp;rsquo;$, and $1&#39;1 = 11&amp;rsquo; = 1$. So $1 = 1&amp;rsquo;$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multiplicative inverse uniqueness.&lt;/strong&gt; Fix $a_0$. Let $b_0$ and $b_1$ be two multiplicative inverses of $a_0$. Then $b_0a_0 = a_0b_0 = 1$, and $b_1a_0 = a_0b_1 = 1$. So
\begin{aligned}
a_0b_0 &amp;amp;= a_0b_1 \\
b_0(a_0b_0) &amp;amp;= b_0(a_0b_1) \\
(b_0a_0)b_0 &amp;amp;= (b_0a_0)b_1 \\
b_0 &amp;amp;= b_1
\end{aligned}&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;6&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;a.&lt;/strong&gt; For $Z_6$, $3^2 = 3$ but $3 \neq 0$ and $3 \neq 1$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b.&lt;/strong&gt; For $Z_4$, $3 \cdot 3 = 0$ but $3 \neq 0$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c.&lt;/strong&gt; For $Z_4$, $2 \cdot 1 = 2 = 2 \cdot 3$ and $2 \neq 0$ but $1 \neq 3$.&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;12&lt;/h3&gt;
&lt;p&gt;$(\rightarrow)$. By definition for some $k$,
\begin{aligned}
bk &amp;amp;= c \\
bk \cdot 1 &amp;amp;= \\
bk \cdot aa^{-1} &amp;amp;= \\
ab \cdot ka^{-1} &amp;amp;=
\end{aligned}&lt;/p&gt;
&lt;p&gt;$(\leftarrow)$. By definition for some $k$,
\begin{aligned}
ab \cdot k &amp;amp;= c \\
a \cdot bk &amp;amp;=
\end{aligned}&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;39&lt;/h3&gt;
&lt;p&gt;Consider arbitrary $ar_0a, ar_1a \in S$. Then
\begin{aligned}
ar_0a \cdot ar_1a \\
&amp;amp;= ar_0a^2r_1a \\
&amp;amp;= ar_0r_1a \in S
\end{aligned}
As $r_0r_1 \in R$. Also,
\begin{aligned}
ar_0a - ar_1a \\
&amp;amp;= a [r_0a - r_1a] \\
&amp;amp;= a \left [ (r_0 - r_1) a \right ] \\
&amp;amp;= a(r_0 - r_1)a \in S
\end{aligned}
As $r_0 - r_1 \in R$.&lt;/p&gt;
&lt;p&gt;Since $1 \in R$, $a1a \in S$ but $a1a = a^2 = 1$.&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;40&lt;/h3&gt;
&lt;p&gt;(1), (2), (3), (5), (6) of a ring&amp;rsquo;s definition in page 227 are satisfied by the usual properties of matrix algebra and integers.&lt;/p&gt;
&lt;p&gt;Note the additive identity is the matrix
\begin{bmatrix}
0 &amp;amp; 0+0 \\
0+0 &amp;amp; 0
\end{bmatrix}&lt;/p&gt;
&lt;p&gt;We show (4). For any matrix $M \in R$, where
$$
M = \begin{bmatrix} a &amp;amp; a+b \\ a+b &amp;amp; b \end{bmatrix}
$$
The matrix $-M$ defined as
$$ -M =  \begin{bmatrix} -a &amp;amp; -a+(-b) \\ -a+(-b) &amp;amp; -b \end{bmatrix}
$$
is in $M_2(Z)$, as $-a \in Z$ whenever $a \in Z$. Clearly $M - M$ is the additive identity.&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;46&lt;/h3&gt;
&lt;p&gt;$2 \in 2Z$ and $3 \in 3Z$ but $2+3 = 5 \not\in 2Z \cup 3Z$, so $2Z \cup 3Z$ is not closed under addition.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 13</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset13/</link>
      <pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset13/</guid>
      <description>&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;3&lt;/h3&gt;
&lt;p&gt;Let $R$ be a commutative ring with the cancellation property. Assume for contradiction $a$ is a zero-divisor. Then $a \neq 0$ and there&amp;rsquo;s $b \neq 0$ such that $ab = 0$. By &lt;em&gt;theorem 12.1&lt;/em&gt; (page 229) It follows:
\begin{aligned}
ab - ab &amp;amp;= 0 \\
a(b-b) &amp;amp;= 0 \\
&amp;amp;= 0 \cdot 0 \\
&amp;amp;= 0 \cdot (b-b) \\
a      &amp;amp;= 0
\end{aligned}
Contradiction.&lt;/p&gt;
&lt;h4 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;4&lt;/h4&gt;
&lt;p&gt;Zero-divisors are $2, 4, 6, 8, 10, 12, 14, 15, 16, 18, 5, 15$. To see why assume $ab \mod 20 \equiv 0 \mod 20$. Then $ab - 0 = ab = 20k$ for some $k$. $a$ must contain a common factor with $20$, as otherwise $b \geq 20$. So zero-divisors are multiples of a factor of $20$.&lt;/p&gt;
&lt;p&gt;Unities are $1, 3, 7, 9, 11, 13, 17, 19$. No proof is found.&lt;/p&gt;
&lt;p&gt;Zero-divisors and unities partition $\mathbb{Z}_{20}$.&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;9&lt;/h3&gt;
&lt;p&gt;We call $a \in Z \oplus Z \oplus Z$ &lt;em&gt;strictZero&lt;/em&gt; if some component of $a$ is $0$ like $(x, y, 0)$ but $a \neq (0,0,0)$.&lt;/p&gt;
&lt;p&gt;Clearly $a$ is a zero-divisor if and only if $a$ is a &lt;em&gt;strictZero&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For $a,b,c \in Z \oplus Z \oplus Z$, if $ab, ac, bc$ are zero-divisors then they are &lt;em&gt;strictZeros&lt;/em&gt;. If $abc$ is not a zero-divisor then it is not a &lt;em&gt;strictZero&lt;/em&gt;, in other words either $abc = (0,0,0)$, or $abc = (x, y, z)$ where $x,y,z \neq 0$. The latter case cannot happen as $ab$ is a a &lt;em&gt;strictZero&lt;/em&gt; so some component must be zero in $abc$. Therefore $abc = (0,0,0)$.&lt;/p&gt;
&lt;p&gt;Since $Z$ has no zero-divisor, it follows each component is zero in one of $a,b,c$. In other words, The $a,b,c$ we are characterizing, are &lt;em&gt;strictZeros&lt;/em&gt;, such that no component is non-zero in the three of them.&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;18&lt;/h3&gt;
&lt;p&gt;Let $R$ be an integral domain and $a^2 = a$. Then
\begin{aligned}
a^2 - a &amp;amp;= 0 \\
a(a-1) &amp;amp;= 0
\end{aligned} Since there are no zero-divisors, either $a = 0$ or $a - 1 = 0$.&lt;/p&gt;
&lt;h4 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;32&lt;/h4&gt;
&lt;p&gt;We know $R$ is a group. By usual properties of addition and multiplication, It is a commutative ring.&lt;/p&gt;
&lt;p&gt;$6$ is unity as
\begin{aligned}
6 \cdot 0 = 0 \\
6 \cdot 2 = 2 \\
6 \cdot 4 = 4 \\
6 \cdot 6 = 6 \\
6 \cdot 8 = 8
\end{aligned}&lt;/p&gt;
&lt;p&gt;Each non-zero element has a unit as
\begin{aligned}
2 \cdot 8 = 6 \\
4 \cdot 4 = 6 \\
6 \cdot 6 = 6 \\
8 \cdot 2 = 6
\end{aligned}&lt;/p&gt;
&lt;h4 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;57&lt;/h4&gt;
&lt;p&gt;Observe by distributivity of rings $x^2 -5x + 6 = (x-3)(x-2)$.&lt;/p&gt;
&lt;h4 id=&#34;a&#34; class=&#34;unnumbered&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;By the &lt;em&gt;corollary&lt;/em&gt; (page 239) $\mathbb{Z}_7$ is a field, and hence has no zero-divisors. It follows either $x-3 = 0$ or $x-2 = 0$ so $x = 3$ or $x = 2$. Exactly two solutions.&lt;/p&gt;
&lt;h4 id=&#34;b&#34; class=&#34;unnumbered&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;By computation $2$ and $3$ are the solutions.&lt;/p&gt;
&lt;p&gt;Note nothing certifies $\mathbb{Z}_8$ is an integral domain.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 14</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset14/</link>
      <pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset14/</guid>
      <description>&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;1&lt;/h3&gt;
&lt;p&gt;We use &lt;em&gt;Theorem 14.1&lt;/em&gt; (ideal test) (page 249).&lt;/p&gt;
&lt;p&gt;For $r_0 a, r_1 a \in \langle a \rangle$, We have $r_0 a - r_1 a = (r_0 - r_1) a \in \langle a \rangle$ by distributivity and $r_0 - r_1 \in R$.&lt;/p&gt;
&lt;p&gt;For $r \in R$ and $r_0 a \in \langle a \rangle$, We have $r(r_0 a) = (rr_0)a \in \langle a \rangle$ by associativity and $r r_0 \in R$. Also $(r_0 a)r = r_0(ar) = r_0(ra) = (r_0 r) a$ by associativity and commutativity and $r_0 r \in R$.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;3&lt;/h3&gt;
&lt;p&gt;The proof $I$ is ideal by &lt;em&gt;Theorem 14.1&lt;/em&gt; (ideal test) (page 249) is nearly identical to &lt;em&gt;Ex. 1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let $J$ be an arbitrary ideal that contains $a_1,a_2, \dots, a_n$. Then by definition $r a_i \in J$. Since it&amp;rsquo;s a group $r_1 a_1 + \dots + r_n a_n \in J$ for any $r_i \in R$.&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;4&lt;/h3&gt;
&lt;p&gt;By the &lt;em&gt;subring test&lt;/em&gt; (page 230), $S = \{ (x,x) \mid x \in Z \}$ is a subring as $(x,x) - (y,y) = (x-y, x-y) \in S$ and $(x,x) (y,y) = (xy,xy) \in S$.&lt;/p&gt;
&lt;p&gt;$S$ is not an ideal as $(1,1) \in S$ and $(1,2) \in \mathbb{Z} \oplus \mathbb{Z}$ but $(1,2) (1,1) = (1,2) \notin S$. In other words, $(1,1)$ did not absorb $(1,2)$.&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;5&lt;/h3&gt;
&lt;p&gt;We use &lt;em&gt;Theorem 12.3&lt;/em&gt; (subring test) (page 230). $(a+bi) - (a&amp;rsquo;+b&amp;rsquo;i) = (a-a&amp;rsquo;) + (b-b&amp;rsquo;)i \in S$ as $b-b&amp;rsquo;$ is even. $(a+bi) (a&amp;rsquo;+b&amp;rsquo;i) = (aa&amp;rsquo; - bb&amp;rsquo;) + (ab&amp;rsquo; + a&amp;rsquo;b)i \in S$ as $ab&amp;rsquo; + a&amp;rsquo;b$ is even.&lt;/p&gt;
&lt;p&gt;$1 + 2i \in S$ and $1 + 1i \in Z[i]$ but $(1 + 1i)(1 + 2i) = -1 + 3i \not\in S$ as $3$ is not even. A counter-example of $S$ being an ideal.&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;11&lt;/h3&gt;
&lt;h4 id=&#34;a&#34; class=&#34;unnumbered&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;$\langle a \rangle = \langle 1 \rangle = \mathbb{Z}$. We know $GCD(2,3) = 1$ so by &lt;em&gt;Theorem 0.2&lt;/em&gt; (GCD is a linear combination) (page), there are $x, y \in \mathbb{Z}$ such that $2x + 3y = 1$. So for any integer $m$, $2(xm) + 3(ym) = m$. In other words, $\mathbb{Z} = \langle 1 \rangle \subset \langle 2 \rangle + \langle 3 \rangle$.&lt;/p&gt;
&lt;h4 id=&#34;b&#34; class=&#34;unnumbered&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;$\langle a \rangle = \langle 2 \rangle$. Trivially $\langle 6 \rangle + \langle 8 \rangle \subset \langle 2 \rangle$ as $2$ is a common divisor of $6$ and $8$. Observe $8(1) + 6(-1) = 2$. So for any multiple $2m$, We have $8(m) + 6(-m) = 2m$, concluding $\langle 2 \rangle \subset \langle 8 \rangle + \langle 6 \rangle$.&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;15&lt;/h3&gt;
&lt;p&gt;By definition $A \subset R$ and $r = r1 \in A$ for any $r \in R$.&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;32&lt;/h3&gt;
&lt;p&gt;Let $B$ be an arbitrary ideal of $\mathbb{Z} \oplus \mathbb{Z}$ such that $A \subset B \subset \mathbb{Z} \oplus \mathbb{Z}$. Assume $B$ properly contains $A$ then we show $B = \mathbb{Z} \oplus \mathbb{Z}$.&lt;/p&gt;
&lt;p&gt;By hypothesis we have $(a,b) \in B$ but not in $A$. So $a = 3q + r$ whereby either $r = 1$ or $r = 2$. Consider each case:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$r = 1$. Since $A \subset B$, $( 3(-q), -(b-1)) \in B$. As $B$ is a group, $(3(-q), -(b-1)) + (3q+1, b) = (1,1) \in B$.&lt;/li&gt;
&lt;li&gt;$r = 2$. Similarly $(3(q+1), b+1) \in B$ and $(3(q+1), b+1) - (3q+2, b) = (1, 1) \in B$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By &lt;em&gt;Ex. 15&lt;/em&gt; $B = \mathbb{Z} \oplus \mathbb{Z}$.&lt;/p&gt;
&lt;p&gt;Had $A$ been $\{ (4x, y) \mid x,y \in \mathbb{Z} \}$ then the property of it being a maximal ideal fails as the ideal $\{ (2x, y) \}$ is strictly larger.&lt;/p&gt;
&lt;p&gt;Generally, $\{ (rx,y) \}$ is a maximal ideal if and only if $r$ is a prime. If $r$ is composite then any divisor generates a larger ideal. If $r$ is prime then for any $m$ where $0 &amp;lt; m &amp;lt; r$, $gcd(r, m) = 1$. It follows by &lt;em&gt;Theorem 0.2&lt;/em&gt; (GCD is a linear combination) (page 4) there is a linear combination $xr + ym = 1$.&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;37&lt;/h3&gt;
&lt;p&gt;If $(x,y), (a,b) \in \mathbb{Z} \oplus \mathbb{Z}$ and $(x,y)(a,b) = (xa,yb) \in I$ then by definition $yb = 0$. So either $y = 0$ or $b = 0$. In other words, either $(x,y) \in I$ or $(a,b) \in I$.&lt;/p&gt;
&lt;p&gt;The set $\{ (x,2y) \mid x,y \in Z \}$ is an ideal and properly contains $I$. So $I$ is not maximal.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lab 09</title>
      <link>https://mostafatouny.github.io/msa-levitin-post/lab09/</link>
      <pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/msa-levitin-post/lab09/</guid>
      <description>&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;9.1.1&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Hints.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use quotient and mod operations.&lt;/li&gt;
&lt;li&gt;Observe why the quotient yields the maximum possible count of some coin.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      # input: non negative amount n, and a decreasing array of coins D
      # output: array C where C[i] is number of coins of ith denomination D[i]
      def greedyCoins(integer n, D[1..m])
        # for each coin
        for i in 1..m

            # take max possible number of it
            C[i] = floor( n/D[i] )

            # remaining amount for next iteration
            n = n \mod D[i]
        
        # if there is still a remaining amount
        if n != 0 return &amp;quot;no solution&amp;quot;

        # otherwise given n is partitioned by coins
        return C
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;9.1.15&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;9.2.3&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Hints.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Observe &lt;code&gt;Kruskal&lt;/code&gt; works with global edges, unlike &lt;code&gt;Prim&lt;/code&gt; which searches within local neighbour edges.&lt;/li&gt;
&lt;li&gt;What is error you think we will encounter upon running &lt;code&gt;Kruskal&lt;/code&gt; on a a tree with more than one component?&lt;/li&gt;
&lt;li&gt;Why does looping on $|V| - 1$ works in &lt;code&gt;Kruskal&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;Modify the &lt;code&gt;while&lt;/code&gt; condition to accommodate any forest.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Modify the &lt;code&gt;while&lt;/code&gt; condition in &lt;code&gt;Kruskal&lt;/code&gt; to be &lt;code&gt;ecounter &amp;lt; |E|&lt;/code&gt;, So it terminates if there are no more edges.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bonus.&lt;/em&gt; Modify &lt;code&gt;Prim&lt;/code&gt; then use it as a subroutine to solve the general forest case.&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;9.2.5&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;9.3.1&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Hints.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(c) Use &lt;em&gt;Transform-and-conquer&lt;/em&gt; strategy.&lt;/li&gt;
&lt;li&gt;(c) Fixing vertices, What kind of modification is required on edges?&lt;/li&gt;
&lt;li&gt;(d) Use &lt;em&gt;Transform-and-conquer&lt;/em&gt; strategy.&lt;/li&gt;
&lt;li&gt;(d) We will use &lt;em&gt;Dijkstra&lt;/em&gt; as a subroutine, So the graph will be transformed to the usual form given in the book.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(a)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A data structure which considers directed edges.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(b)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Same algorithm. You may terminate once you find the destination.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(d)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each vertex $v_i$ is mapped to $v_i^{st}$ and $v_i^{en}$, with directed edge $( v_i^{st}, v_i^{en} )$ whose weight is the number labeled on $v_i$. Any vertex in $G$ neighbour to $v_i$, can travel to $v_i^{st}$ but not $v_i^{en}$ in $G&amp;rsquo;$. Only vertices $v_i^{en}$ but not $v_i^{st}$ can travel to other vertices. Those edges in $G&amp;rsquo;$ are assigned zero weights.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        # input: graph G with weighted vertices
        # output: graph G with weighted edges and no weighted vertices
        def vertexWeightToEdgeWeight(G)

            construct empty graph G&#39;

            for each vertex v in G(V)
                add vertex v_st to G&#39;
                add vertex v_en to G&#39;
                set (v_st, v_en).weight to v.weight
                add edge (v_st, v_en) to G&#39;
            
            for each edge e = {a,b} in G(E)
                set (a_en, b_st).weight = 0
                add edge (a_en, b_st) to G&#39;
                set (b_en, a_st).weight = 0
                add edge (b_en, a_st) to G&#39;

            return G&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;(c)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Set the destination as source then reverse paths. If graph is directed reverse paths before running the algorithm also.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        # input: graph G
        # output: same graph but whose edges are reversed
        def reverseEdges(G)
            construct empty graph G&#39;
            clone vertices G&#39;(V) = G(V)

            for every vertex v in G(V)
                for every edge e = (v,t) in G(E)
                    add edge (t,v) to G&#39;

            return G&#39;

        # input: undirected graph G, destination d
        # output: shortest-paths of given d
        def undirectedGraphSingleDistination(G, d)
            compute Dijkstra(G, d) in graph G
            return reverseEdges(G)
        
        # input: directed graph G, destination d
        # output: shortest-paths of given d
        def directedGraphSingleDestination(G, d)
            G = reverseEdges(G)
            compute Dijkstra(G, d) in graph G
            return reverseEdges(G)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A data-structure based implementation is left to students. In fact this is an excellent illustration of abstraction in algorithm design.&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;9.3.7&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;9.4.5&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;9.4.7&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Hints.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A basic recursive algorithm traversal works.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        def allHuffmanCodes(root)
            if root is NULL
                return [ ]
            
            # if root is a leaf
            if root.rightChild is NULL and root.leftChild is NULL
                return [ root.character ]

            # if exactly one child is NULL, Concatenating an empty list does no harm
            childCodes = allHuffmanCodes(root.leftChild) + allHuffmanCodes(root.rightChild)

            # prefix each code in child with root&#39;s character
            return [ root.character + code for code in childCodes ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We leave it to students to modify the algorithm so that it generates a 2d-array of symbols-codes as a &lt;strong&gt;homework.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 01</title>
      <link>https://mostafatouny.github.io/harvey-rand-post/pset01/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/harvey-rand-post/pset01/</guid>
      <description>&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex.-1&#34; class=&#34;unnumbered&#34;&gt;Ex. 1&lt;/h3&gt;
&lt;h4 id=&#34;part-i&#34; class=&#34;unnumbered&#34;&gt;Part I&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;    def randElement(A[1..n])
      X = random( [n] )
      return A[X]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the probability space is uniform, For event $M = { \frac{\displaystyle{n}}{\displaystyle{4}}+1, \dots, \frac{\displaystyle{3}}{\displaystyle{4}}n }$, $Pr[M] = \frac{\displaystyle{1}}{\displaystyle{n}} \cdot |M| = \frac{\displaystyle{1}}{\displaystyle{n}} \cdot \frac{\displaystyle{n}}{\displaystyle{2}} = \frac{\displaystyle{1}}{\displaystyle{2}}$.&lt;/p&gt;
&lt;h4 id=&#34;part-ii&#34; class=&#34;unnumbered&#34;&gt;Part II&lt;/h4&gt;
&lt;p&gt;Additionally we certify if the randomly generated element is in middle half.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def randElement2(A[1..n])
      # Select a random element of A
      k = randElement(A)

      # Certify whether it is in middle half

      # count values less and greater
      countLess = countGreater = 0
      for i in 1..n:
        if A[i] &amp;lt; k
          countLess = countLess + 1
        else if A[i] &amp;gt; k
          countGreater = countGreater + 1

      # check if k is between first and forth quarters
      if (countLess &amp;gt;= n/4) and (countGreater &amp;gt;= n/4)
        return k
      return FAIL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let $R$ be the algorithm&amp;rsquo;s output. $R = FAIL$ if and only if $\neg M$. So $Pr[R=FAIL] = Pr[\neg M] = 1 - Pr[M] = 1 - \frac{\displaystyle{1}}{\displaystyle{2}} = \frac{\displaystyle{1}}{\displaystyle{2}}$.&lt;/p&gt;
&lt;h4 id=&#34;part-iii&#34; class=&#34;unnumbered&#34;&gt;Part III&lt;/h4&gt;
&lt;p&gt;We repeat until the probability is upperbounded by $0.01$.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def randElement3(A[1..n])
      # repeat 7 times
      for i in 1..7
        # generate a random element
        out = randElement2(A[1..n])

        # if the number is certified to be correct return it
        if out != FAIL
          return out
      
      # if 7 trials failed
      return FAIL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Setting $0.5^{x} = 0.01$ we get $x = \log_{1/2} 0.01 = \frac{\displaystyle{\log_2 100^{-1} }}{\displaystyle{\log_2 2^{-1} }} = \frac{\displaystyle{(-1) \log_2 100}}{\displaystyle{(-1) \log_2 2}} = \log_2 100 \leq \log_2 128 = \log_2 2^7 = 7$&lt;/p&gt;
&lt;p&gt;Let $R$ be the algorithm&amp;rsquo;s output, and let $R_i$ be the output of subroutine &lt;em&gt;randElement2&lt;/em&gt; in iteration $i$. Then $R = FAIL$ if and only if $R_1 = FAIL \wedge \dots \wedge R_7 = FAIL$. We know $Pr[R_i = FAIL] = \frac{\displaystyle{1}}{\displaystyle{2}}$ and $R_i$ are pairwise independent. We conclude $Pr[R = FAIL] = Pr[ R_1 = FAIL \wedge R_2 = FAIL \wedge \dots \wedge R_7 = FAIL] = \left ( \frac{\displaystyle{1}}{\displaystyle{2}} \right )^7 \leq 0.01$.&lt;/p&gt;
&lt;h3 id=&#34;ex.-2&#34; class=&#34;unnumbered&#34;&gt;Ex. 2&lt;/h3&gt;
&lt;h4 id=&#34;part-i-1&#34; class=&#34;unnumbered&#34;&gt;Part I&lt;/h4&gt;
&lt;p&gt;Trivial.&lt;/p&gt;
&lt;h4 id=&#34;part-ii-1&#34; class=&#34;unnumbered&#34;&gt;Part II&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Hint.&lt;/strong&gt; By Dr. I. El-Shaarawy, Not to skip &lt;em&gt;Part I&lt;/em&gt;, and to observe the pattern in the following example. It signals the answer is $2^k$ if $x = 0$ and $2^{k-1}$ otherwise.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Binary Number&lt;/strong&gt; &amp;mdash; &lt;strong&gt;Count of Even Parity&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;      000                     8              
      001                     4              
      010                     4              
      011                     4              
      100                     4              
      101                     4              
      110                     4              
      111                     4              
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Lemma 1.&lt;/strong&gt; The zero $0 = \underbrace{00 \dots 0}_{k \text{ times}}$ counts $2^k$ numbers of even parity.&lt;/p&gt;
&lt;p&gt;Trivially, $BitwiseAnd(0,x) = 0$ for any binary number $x \in [2^k]$, and $Parity(0) = 0$.&lt;/p&gt;
&lt;p&gt;Now we can focus on $x \neq 0$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition 2.&lt;/strong&gt; Given $x$ denote indices of 1-bits by &lt;em&gt;1-bits-indices&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma 3.&lt;/strong&gt; &lt;em&gt;1-bits-indices&lt;/em&gt; decide the parity.&lt;/p&gt;
&lt;p&gt;Observe for any $r \in [2^k]$.
$$
BitwiseAnd(x_i,r_i) =
\begin{cases}
0 &amp;amp; \text{if } x_i = 0 \\
r_i &amp;amp; \text{if } x_i = 1
\end{cases}
$$
So we can restrict our focus only on &lt;em&gt;1-bits-indices&lt;/em&gt; to compute the parity. In other words
$$
Parity(BitwiseAnd(x,r)) =
\begin{cases}
0 &amp;amp; \text{if $r$ has even 1 bits in } \textit{1-bits-indices} \\
1 &amp;amp; \text{if $r$ has odd 1 bits in } \textit{1-bits-indices}
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma 4.&lt;/strong&gt; The number of &lt;em&gt;k-length&lt;/em&gt; strings containing even number of 1 bits in &lt;em&gt;1-bit-indices&lt;/em&gt; is $2^{k-1}$.&lt;/p&gt;
&lt;p&gt;Define a bijection
$$
f: \{ \text{strings of even 1-bits in } \textit{1-bits-indices} \} \rightarrow \{ \text{strings of odd 1-bits in } \textit{1-bits-indices} \}
$$
Mapping a binary string to the same string but with last bit in &lt;em&gt;1-bit-indices&lt;/em&gt; flipped. If that bit is $s_m$, Then $f(s_1s_2 \dots s_k) = s_1 s_2 \dots \overline{s_{m}} \dots s_{k-1} s_k$. It follows domain and range have the same cardinality, and since they partition the set of &lt;em&gt;k-length&lt;/em&gt; strings, the result follows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem 5.&lt;/strong&gt; Fixing any binary $x \neq 0$, Among all $r \in [2^k]$, Exactly half of them yield even parity, i.e $Parity( BitwiseAnd(x,r) ) = 0$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollay 6.&lt;/strong&gt; Given $x \in [2^k]$, The number of zeros in the vector mentioned in question is
$$
\begin{cases}
2^k &amp;amp; \text{if } x = 0 \\
2^{k-1} &amp;amp; \text{if } x \neq 0
\end{cases}
$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 02</title>
      <link>https://mostafatouny.github.io/harvey-rand-post/pset02/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/harvey-rand-post/pset02/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex.-1&#34; class=&#34;unnumbered&#34;&gt;Ex. 1&lt;/h3&gt;
&lt;h4 id=&#34;part-i&#34; class=&#34;unnumbered&#34;&gt;Part I&lt;/h4&gt;
&lt;p&gt;Take $m = n-1$, and let $R$ be the algorithm&amp;rsquo;s output. $R = 0$ if and only if $RNG()$ returned $0$ or $n-1$. So $Pr[R = 0] = 2/n$ and $Pr[R = i] = 1/n$ for $i \neq 0$.&lt;/p&gt;
&lt;h4 id=&#34;part-ii&#34; class=&#34;unnumbered&#34;&gt;Part II&lt;/h4&gt;
&lt;p&gt;Define $k = \lfloor n/m \rfloor$, So $k$ is the greatest integer such that $mk \leq n$. Define $r = n \mod mk$, so $n = mk + r$ where $0 \leq r &amp;lt; m$.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def goodSampler(m)
      k = floor( n/m )

      do
        r = RNG()
      while r &amp;gt;= mk

      return r mod m
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Uniformity&lt;/strong&gt;. Assume the algorithm terminates. So we are given $r &amp;lt; mk$ and we want to prove $Pr[r \mod m = i \mid r &amp;lt; mk] = \nfrac{1}{m}$ for $i \in [m]$. Observe
\begin{aligned}
Pr[r \mod m = i \mid r &amp;lt; mk] &amp;amp;= \nfrac{Pr[r \mod m = i \cap r &amp;lt; mk]}{Pr[r &amp;lt; mk]} \\
&amp;amp;= \nfrac{k/n}{mk/n} = \nfrac{k}{n} \cdot \nfrac{n}{mk} = \nfrac{1}{m}
\end{aligned}
Recall by uniformity the probability is basically the number of outcomes satisfying the event over all possible outcomes. Clearly the $k$ outcomes of $r$ yielding $i$ by the algorithm are $(0)m + i, (1)m + i, (2)m + i, \dots, (k-1)m + (i)$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time Complexity&lt;/strong&gt;. For an iteration of &lt;code&gt;do-while&lt;/code&gt;, probability of termination is $mk/n$. So in expectation it takes $n/mk$ trials until it terminates. It follows
$$
1 \leq \nfrac{n}{mk} = 1 + \nfrac{r}{mk} &amp;lt; 1 + \nfrac{m}{mk} = 1 + \nfrac{1}{k} \leq 2.
$$
Concluding its time is $\mathcal{O}(1)$.&lt;/p&gt;
&lt;h3 id=&#34;ex.-2&#34; class=&#34;unnumbered&#34;&gt;Ex. 2&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Distribution&lt;/strong&gt;. see &lt;em&gt;ex-2.2&lt;/em&gt; notebook.&lt;/p&gt;
&lt;p&gt;The distribution of the given psuedo-code seems uniform.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-2.2_0.png&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The distribution but with modifying the probability to be hardcoded &lt;code&gt;p = 0.7&lt;/code&gt; rather than &lt;code&gt;p = ContinuousUniform()&lt;/code&gt; in line 2, seems normal.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-2.2_1.png&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Recall we know in expectation we will get 7 1-bits out of 10 by linearity of random variables.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remark&lt;/strong&gt;. $X = \sum X_i^n$ is equivalent to number of $1$s tossed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma&lt;/strong&gt;. Probability of tossing $k$ $1s$.&lt;/p&gt;
&lt;p&gt;For some fixed probability of getting 1 $p$, and number of coin tosses $n$, The probability of drawing $k$ $1s$ is $Pr[X = k] = (p)^k (1-p)^{n-k} \dbinom{n}{k}$, Since the distribution of coin tossing is binomial.&lt;/p&gt;
&lt;h3 id=&#34;ex.-3&#34; class=&#34;unnumbered&#34;&gt;Ex. 3&lt;/h3&gt;
&lt;h4 id=&#34;part-i-1&#34; class=&#34;unnumbered&#34;&gt;Part I&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Algorithm.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # input: Probabilities P[i]
    # output: category sampled
    def categoricalSampler( P[1..k] )

      # initially the universe is all probabilities
      totalProb = sum( P[1..k] )

      # for each ith probability
      for i in 1..k

        # compute P[i] probability in ratio to the universe
        i_prob_uni = (1/totalProb) * P[i]

        # return i by that probability
        if biasedBit( i_prob_uni )
          return i

        # remove P[i] from the universe
        totalProb -= P[i]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Correctness.&lt;/strong&gt; Computing a probability out of a subset of probabilities.&lt;/p&gt;
&lt;p&gt;We want to compute a probability but in ratio to some subset of probabilities.&lt;/p&gt;
&lt;p&gt;For example if $Pr[X = i] = 1/4$ for $i \in { 1,2,3,4 }$, But we are given $X \not\in {1, 2}$. Then $Pr[X = 3 \mid X \not\in {1,2}] = \nfrac{Pr[X = 3 \cap X \not\in {1,2}]}{Pr[X \not\in {1,2}]} = \nfrac{1/4}{1/2} = 2 \cdot \nfrac{1}{4}$.&lt;/p&gt;
&lt;p&gt;Generally we want to find $x$ where, For sum $S$ of some subset of probabilities, $\nfrac{Pr[X = i]}{S} = \nfrac{x}{1}$, so $x = \nfrac{1}{S} \cdot Pr[X=i]$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Correctness.&lt;/strong&gt; &lt;code&gt;categoricalSampler&lt;/code&gt; returns a category.&lt;/p&gt;
&lt;p&gt;If the algorithm reached iteration $k$, &lt;code&gt;i_prob_uni&lt;/code&gt; would be $1$ so &lt;code&gt;biasedBit&lt;/code&gt; surely fires.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time Complexity.&lt;/strong&gt; Clearly $\mathcal{O}(k)$.&lt;/p&gt;
&lt;h4 id=&#34;part-ii-1&#34; class=&#34;unnumbered&#34;&gt;Part II&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Algorithm&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # input: probabilities P[i]
    # output: cumulative sum of probabilities S[i]
    def cumulativeSum( P[1..k] )
        
        # S[i] is sum up to P[i]
        S = []

        sum = 0

        # compute &amp;amp; append S[i]
        for i in 1..k
            
            # cumulative sum up to P[i]
            sum += P[i]
            
            # append as S[i]
            S.append( sum )

        return S

    # input: probabilities P[i], and cumulative probabilities S[i]
    # output: sampled category i
    def recursiveSampler( P[l..r], S[l..r] )
        # base case. universe is one category so its probability is 1
        if l = r
            return l

        # center index
        mid = floor( (r-l)/2 )

        # total probability of P[l..r]
        totalProb = S[r] - S[l] + P[l]

        # probability of cumulative half of P in ratio to the universe
        prob_uni = (1/totalProb) * S[mid]

        # toss a coin by cumulative probability of half of P
        if biasedBit( prob_uni )

            # if True then the sample is restricted to them
            return recursiveSampler( P[l..mid], S[l..mid] )
        else
            
            # if False then the sample is not any of them
            return recursiveSampler( P[mid+1..r], S[mid+1..r] )

    # input: probabilities P[i]
    # output: sampled category i
    def categoricalSampler2( P[1..k] )
        
        # preprocessing, computing cumulative sum of probabilities
        S = cumulativeSum( P[1..k] )

        # sample a category
        return recursiveSampler( P, S )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Correctness.&lt;/strong&gt; &lt;code&gt;recursiveSampler&lt;/code&gt; won&amp;rsquo;t ever reach array &lt;code&gt;P&lt;/code&gt; of size zero.&lt;/p&gt;
&lt;p&gt;That can only happen if either &lt;code&gt;mid = r&lt;/code&gt; or &lt;code&gt;mid = l&lt;/code&gt;, but then &lt;code&gt;S[mid] = 1&lt;/code&gt; or &lt;code&gt;S[mid] = 0&lt;/code&gt; respectively. Contradiction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Correctness.&lt;/strong&gt; The algorithm samples category $i$ with probability $P[i]$.&lt;/p&gt;
&lt;p&gt;The remarks from &lt;em&gt;Part I&lt;/em&gt; holds here. We show a more formal proof.&lt;/p&gt;
&lt;p&gt;Let $X = z$ denote the event of sampling category $z$. Let $j_1, j_2, \dots, j_{k-1}$ be the remaining categories. Then $Pr[X = z] = Pr[X \neq j_1 \cap X \neq j_2 \cap \dots \cap X \neq j_{k-1}]$. Partition $j$s on subsets of outcomes $O_1, O_2, \dots, O_{\log k}$.
\begin{aligned}
Pr[X = z] &amp;amp;= Pr[X \notin O_1 \cap X \notin O_2 \cap \dots \cap X \notin O_{\log k}] \\
&amp;amp;= Pr[X \notin O_1 \mid X \notin O_2 \cap \dots \cap X \notin O_{\log k}] \\ &amp;amp;\cdot Pr[X \notin O_2 \mid X \notin O_{3} \dots \cap X \notin O_{\log k}] \cdot .. \cdot Pr[X \notin O_{\log k}]
\end{aligned}&lt;/p&gt;
&lt;p&gt;Let $R$ be the algorithm&amp;rsquo;s output, and let $R_i$ correspond to &lt;code&gt;biasedBit&lt;/code&gt; in iteration $i$. Clearly $Pr[R \in {l, l+1, \dots, mid}] = Pr[R_i = True]$ and $Pr[R \in {mid+1, mid+2, \dots, r}] = Pr[R_i = False]$. The algorithm samples $z$ if and only if $R_1 = x_1 \cap R_2 = x_2 \cap \dots \cap R_{\log k} = x_{\log k}$ corresponding to $x_i = True$ if $z \notin {mid+1, \dots, r} = O_i$. In other words the algorithm satisfies the definition of $Pr[X = z]$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time Complexity&lt;/strong&gt;. Clearly &lt;code&gt;cumulativeSum&lt;/code&gt; takes $\mathcal{O}(k)$ and &lt;code&gt;recursiveSampler&lt;/code&gt; takes $\mathcal{O}(\log k)$.&lt;/p&gt;
&lt;h3 id=&#34;ex.-4&#34; class=&#34;unnumbered&#34;&gt;Ex. 4&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Idea.&lt;/strong&gt; See the following sketch for an intuition.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-4_0.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compute cumulative sums $q_i$.&lt;/li&gt;
&lt;li&gt;Construct k intervals, each of size $1/k$.&lt;/li&gt;
&lt;li&gt;If some $q_i$ is sandwiched in some interval, separate that interval to two pieces.&lt;/li&gt;
&lt;li&gt;Accordingly label pieces which $p_i$ they belong to.&lt;/li&gt;
&lt;li&gt;Sample a &lt;code&gt;UniformLBitInteger&lt;/code&gt; to select a uniformly random interval out of those k intervals.&lt;/li&gt;
&lt;li&gt;If it is separated, Toss a coin by &lt;code&gt;BiasedBit&lt;/code&gt; to decide a piece.&lt;/li&gt;
&lt;li&gt;Output the piece&amp;rsquo;s label.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Algorithm.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # input: probabilities P[i]
    # output: cumulative sum of probabilities S[i]
    def cumulativeSum( P[1..k] )
        S = []
        sum = 0
        
        for i in 1..k
            sum += P[i]
            S.append(sum)
        
        return S


    # input: integer k
    # output: k-intervals of size 1/k each
    def kIntervalsConstruction( k )

        # start, end, and separation points, decides a pair of intervals
        # end - start = 1/k
        intervals = [
            [st, end, sep, label]
        ]

        # construct the k intervals
        for i in 1..k
            
            # length of interval is 1/k
            intervals.append(
                [ (i-1)/k, i/k, NULL, NULL ]
            )

        return intervals


    # input: 2d-array of k-intervals, and the cumulative sum S
    # output: None. It modifies the 2d-array to be filled with separators and labels
    def sepPointsFromArray( Inter[1..k, 4], S[1..k] )
        
        # pointer for S
        S_poi = 1

        # for each kth interval
        for i in 1..k

            # if S[S_poi] is contained in the kth interval
            if Inter[i][st] &amp;lt;= S[ S_poi ] &amp;lt;= Inter[i][en]
                
                # set S[S_poi] as the separator
                Inter[i][sep] = S[ S_poi ]

                # consider next index
                S_poi += 1

            # otherwise, leave the separator with NULL

            # in either cases cache S_poi
            # latter case. whole interval is labeled by S_poi
            # former case. first piece is labeled by S_poi and
            #   second piece is labeled by S_poi+1
            Inter[i][label] = S_poi


    # input: k-probabilities P[i]
    # output: k intervals, each of size 1/k, possibly separated to have pairs
    def intervalToPieces( P[1..k] )
        
        # S[i] is cumulative sum up to P[i]
        S = cumulativeSum( P )

        # construct k-intervals of size 1/k each
        intervals = kIntervalsConstruction( k )

        # in-place fill &amp;quot;sep&amp;quot; and &amp;quot;label&amp;quot; cells in intervals
        sepPointsFromArray(intervals, S)

        return intervals


    # input: Probabilities P[i]
    # output: sampled category i
    def sample( P[1..k] )

        # preprocessing is not needed to be called for every sample call
        intervals = intervalToPieces( P )

        # uniform random index of intervals
        randIndex = uniformLBitInteger(lg k)

        # uniform random interval from intervals
        randInterval = intervals[ randIndex ]

        # if it has no separator
        if randInterval[sep] = NULL
            
            # then it belongs to cached label
            return randInterval[label]
        else

        # it has a separator
            
            # compute proportion of separator in ratio to the interval of size 1/k
            prop = (randInterval[sep] - randInterval[st]) / (1/k)

            # toss a coin by a probability proportional to the separator
            if biasedBit(prop)
                
                # if it lands before the separator then we are in a piece labeled by &amp;quot;cached label&amp;quot;
                return randInterval[label]
            else

                # if it lands after the separator then we are in the piece next to one labeled by &amp;quot;cached label&amp;quot;
                return randInterval[label] + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Correctness.&lt;/strong&gt; No probabilistic claim is outside what we proved and illustrated in previous exercises.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time Complexity.&lt;/strong&gt; Preprocessing consumes $O(k)$, Since all its subroutines take $O(k)$ each. Sampling consumes $O(1)$ since both &lt;code&gt;uniformLBitInteger&lt;/code&gt; and &lt;code&gt;biasedBit&lt;/code&gt; consume $O(1)$.&lt;/p&gt;
&lt;h3 id=&#34;ex.-5&#34; class=&#34;unnumbered&#34;&gt;Ex. 5&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Postponed.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;ex.-6&#34; class=&#34;unnumbered&#34;&gt;Ex. 6&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note.&lt;/strong&gt; It feels weird we derived a solution better than the requested bound.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Algorithm&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def uniformPrime(n)
        do
            # keep sampling uniform numbers in {1, .., 20n}
            rand = uniformRandom(20n)

        # as long as the sampled is not prime
        while not isPrime(rand)

        # only if we found a prime, we return it
        return rand
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Correctness.&lt;/strong&gt; We used the technique of &lt;em&gt;Rejection Sampling&lt;/em&gt; which guarantees the prime number output is uniform. The proof idea is very similar to our previous probability proofs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Analysis.&lt;/strong&gt; From &lt;em&gt;Fact A.2.12&lt;/em&gt; (page 226), There are at least $n/\ln n$ primes in $P_n$. So the probability of a successful trial is at least $n/\ln n$. Then the number of trials is at most $\ln n/n$ in expectation by &lt;em&gt;Fact A.3.20&lt;/em&gt; (page 233). Observe $\ln n / n \leq \log n / n$. Since we are given &lt;code&gt;isPrime&lt;/code&gt; is $\mathcal{O}(\log^7 n)$, The whole algorithm &lt;code&gt;uniformPrime&lt;/code&gt; takes at most $\mathcal{O}(\log^8 / n) \subset \mathcal{O}(\log^{10} n)$.&lt;/p&gt;
&lt;h3 id=&#34;ex.-7&#34; class=&#34;unnumbered&#34;&gt;Ex. 7&lt;/h3&gt;
&lt;h4 id=&#34;part-i-2&#34; class=&#34;unnumbered&#34;&gt;Part I&lt;/h4&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-2.7_0.png&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The probability of sampling from $R$ is $\nfrac{\textit{disk-area}}{\textit{square-area}} = \nfrac{\pi(1)^2}{2*2} \approx \nfrac{22}{7} \cdot \nfrac{1}{4} = \nfrac{22}{28}$.&lt;/p&gt;
&lt;p&gt;It follows the number of iterations is at most $\nfrac{28}{22} = 1 + \nfrac{3}{11} \leq 2$.&lt;/p&gt;
&lt;h4 id=&#34;part-ii-2&#34; class=&#34;unnumbered&#34;&gt;Part II&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Partially Solved.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Seemingly we just need to compute volumes of both $S$ and $R$ but in $20th$ dimension, and follow exactly the same recipe of &lt;em&gt;Part I&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 07</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset07/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset07/</guid>
      <description>&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;1&lt;/h3&gt;
&lt;p&gt;Those are $\{ a \langle 3 \rangle \mid a\in \mathcal{Z} \} = \big \{ \{ a \pm 0, a \pm 3, a \pm 6, \dots \} \mid a \in \mathcal{Z} \big \}$.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;7&lt;/h3&gt;
&lt;p&gt;Observe $\langle a^4 \rangle = { 1, a^{4(1)}, a^{4(2)}, \dots, a^{4(14)} }$. Then $\lvert \langle a^4 \rangle \rvert = 15$. It follows by &lt;em&gt;theorem 7.1&lt;/em&gt; (page 142), The number of distinct left cosets is $30/15 = 2$.&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;9&lt;/h3&gt;
&lt;p&gt;Lazy to compute and typeset all left cosets.&lt;/p&gt;
&lt;p&gt;$H$ is a subgroup. Then by &lt;em&gt;theorem 7.1&lt;/em&gt; (page 142), the number of left cosets of $H$ in $S_4$ is $4!/4 = 3! = 6$.&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;10&lt;/h3&gt;
&lt;p&gt;Assume for contradiction $aH \cap bH = \phi$. Since we are given $aH = bK$, It follows $bK \cap bH = \phi$, Concluding $H \cap K = \phi$. Contradiction as the identity element $e \in G$ is common in both subgroups. Therefore $aH \cap bH \neq \phi$.&lt;/p&gt;
&lt;p&gt;From &lt;em&gt;Lemma&lt;/em&gt; (page 139), We get $aH = bH$. Then $bK = bH$ as we are given $aH = bK$. It follows $K = H$.&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;17&lt;/h3&gt;
&lt;p&gt;Let $H$ be a proper subgroup of $G$. If $\lvert H \rvert = 1$, Then $H = { e } = \langle e \rangle$. it is cyclic. Now assume $\lvert H \rvert &amp;gt; 1$. Then by &lt;em&gt;theorem 7.1&lt;/em&gt; (page 143), and without the loss of generality, $\lvert H \rvert = p$ for a prime $p$. By &lt;em&gt;corollary 3&lt;/em&gt;, $H$ is cyclic.&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;19&lt;/h3&gt;
&lt;p&gt;$5^{16} \mod 7 = 6$ and $7^{13} \mod 11 = 2$, Using the fact $ab \mod m = (a \mod m) (b \mod m) \mod m$.&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;22&lt;/h3&gt;
&lt;p&gt;Let $H$ and $K$ be finite subgroups of a group $G$, Where $\lvert H \rvert$ and $\lvert K \rvert$ are coprime. Since $H \cap K$ is a subgroup of both $H$ and $K$, By &lt;em&gt;theorem 7.1&lt;/em&gt; (page 142), $\lvert H \cap K \rvert = 1$. Then $H \cap K = {e}$, where $e$ is the identity of $G$.&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;38&lt;/h3&gt;
&lt;h3 id=&#34;section-8&#34; class=&#34;unnumbered&#34;&gt;39&lt;/h3&gt;
&lt;p&gt;We know all common divisors among $24$ and $20$ are $1,2,4$. By &lt;em&gt;theorem 7.1&lt;/em&gt; (page 142), It follows $\lvert H \cap K \rvert = 1, 2,$ or $4$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case.&lt;/strong&gt; $\lvert H \cap K \rvert = 1$. Then it is the trivial group of only the identity element.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case.&lt;/strong&gt; $\lvert H \cap K \rvert = 2$. Then it is ${e, a}$. Trivially abelian.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact.&lt;/strong&gt; For any two elements $a,b$ of a group. If $ab = b$ then $a = e$, the identity element. Observe we can cancel $b$ in $ab = eb = b$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case.&lt;/strong&gt; $\lvert H \cap K \rvert = 4$. Assume for contradiction, that $ab \neq ba$ for arbitrary distinct elements $a$ and $b$, Neither of which is the identity. Then $ab \not\in {a, b}$ by the &lt;em&gt;Fact&lt;/em&gt;. Moreover $ab \neq e$ lest $b = a^{-1}$ and then $ab = ba$. Symmetrically these conclusions apply on $ba$. Since we excluded $3$ elements out of $4$, There is only a single element $ab$ and $ba$ can both be assigned to, i.e $ab = ba$. Contradiction.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 08</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset08/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset08/</guid>
      <description>&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;4&lt;/h3&gt;
&lt;p&gt;Clearly, For arbitrary $a,c \in G$ and $b,d \in H$
\begin{aligned}
&amp;amp;ac = ca \wedge bd = db \\
\leftrightarrow &amp;amp;(ac, bd) = (ca, db) \\
\leftrightarrow &amp;amp;(a,b)(c,d) = (c,d)(a,b)
\end{aligned}
I guess the general case is any group-theoretic property on both $G$ and $H$ is also
on $G \oplus H$, and vice verca.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;5&lt;/h3&gt;
&lt;p&gt;Assume for the sake of contradiction $Z \oplus G$ is cyclic. Then by definition there is a generator $(a,b)$. Then necessarily $\langle a \rangle = Z$ and $\langle b \rangle = G$ as by definition we have $(a,b)^k = (a^k,b^k)$. Observe $\langle a \rangle$ is of infinite order. Fix $c \in Z$, Then we know $a^k = c$ for some $k$. Compute $(a,b)^k = (a^k,b^k) = (c,d)$. Let $h$ be the element other than $d$ in $G$. Now we can&amp;rsquo;t generate $(c,h)$. By &lt;em&gt;theorem 4.1&lt;/em&gt; (page 76) if $a^i = a^k$ then $i = k$. In other words, $k$ is the only integer that yields $a^k = c$.&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;6&lt;/h3&gt;
&lt;p&gt;Clearly $(1,1) \in Z_8 \oplus Z_2$ is of order $8$. We claim no element of $Z_4 \oplus Z_4$ is of order $8$, Which suffices to solve the problem.&lt;/p&gt;
&lt;p&gt;From &lt;em&gt;Theorem 4.3&lt;/em&gt; (page 81) we know any element of $Z_4$ is of order, which divides $4$. In other words, For any element $a$, there is $k \leq 4$ such that $k |a| = 4$. Similarly for another element $b$ we have $k&amp;rsquo; |b| = 4$.&lt;/p&gt;
&lt;p&gt;So for any $(a,b) \in Z_4 \oplus Z_4$, Observe $(a,b)^4 = (a^4,b^4) = (a^{k |a|},b^{k&amp;rsquo; |b|}) = ((a^{|a|})^k, (b^{|b|})^{k&amp;rsquo;}) = (0^k, 0^{k&amp;rsquo;}) = (0, 0)$. So order of $(a,b)$ is at most $4$.&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;15&lt;/h3&gt;
&lt;p&gt;Let $\phi: C \rightarrow R \oplus R$ where $\phi(a+bi) = (a,b)$.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Injective. $\phi(a+bi) = \phi(c+di)$ implies $(a,b) = (c,d)$, and in turn $a = c$ and $b = d$.&lt;/li&gt;
&lt;li&gt;Surjective. For any $(a,b)$ we have $\phi(a+bi) = (a,b)$.&lt;/li&gt;
&lt;li&gt;Preserves Operation. $\phi(a+bi) \phi(c+di) = (a,b) (c,d) = (a+c, b+d) = \phi( (a+c)+(b+d)i ) = \phi ( (a+bi) + (c+di) )$.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;17&lt;/h3&gt;
&lt;p&gt;Since $G \oplus H$ is cyclic, it has a generator $(a,b)$. It follows $\langle a \rangle = G$&lt;/p&gt;
&lt;p&gt;and $\langle b \rangle = H$. If that is not the case, Then we can select an element from $G$ or $H$ whereby $(a,b)^k = (a^k, b^k)$ won&amp;rsquo;t cover it, on it corresponding index.&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;21&lt;/h3&gt;
&lt;p&gt;Denote the equivalence $\langle (g,h) \rangle = \langle g \rangle \oplus \langle h \rangle$ by (1).&lt;/p&gt;
&lt;p&gt;Recall theorem 8.1 (page 158).&lt;/p&gt;
&lt;p&gt;By definition we know $(g,h)^k = (g^k,h^k)$ where $g^k \in \langle g \rangle$ and $h^k \in \langle h \rangle$.&lt;/p&gt;
&lt;p&gt;The condition is $|g|$ and $|h|$ are coprime. Observe it is equivalent to $lcm(|g|,|h|) = |g| |h|$.&lt;/p&gt;
&lt;p&gt;(Necessity) We show given (1), The condition holds. Since sets are equal, and cardinality of L.H.S is $|g| \cdot |h|$, Then $|(g,h)| = |g| \cdot |h|$. By &lt;em&gt;thm 8.1&lt;/em&gt;, The condition is satisfied.&lt;/p&gt;
&lt;p&gt;(Sufficent) We show given the condition, (1) holds. By &lt;em&gt;thm 8.1&lt;/em&gt;, $|(g,h)| = |g| \cdot |h|$. So its cardinality is the same as R.H.S, and it is a subset of it. It follows (1) holds.&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;23&lt;/h3&gt;
&lt;p&gt;Any element in $Z_3$ is of order 3, except the identity $0$. Consider an arbitrary non-identity element&lt;/p&gt;
&lt;p&gt;$(x_1, x_2, \dots, x_k) \neq e = \underbrace{(0, .., 0)}_{k \text{ times}}$&lt;/p&gt;
&lt;p&gt;in $\underbrace{Z_3 \oplus .. \oplus Z_3}_{k \text{ times}}$. We claim $| (x_1, \dots, x_k) | = 3$.&lt;/p&gt;
&lt;p&gt;Following the fact all non-identity elements are of order 3, and we have some $x_i \neq 0$,
\begin{aligned}
(x_1, x_2, \dots, x_k)^1 &amp;amp;= (x_1^1, x_2^1, \dots, x_k^1) \neq e \\
(x_1, x_2, \dots, x_k)^2 &amp;amp;= (x_1^2, x_2^2, \dots, x_k^2) \neq e \\
(x_1, x_2, \dots, x_k)^3 &amp;amp;= (0, 0, \dots,0) = e \\
\end{aligned}
Therefore we have $3^k - 1$ elements of order 3 in $\underbrace{Z_3 \oplus \dots \oplus Z_3}_{k \text{ times}}$.&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;35&lt;/h3&gt;
&lt;p&gt;Recall the square root of any complex number $z$ exists. Observe $C^*$ is closed under the square root operation.&lt;/p&gt;
&lt;p&gt;Assume for the sake of contradiction, there is an isomorphism $\phi : C^* \rightarrow R^* \oplus R^*$. Then by surjectivity there is some complex $z$ where $\phi(z) = (-1,-1)$. It follows
\begin{aligned}
\phi(\sqrt{z} \cdot \sqrt{z}) &amp;amp;= (-1,-1) \\
\phi(\sqrt{z}) \cdot \phi(\sqrt{z}) &amp;amp;= \\
( \phi(\sqrt{z}) )^2 &amp;amp;= \\
(a,b)^2 &amp;amp;= \\
(a^2, b^2) &amp;amp;=
\end{aligned}
In other words $a^2 = -1$ and $b^2 = -1$, but either of these leads to a contradiction, as no square of a real number is negative.&lt;/p&gt;
&lt;h3 id=&#34;section-8&#34; class=&#34;unnumbered&#34;&gt;46&lt;/h3&gt;
&lt;p&gt;The infinite group is $\mathcal{Z} \oplus D_4 \oplus A_4$. Clearly ${ (e_Z, x, e_{A_4}) \mid x \in D_4 }$ and ${ (e_Z, e_{D_4}, x) \mid x \in A_4 }$ are both subgroups.&lt;/p&gt;
&lt;h3 id=&#34;section-9&#34; class=&#34;unnumbered&#34;&gt;48&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Claim&lt;/strong&gt;. It is all permutations on $\mathcal{Z}_2 \oplus \mathcal{Z}_2$ which maps $(0,0)$ to itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;. Our characterization is consistent with the fact the identity is always mapped to itself, and that isomorphism is a bijection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact&lt;/strong&gt;. In any group, fixing element $a_0$, then for any elements $b_0 \neq b_1$, we have $a_0 b_0 \neq a_0 b_1$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma&lt;/strong&gt;. For any $(a,b) \in \mathcal{Z}_2 \oplus \mathcal{Z}_2$, $(a, b)^2 = (a^2, b^2) = (0,0) = e$, As $0^2 = 0$ and $1^2 = 0$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma&lt;/strong&gt;. Any two elements of $X = { (0,1), (1,0), (1,1) }$ multiplies to the third.&lt;/p&gt;
&lt;p&gt;For distinct $a,b,c \in X$, $ab \neq (0,0)$ since $aa = (0,0)$. Also $ab \neq a$ since $a (0,0) = a$. Similarly $ab \neq b$. Therefore the only remaining choice is $ab = c$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;. Our permutations preserve the operation.&lt;/p&gt;
&lt;p&gt;We know for distinct elements $a, b, c \in X$, we have $ab = c$. As $\phi$ is a permutation on these, We have $X = { \phi(a), \phi(b), \phi(c) }$. It follows
$\phi(a) \phi(b) = \phi(c)$. That concludes $\phi(c) = \phi(ab) = \phi(a) \phi(b)$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Harvey&#39;s Randomized Algorithms</title>
      <link>https://mostafatouny.github.io/post/harvey-rand-pset/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/harvey-rand-pset/</guid>
      <description>&lt;h2 id=&#34;materials&#34;&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Book: &lt;a href=&#34;https://www.cs.ubc.ca/~nickhar/Book1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Volume I. A First Course in Randomized Algorithms by Nick Harvey&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;problem-set&#34;&gt;Problem Set&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chapter&lt;/th&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ch 01&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset01.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/harvey-rand-post/pset01&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch 02&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset02.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/harvey-rand-post/pset02&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Lab 08</title>
      <link>https://mostafatouny.github.io/msa-levitin-post/lab08/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/msa-levitin-post/lab08/</guid>
      <description>&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;8.1.3&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;8.1.5&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;8.1.6&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Hints&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explain why is the formulation $F(n) = F(n-1) + p_1$ is wrong. Derive a counter example.&lt;/li&gt;
&lt;li&gt;The optimal solution may be $F(n) = p_n$. Modify it so that it is in terms of $F(k)$ for some $k &amp;lt; n$.&lt;/li&gt;
&lt;li&gt;Generalize.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recursive formulation.
\begin{aligned}
F(0) &amp;amp;= 0 \\
F(n) &amp;amp;= \underset{1 \leq j \leq n}{\max} {p_j + F(n-j) }
\end{aligned}&lt;/p&gt;
&lt;p&gt;Algorithm.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # input: Length n, and values of pieces of length i, P[i]
    # output: Maximum value of all possible cuts on a rod of length n
    def dynamicRodCut(n, P[0..n])

        # a rod of length zero contributes nothing to revenue
        P[0] = 0

        # Initialize an array of size n
        F = [] * (n+1)

        # Set the base case
        F[0] = 0

        # Compute bottom-up F[i]
        for i in 1..n

            maxVal = 0

            # Compute the maximum among all js
            for j in 0..i
                # call memoized subinstances
                # update if found a greater value
                maxVal = max( maxVal, P[j] + F(i-j) )

            # memoize
            F[i] = maxVal

        # return max value of cuts, on given length n
        return F[n]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Complexity. Time is $1 + \dots + n = n(n+1)/2$. Additional space is $n+1$.&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;8.2.2&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;8.2.3&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;8.2.5&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Hints&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recall for the algorithm given in the book, at each step, either we take or leave the ith item.&lt;/li&gt;
&lt;li&gt;For our case what if we at each step, either leave all items, or take 1st item, or take 2nd item, .., or nth item. Modify the formulation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recursive Formulation.
\begin{aligned}
F(W) &amp;amp;= 0 \qquad &amp;amp;\text{if } W &amp;lt; w_j, ; 1 \leq j \leq n \\
F(W) &amp;amp;= \underset{j: W \geq w_j}{\max} F(W - w_j) + v_j &amp;amp;\text{otherwise}
\end{aligned}&lt;/p&gt;
&lt;p&gt;Algorithm&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # memory function
    # input: i indicating selecting a multiset of item 1, item 2, .., item i
             j capacity
    # output: optimal value of a feasible multiset from item 1, item 2, .., item i
    def MFKnapsack(i, j, weight, value, F)
        
        # only if not memoized, compute and cache it
        if F[i,j] &amp;lt; 0

            # find the maximum value among all cases
            # item i added 0, 1, 2, .. times constrained by capacity
            count = 0
            while (count * weight[i]) &amp;lt; j
                maxVal = max( 
                            maxVal, 
                            (count * value[i]) + MFKnapsack( i-1, j - (count * weight[i]) )                     
                        )
            
            # memoize
            F[i,j] = maxVal

        return F[i,j]

    # input: weight of ith item, value of ith item, total capacity W
    # output: max value of a multiset of all given n items
    #         constrained by capacity W
    def dynamicKnapsack(weight[1..n], value[1..n], W)

        # memoization table
        # all cells -1, indicating no value is computed
        F[0..n, 0..W] = -1
        # except row 0 and column 0, values are 0, by definition of base case
        for i in 0..n, F[i,0] = 0
        for i in 0..W, F[0,i] = 0

        # compute memoization table F, and read F[n, W]
        sol = MFKnapsack(n, W, weight, value, F)

        # problem solution is F[n, W]
        return sol
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;8.3.4&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;8.3.8&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Hints.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recall you have table $R$, where $R[i,j]$ contains the root of the tree of nodes $i, \dots, j$.&lt;/li&gt;
&lt;li&gt;Recall how the optimal solution of knapsack was constructed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # global variables: table R of roots indices
                        keys A
    # input: root node of a tree, and indices i and j of keys covered
    # output: None. Tree is modified so the root points to its children
    # initialize with i = 1 and j = n
    # def optimalBST(root, i, j)

        # base case
        if root = NULL
            return

        # index of the root of subtree of keys A_i, .., A_j
        k = R[i,j]

        # left child
        root.left = A[ R[i, k-1] ]
        # right child
        root.right = A[ R[k+1, j] ]

        # Recursively, Call the child
        optimalBST(root.left, i, k-1)
        optimalBST(root.right, k+1, j)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;P.S. Anything by Donald Knuth is worthwhile studying, however for our
pragmatic purposes we omit the analysis bounding $\mathcal{O}(n^2)$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lab 07</title>
      <link>https://mostafatouny.github.io/msa-levitin-post/lab07/</link>
      <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/msa-levitin-post/lab07/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;7.1.2&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;7.1.5&lt;/h3&gt;
&lt;p&gt;We tell students sort by a single loop rather than a single-line.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def sortBySingleLoop(A[0..n-1])
        # initialize a zeros list of size n
        S = [0] * n

        # loop on A values, Convert to corresponding index, Set that index
        for i in 0..n-1
            S[ A[i]-1 ] = A[i]

        # S is A but sorted
        return S
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;7.1.10&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;7.2.2&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;7.2.3&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;7.2.11&lt;/h3&gt;
&lt;h4 id=&#34;a&#34; class=&#34;unnumbered&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Hints&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The question asks for memory. So any timely inefficient solution is acceptable.&lt;/li&gt;
&lt;li&gt;Use naive brute-force.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # input: strings S[0..n-1] and T[0..n-1]
    # output: True if and only if T is right cyclic shift
    def bruteForceRightCyclicShift(S[0..n-1], T[0..n-1])
        
        # try all ith positions
        for i in 0..n-1

            # counter of matched characters
            k = 0

            # check from the ith position to last nth character, cycling if needed
            while k &amp;lt; n and S[(i+k) mod n] = T[k]
                k = k + 1

            # all n characters are matching, i.e strings are matching
            if k == n return True
        
        # if no position matches
        return False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the &lt;code&gt;mod&lt;/code&gt; operation is troublesome to students, we show&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # input: position x
    # output:
        # x if x did not pass string length n
        # if x passed n, return only the additional length beyond n
    def myPosition(x, n)
        if x &amp;lt; n
            return x
        return x - n

    # input: strings S[0..n-1] and T[0..n-1]
    # output: True if and only if T is a right cyclic shift of S
    def bruteForceRightCyclicShift(S[0..n-1], T[0..n-1])
        
        # try all ith positions
        for i in 0..n-1

            # counter of matched characters
            k = 0

            # check from the ith position to last nth character, cycling if needed
            while k &amp;lt; n and S[ myPosition(i+k,n) ] = T[k]
                k = k + 1

            # all n characters are matching, i.e strings are matching
            if k == n return True

        # if no position matches
        return False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observe greatest value of &lt;code&gt;x&lt;/code&gt; is $n-1 + n-1 = 2n - 2 &amp;lt; 2n$. So our function &lt;code&gt;myPosition&lt;/code&gt; is equivalent to &lt;code&gt;mod&lt;/code&gt; operation in this case.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Complexity.&lt;/strong&gt; Extra space is $\mathcal{O}(1)$. Time is $\mathcal{O}(n^2)$.&lt;/p&gt;
&lt;h4 id=&#34;b&#34; class=&#34;unnumbered&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Hints&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;em&gt;Boyer-Moore&lt;/em&gt; algorithm as a subroutine.&lt;/li&gt;
&lt;li&gt;What is the input enhancement so that a linear scan, of all possible positions, of first character, is feasible?&lt;/li&gt;
&lt;li&gt;Repeat the input so the check is equivalent to cycling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # input: string S
    # output: S but with n-1 prefix appended
    def appendPrefix(S[0..n-1])
        
        # copy S
        X = S

        # for each character of n-1 prefix
        for i in 0..n-2

            # append to the end
            X.append( X[i] )

        # return appended string
        return X

    # input: string S[0..n-1] and T[0..n-1]
    # output: True if and only if T is a cyclic right shift of S
    def BoyerMooreRightCyclicShift(S[0..n-1], T[0..n-1])
        
        # enhance the input by appending n-1 prefix
        S = appendPrefix(S)

        # right cyclic shift is equivalent to matching T in enhanced input S
        return BoyerMoore(S, T)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For enhanced $X$ of given input $S$, Observe $S[i \mod n] = X[i]$. In other words, our condition on the enhanced input is equivalent to the brute-force algorithm. Since we know the brute-force is correct by definition, so is &lt;code&gt;BoyerMooreRightCyclicShift&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Complexity.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time. $\Theta(n)$ for appending prefix. $\mathcal{O}(n)$ for &lt;em&gt;Boyer-Moore algorithm&lt;/em&gt; (given from the levitin).&lt;/li&gt;
&lt;li&gt;Space. Extra space is $\Theta(n)$ for appended prefix. $\Theta(|\sum|)$ for the &lt;em&gt;good-suffix table&lt;/em&gt;. $\Theta(n)$ for the &lt;em&gt;bad-symbol table&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;7.3.1&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;7.3.2&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-8&#34; class=&#34;unnumbered&#34;&gt;7.3.4&lt;/h3&gt;
&lt;p&gt;Given the even distribution of hash function, We have a uniform distribution. Fixing cell $c_j$ the probability of hashing to it is $Pr[R_i = c_j] = \nfrac{1}{m}$ for the ith element out of the $n$ elements. Since the hash events are pairwise independent, $Pr[C = c_j] = Pr[R_1 = c_j \wedge \dots \wedge R_n = c_j] = Pr[R_1 = c_j] \cdot .. \cdot Pr[R_n = c_j] = \left (\nfrac{1}{m} \right )^n$. Since the events of hashing all elements to a particular cell are disjoint, $Pr[C = c_0 \vee \dots \vee C_{m-1}] = Pr[C = c_0] + \dots + Pr[C = c_{m-1}] = m \left (\nfrac{1}{m} \right )^n = \nfrac{1}{m^{n-1}}$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 06</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset06/</link>
      <pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset06/</guid>
      <description>&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;1&lt;/h3&gt;
&lt;p&gt;$\phi(n) = 2n$. If $2a = 2b$ then $a = b$. For each $2k$ we have $\phi(k) = 2k$. Observe $\phi(ab) = 2(a+b) = 2a + 2b = \phi(a)\phi(b)$, Following by usual properties of integers.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;2&lt;/h3&gt;
&lt;p&gt;We Follow the same proof approach of &lt;em&gt;Example 15&lt;/em&gt; (page 130). Let $\phi \in Aut(Z)$ be arbitrary. Then by the usual properties of integers and isomorphisms, $\phi(k) = \phi(1 + 1 + \dots + 1) = \phi(1) + \dots + \phi(1) = k \cdot \phi(1)$. But by definition $\phi(1) = c$ for some integer $c$. Therefore $\phi(k) = kc$. In other words, $Aut(Z) = { \phi \mid \exists c, ; \forall k ; \phi(k) = kc }$&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;4&lt;/h3&gt;
&lt;p&gt;Caylay table of $U(8)$:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Caylay table of $U(10)$:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Recall from &lt;em&gt;theorem 6.2&lt;/em&gt; (page 126), Any $\phi$ maps the identity to the identity of the other group.&lt;/p&gt;
&lt;p&gt;In $U(8)$ we have $3 \cdot 3 = 1$. Then $\phi(3 \cdot 3) = \phi(3) \cdot \phi(3) = \phi(1) = 1$. The only non-identity element in $U(10)$ satisfying that is $9$. Hence $\phi(3) = 9$.&lt;/p&gt;
&lt;p&gt;Similarly $5 \cdot 5 = 1$. Then we must have some $a \in U(10)$ such that $a \cdot a = 1$ where $a \notin { 1, 9 }$. Contradiction.&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;8&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Injective.&lt;/em&gt; Given $\log_{10} a = \log_{10} b$, we get $10^{\log_{10} a} = 10^{\log_{10} b}$, and $a = b$.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Surjective.&lt;/em&gt; Given $x \in \mathcal{R}$, take $a = 10^x \in \mathcal{R}^+$. Then $\log_{10} a = \log_{10} 10^x = x$.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Group Operation.&lt;/em&gt; Observe $\phi(ab) = \log_{10} ab = \log_{10} a + \log_{10} b = \phi(a) + \phi(b)$.&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;11&lt;/h3&gt;
&lt;p&gt;Observe $\phi(a^3 b^{-2}) = \phi(a^3) + \phi(b^{-2}) = [\phi(a)]^3 + [\phi(b)]^{-2} = (\overline{a})^3 + (\overline{b})^{-2}$. We used &lt;em&gt;theorem 6.2&lt;/em&gt; (2).&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;12&lt;/h3&gt;
&lt;p&gt;$(\rightarrow)$. For any $a,b \in G$, We have:
\begin{aligned}
\alpha(a^{-1}b^{-1})  &amp;amp;= \alpha(a^{-1}) \alpha(b^{-1}) \\
(a^{-1} b^{-1})^{-1} &amp;amp;= \\
ba  &amp;amp;= ab
\end{aligned}&lt;/p&gt;
&lt;p&gt;$(\leftarrow)$. Symmetrically, If we have $b^{-1} a^{-1} = a^{-1} b^{-1}$, Then $\alpha(ab) = \alpha(a) \alpha(b)$. Bijection is clear by properties of inverses.&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;14&lt;/h3&gt;
&lt;p&gt;By &lt;em&gt;theorem 6.5&lt;/em&gt; (page 131), $Aut(Z_3) \approx U(3)$ and $Aut(Z_4) \approx U(4)$, so $Aut(Z_3) \approx Aut(Z_4)$ by the &lt;em&gt;transitivity&lt;/em&gt; of isomorphism. But $Z_3 \not\approx Z_4$ as the two groups have different orders, so no bijection exists.&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;21&lt;/h3&gt;
&lt;p&gt;Clearly groups $H$ and $K$ are isomorphic to $S_4$. By transitivity $H \approx K$.&lt;/p&gt;
&lt;h3 id=&#34;section-8&#34; class=&#34;unnumbered&#34;&gt;22&lt;/h3&gt;
&lt;p&gt;For every $c = 2, 3, 4 \dots$, Consider the subset $H_c = { ck \mid k \in \mathcal{Z} }$. It is a subgroup, As it has the identity $c(0)$, inverses $c(-k)$, and closed $ck_1 + ck_2 = c(k_1 + k_2)$.&lt;/p&gt;
&lt;p&gt;It remains to show those subgroups are distinct. For any $c_1$ and $c_2$ where $c_1 &amp;lt; c_2$ we have $c_1(1) \in H_{c_1}$ but $c_1(1) \not\in H_{c_2}$. Therefore $H_{c_1} \neq H_{c_2}$.&lt;/p&gt;
&lt;h3 id=&#34;section-9&#34; class=&#34;unnumbered&#34;&gt;24&lt;/h3&gt;
&lt;p&gt;We use &lt;em&gt;theorem 3.2&lt;/em&gt; (page 63). If $\phi(a) = a$ then $\phi(a^{-1}) = (\phi(a))^{-1} = a^{-1}$. Also, If $\phi(a) = a$ and $\phi(b) = b$ then $\phi(ab) = \phi(a) \phi(b) = ab$.&lt;/p&gt;
&lt;h3 id=&#34;section-10&#34; class=&#34;unnumbered&#34;&gt;34&lt;/h3&gt;
&lt;p&gt;Let $K$ be a subgroup of $G$. We use &lt;em&gt;theorem 3.2&lt;/em&gt; (page 63).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inverse.&lt;/strong&gt; For any $\phi(k) \in \phi(K)$, $(\phi(k))^{-1} = \phi(k^{-1})$. But $k^{-1} \in K$, So $\phi(k^{-1}) \in \phi(K)$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Closed.&lt;/strong&gt; For $\phi(k_1), \phi(k_2) \in \phi(K)$, We have $\phi(k_1) \phi(k_2) = \phi(k_1 k_2)$. But $k_1 k_2 \in K$, So $\phi(k_1 k_2) \in \phi(K)$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Waikato&#39;s Data Mining</title>
      <link>https://mostafatouny.github.io/post/msa-waikato-lab/</link>
      <pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/msa-waikato-lab/</guid>
      <description>&lt;h2 id=&#34;forward&#34;&gt;Forward&lt;/h2&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;h2 id=&#34;materials&#34;&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Data Mining: Practical Machine Learning Tools and Techniques by Witten, Frank, Hall, and Pal, 4th ed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;labs&#34;&gt;Labs&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lab&lt;/th&gt;
&lt;th&gt;Notebook&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Lab 00&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./&#34; download=&#34;DM_PMLTT_00.ipynb&#34;&gt;IPYNB&lt;/a&gt;, &lt;a href=&#34;./DM_PMLTT_00.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 01&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./&#34; download=&#34;DM_PMLTT_01.ipynb&#34;&gt;IPYNB&lt;/a&gt;, &lt;a href=&#34;./DM_PMLTT_01.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 02&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./&#34; download=&#34;DM_PMLTT_02.ipynb&#34;&gt;IPYNB&lt;/a&gt;, &lt;a href=&#34;./DM_PMLTT_02.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 03&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./&#34; download=&#34;DM_PMLTT_03.ipynb&#34;&gt;IPYNB&lt;/a&gt;, &lt;a href=&#34;./DM_PMLTT_03.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 04&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./&#34; download=&#34;DM_PMLTT_04.ipynb&#34;&gt;IPYNB&lt;/a&gt;, &lt;a href=&#34;./DM_PMLTT_04.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 05&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./&#34; download=&#34;DM_PMLTT_05.ipynb&#34;&gt;IPYNB&lt;/a&gt;, &lt;a href=&#34;./DM_PMLTT_05.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 06&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./&#34; download=&#34;DM_PMLTT_06.ipynb&#34;&gt;IPYNB&lt;/a&gt;, &lt;a href=&#34;./DM_PMLTT_06.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 07&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./&#34; download=&#34;DM_PMLTT_07.ipynb&#34;&gt;IPYNB&lt;/a&gt;, &lt;a href=&#34;./DM_PMLTT_07.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 08&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./&#34; download=&#34;DM_PMLTT_08.ipynb&#34;&gt;IPYNB&lt;/a&gt;, &lt;a href=&#34;./DM_PMLTT_08.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 09&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./&#34; download=&#34;DM_PMLTT_09.ipynb&#34;&gt;IPYNB&lt;/a&gt;, &lt;a href=&#34;./DM_PMLTT_09.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 05</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset05/</link>
      <pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset05/</guid>
      <description>&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;1&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;a&lt;/strong&gt;
$$
\alpha^{-1} =
\begin{bmatrix}
1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 &amp;amp; 5 &amp;amp; 6 \\
2 &amp;amp; 1 &amp;amp; 3 &amp;amp; 5 &amp;amp; 4 &amp;amp; 6
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b&lt;/strong&gt;
$$
\beta \alpha =
\begin{bmatrix}
1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 &amp;amp; 5 &amp;amp; 6 \\
1 &amp;amp; 6 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 &amp;amp; 5
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c&lt;/strong&gt;
$$
\alpha \beta =
\begin{bmatrix}
1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 &amp;amp; 5 &amp;amp; 6 \\
6 &amp;amp; 2 &amp;amp; 1 &amp;amp; 5 &amp;amp; 3 &amp;amp; 4
\end{bmatrix}
$$&lt;/p&gt;
&lt;h3 id=&#34;b&#34; class=&#34;unnumbered&#34;&gt;3(b)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;b.&lt;/strong&gt; $(1 2 4)(3 5)(6)$&lt;/p&gt;
&lt;h3 id=&#34;a&#34; class=&#34;unnumbered&#34;&gt;6(a)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;a.&lt;/strong&gt; disjoint cycles form: $(1 2)(3 5 6)$. Order is $6$.&lt;/p&gt;
&lt;h3 id=&#34;cd&#34; class=&#34;unnumbered&#34;&gt;8(c,d)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;c.&lt;/strong&gt; $(1 7)(1 6)(1 5)(1 3)$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;d.&lt;/strong&gt; $(2 4)(2 3)(1 5)$.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;10&lt;/h3&gt;
&lt;p&gt;We want to find some permutation
$$
\begin{bmatrix}
1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 &amp;amp; 5 &amp;amp; 6 \\
&amp;amp;   &amp;amp;   &amp;amp;   &amp;amp;   &amp;amp;&lt;br&gt;
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Order is $15$, i.e $lcm$ of disjoint cycles lengths is $15$, and&lt;/li&gt;
&lt;li&gt;Even, i.e Has an even number of 2-cycles.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Observe $15 = 3 \cdot 5$ which suggests two disjoint cycles of lengths $3$ and $5$. A standard candidate is $(1 2 3)(4 5 6 7 8)$. Its 2-cycles form: $(4 8)(4 7)(4 6)(4 5)(1 3)(1 2)$, A total of even 6 cycles.&lt;/p&gt;
&lt;p&gt;The permutation in matrix form is:
$$
\begin{bmatrix}
1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 &amp;amp; 5 &amp;amp; 6 &amp;amp; 7 &amp;amp; 8 \\
2 &amp;amp; 3 &amp;amp; 1 &amp;amp; 5 &amp;amp; 6 &amp;amp; 7 &amp;amp; 8 &amp;amp; 4
\end{bmatrix}
$$&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;17&lt;/h3&gt;
&lt;p&gt;Using &lt;em&gt;theorem 3.3&lt;/em&gt; (page 64), It suffices to show the set of even permutations are closed under permutation composition. By definition, Given even permutations $\alpha = (a b)(c d) \dots (e f)$ and $\beta = (g h)(i j) \dots (k l)$, The composition $\alpha \beta = (a b) \dots (k l)$ consists of even number of 2-cycles, As even + even = even.&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;23&lt;/h3&gt;
&lt;p&gt;Let $H$ be a subgroup of $S_n$. Assume not every member is even. We show $H$ must have an equal number of even and odd members.&lt;/p&gt;
&lt;p&gt;We follow the same proof approach of &lt;em&gt;theorem 5.7&lt;/em&gt; (page 104). We know there is an odd member $\alpha$. For every odd $\beta$, $\alpha \beta$ is even, So there as many evens as there are odds. For every even $\beta$, $\alpha \beta$ is odd, So there are as many odds as there are evens. Therefore, the number of even and odd members are equal.&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;25&lt;/h3&gt;
&lt;p&gt;The identity permutation is even. Not closed as the composition of two
odd members is even.&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;43&lt;/h3&gt;
&lt;p&gt;For $n \geq 3$, It is easy to see $(1 2) \in S_n$ and $(2 3) \in S_n$. However&lt;/p&gt;
&lt;p&gt;$$
(2 3)(1 2) =
\begin{bmatrix}
1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 &amp;amp; 5 &amp;amp; \dots \\
3 &amp;amp; 1 &amp;amp; 2 &amp;amp; 4 &amp;amp; 5 &amp;amp; \dots
\end{bmatrix}
\neq
\begin{bmatrix}
1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 &amp;amp; 5 &amp;amp; \dots \\
2 &amp;amp; 3 &amp;amp; 1 &amp;amp; 4 &amp;amp; 5 &amp;amp; \dots
\end{bmatrix}
= (1 2)(2 3)
$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Levitin&#39;s Algorithms</title>
      <link>https://mostafatouny.github.io/post/msa-levitin-lab/</link>
      <pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/msa-levitin-lab/</guid>
      <description>&lt;h2 id=&#34;forward&#34;&gt;Forward&lt;/h2&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;h2 id=&#34;materials&#34;&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Book: Introduction to The Design and Analysis of Algorithms by Levitin, 3rd edition.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;problem-set&#34;&gt;Problem Set&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lab&lt;/th&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Lab 01 - Ch 01&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./lab01.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/msa-levitin-post/lab01&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 02 - Ch 02&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./lab02.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/msa-levitin-post/lab02&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 03 - Ch 03&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./lab03.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/msa-levitin-post/lab03&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 04 - Ch 04&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./lab04.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/msa-levitin-post/lab04&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 05 - Ch 05&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./lab05.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/msa-levitin-post/lab05&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 06 - Ch 06&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./lab06.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/msa-levitin-post/lab06&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 07 - Ch 07&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./lab07.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/msa-levitin-post/lab07&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 08 - Ch 08&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./lab08.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/msa-levitin-post/lab08&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lab 09 - Ch 09&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./lab09.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/msa-levitin-post/lab09&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 02</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset02/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset02/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;1&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(b).&lt;/strong&gt; No. 3/2 is not an integer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(d).&lt;/strong&gt; Yes. $cA$ is a totally valid matrix for any scalar $c$ or matrix $A$.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;2&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(a).&lt;/strong&gt; Yes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(b).&lt;/strong&gt; No.
$\frac{\displaystyle{1/2}}{\displaystyle{3}} = \frac{\displaystyle{1}}{\displaystyle{2}} \frac{\displaystyle{1}}{\displaystyle{3}} \neq \frac{\displaystyle{3}}{\displaystyle{2}} = \frac{\displaystyle{1}}{\displaystyle{2/3}}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(e).&lt;/strong&gt; No. $(2^2)^3 = 2^6 \neq 2^8 = 2^{(2^3)}$&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;3&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(c).&lt;/strong&gt; No. $3(x^2) \neq 3^2 x^2 = (3x)^2$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(d).&lt;/strong&gt; No. Known from linear algebra.&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;5&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(a).&lt;/strong&gt; $20 - 13 = 7$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(b).&lt;/strong&gt; The problem is reduced to finding $x$ and $y$ such that $13x = 14y + 1$. In other familiar notation from chapter 1, $13x - 14y = 1$. Clearly $13(-1) + (-14)(-1) = 1$ so $13(-1 + 14) + (-14)(-1 + 13) = 1$. Thus the inverse of $13$ is $13$.&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;7&lt;/h3&gt;
&lt;p&gt;Not closed. $1 + 3 = 4$.&lt;/p&gt;
&lt;p&gt;No inverse. $3 + x \neq 1$ for any odd integer $x$.&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;14&lt;/h3&gt;
&lt;p&gt;$(ab)^3 = ababab$.&lt;/p&gt;
&lt;p&gt;$(ab^{-2}c)^{-2} = (ab^{-2}c)^{-1} (ab^{-2}c)^{-1} = c^{-1}b^{-3}a^{-1}c^{-1}b^{-3}a^{-1}$&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;16&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fact.&lt;/strong&gt; $x^n$ is an odd integer for any odd $x$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact.&lt;/strong&gt; The summation of two even integers is even.&lt;/p&gt;
&lt;p&gt;We take a different perspective of the problem by the set ${ (5 \cdot 1), (5 \cdot 3), (5 \cdot 5), (5 \cdot 7) }$ modulo $5 \cdot 8$. Upon multiplying any two elements we get the form $5 \cdot 5 \cdot x \cdot y$ where $x,y \in { 1, 3, 5, 7 }$. Think of the output of multiplication as the factor of $5$ deciding the element.&lt;/p&gt;
&lt;p&gt;Observe the element is decided by $5 \cdot x \cdot y \mod 8$. For example if we knew $5 \cdot 5 \cdot 5 \cdot 1 = (5)(8 + 8 + 8 + 1)$ then we can easily deduce the output of $\mod 5 \cdot 8$ operation is $(5)(1)$.&lt;/p&gt;
&lt;p&gt;The numbers $1$, $3$, $5$, and $7$ are all odds. So whatever $x$ or $y$ chosen, $5 \cdot x \cdot y$ will be odd. It follows $\textit{odd} \mod 8 = \textit{odd} \in {1, 3, 5, 7}$. To see why note $8k + \textit{odd} = \textit{odd}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt; The given set is closed under the given operation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt; The identity is $5 \cdot 5 = 25$.&lt;/p&gt;
&lt;p&gt;Observe $5 \cdot 5 \cdot x \mod 8 = 24x + x \mod 8 = x \mod 8$ since $24x \mod 8 = 0$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt; THe inverse of $5x$ is $5x$ by computation on the given elements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt; Associativity is known from integers and modulus properties.&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;18&lt;/h3&gt;
&lt;p&gt;$(R_0)^2 = (R_{180})^2 = H^2 = V^2 = D^2 = (D&amp;rsquo;)^2 = R_0$.&lt;/p&gt;
&lt;p&gt;$(R_{90})^2 = (R_{270})^2 = R_{180}$.&lt;/p&gt;
&lt;p&gt;So $K = { R_0, R_{180} }$, and $L = { R_0, R_{180}, H, V, D, D&amp;rsquo; }$.&lt;/p&gt;
&lt;h3 id=&#34;section-8&#34; class=&#34;unnumbered&#34;&gt;33&lt;/h3&gt;
&lt;p&gt;Observe the group follows the same pattern as $\mathcal{Z}_4$.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;e&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;d&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;inverses.&lt;/strong&gt; Since $ad = e$, $d = a^{-1}$. Since $bc = e$, $c = b^{-1}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ab = c.&lt;/strong&gt; $ab = (cc)b = c(cb) = ce = c$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;db = a.&lt;/strong&gt; $db = d(aa) = (da)a = ea = a$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cd = b.&lt;/strong&gt; $cd = c(bb) = (cb)b = eb = b$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dc = b.&lt;/strong&gt; $dc = (bb)c = b(bc) = be = b$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ac = d.&lt;/strong&gt; $d = bb = (aa)(dc) = a(ad)c = ac$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bd = a.&lt;/strong&gt; $bd = (dc)(bb) = d(cb)b = db = a$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dd = c.&lt;/strong&gt; $dd = (ac)(bb) = a(cb)b = ab = c$&lt;/p&gt;
&lt;h3 id=&#34;section-9&#34; class=&#34;unnumbered&#34;&gt;34&lt;/h3&gt;
&lt;p&gt;$(\leftarrow)$. Given $ab = ba$
\begin{aligned}
(ab)^2 &amp;amp;= (ab)(ab) \\
&amp;amp;= a(ba)b, \text{Associativity} \\
&amp;amp;= a(ab)b \\
&amp;amp;= (aa)(bb), \text{Associativity} \\
&amp;amp;= a^2b^2
\end{aligned}&lt;/p&gt;
&lt;p&gt;$(\rightarrow)$. Given $(ab)^2 = a^2b^2$
\begin{aligned}
(ab)^2 &amp;amp;= (ab)(ab) \\
&amp;amp;= a(ba)b \\
&amp;amp;= aabb \\
ba &amp;amp;= ab, \text{Cancellation}
\end{aligned}&lt;/p&gt;
&lt;p&gt;$(\leftarrow)$. Given $ab = ba$
\begin{aligned}
(ab)^2 &amp;amp;= (ab)^{-1} (ab)^{-1} \\
&amp;amp;= b^{-1} a^{-1} b^{-1} a^{-1} \\
&amp;amp;= b^{-1} (ba)^{-1} a^{-1} \\
&amp;amp;= b^{-1} (ab)^{-1} a^{-1} \\
&amp;amp;= b^{-1} b^{-1} a^{-1} a^{-1} \\
&amp;amp;= (b)^{-2} (a)^{-2}
\end{aligned}&lt;/p&gt;
&lt;p&gt;$(\rightarrow)$. Given $(ab)^{-2} = b^{-2} a^{-2}$
\begin{aligned}
(ab)^{-1} (ab)^{-1} &amp;amp;= b^{-1} a^{-1} b^{-1} a^{-1} \\
&amp;amp;= b^{-1} b^{-1} a^{-1} a^{-1} \\
a^{-1} b^{-1} &amp;amp;= b^{-1} a^{-1}, \text{Cancellation} \\
(ba)^{-1}  &amp;amp;= (ab)^{-1}
\end{aligned}&lt;/p&gt;
&lt;p&gt;Now observe by the definition of inverse, if $x = y^{-1}$ then $y = x^{-1}$. Therefore $ab = [ (ab)^{-1} ]^{-1}$ and $ba = [ (ba)^{-1} ]^{-1}$, and $ab = ba$.&lt;/p&gt;
&lt;h3 id=&#34;section-10&#34; class=&#34;unnumbered&#34;&gt;47&lt;/h3&gt;
&lt;p&gt;Clearly $aabb = a^2b^2 = ee = e$, and $abab = (ab)^2 = e$. It follows $aabb = abab$, and by &lt;em&gt;cancellation&lt;/em&gt; $ab = ba$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 03</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset03/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset03/</guid>
      <description>&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;2&lt;/h3&gt;
&lt;p&gt;$(Q, +)$. ${ \frac{\displaystyle{x}}{\displaystyle{2}} \mid x \in \mathcal{Z} }$.&lt;/p&gt;
&lt;p&gt;$(Q^*, *)$. ${ 2^x \mid x \in \mathcal{Z}^+ } \cup { \frac{\displaystyle{1}}{\displaystyle{2^x}} \mid x \in \mathcal{Z}^+ } \cup { 1 }$.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;4&lt;/h3&gt;
&lt;p&gt;Consider $|x| = n$. Then $x^n = 1$ and no positive $r &amp;lt; n$ where $x^r = 1$. It follows.
\begin{aligned}
(x^n)^{-1} &amp;amp;= (1)^{-1} \\
(x \cdot x \cdot \dots \cdot x)^{-1} &amp;amp;= 1 \\
x^{-1} \cdot \dots \cdot x^{-1} &amp;amp;= \\
(x^{-1})^n &amp;amp;=
\end{aligned}
Analogously if $(x^{-1})^r = 1$ then $x^r = 1$. That cannot happen for $r &amp;lt; n$.&lt;/p&gt;
&lt;h3 id=&#34;b&#34; class=&#34;unnumbered&#34;&gt;6(b)&lt;/h3&gt;
&lt;p&gt;Identity is $e = 0$.&lt;/p&gt;
&lt;p&gt;$|3| = 4$. $|8| = 3$. $|11| = 12$.&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;7&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fact.&lt;/strong&gt; For any element $x$ in any group, $x^{n+m} = x^n x^m$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact.&lt;/strong&gt; For any element $x$ in any group, $(x^{k})^m = x^{km}$.
\begin{aligned}
(a^4 c^{-2} b^4)^{-1} &amp;amp;= (b^4)^{-1} (c^{-2})^{-1} (a^4)^{-1} \\
&amp;amp;= (b^4)^{-1} (c^2 ) (a^4)^{-1} \\
&amp;amp;= (b^7 b^{-3})^{-1} (c^2) (a^6 a^{-2})^{-1} \\
&amp;amp;= (b^{-3})^{-1} (c^2) (a^{-2})^{-1} \\
&amp;amp;= b^3 c^2 a^2
\end{aligned}&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;10&lt;/h3&gt;
&lt;p&gt;We naively construct all possible subgroups, pruning possible branches by their properties.&lt;/p&gt;
&lt;p&gt;Any subgroup must have the identity element. ${R_0}$. (+1)&lt;/p&gt;
&lt;p&gt;${R_0, X}$ is a subgroup for any reflection $X = H,V,D,D&amp;rsquo;$. (+4)&lt;/p&gt;
&lt;p&gt;Considering a subgroup with ${R_0, X_0, X_1}$ for distinct reflections $X_0, X_1$ it must be the case we get rotation $R_s$ for $s \neq 0$. So we cannot have a subgroup restricted on reflections other than the aforementioned case.&lt;/p&gt;
&lt;p&gt;${ R_0, R_{180} }$. (+1)&lt;/p&gt;
&lt;p&gt;For any subgroup with $R_{90}$ or $R_{270}$, since it is closed it must contain also ${ R_0, R_{90}, R_{180}, R_{270} }$. (+1)&lt;/p&gt;
&lt;p&gt;For any subgroup containing ${ R_0, R_{180}, H }$ it must contain also ${ R_0, R_{180}, H, V }$. For any subgroup containing ${ R_0, R_{180}, V }$ it must contain also ${ R_0, R_{180}, V, H }$.
(+1)&lt;/p&gt;
&lt;p&gt;For any subgroup containing ${ R_0, R_{180}, D }$ it must contain also ${ R_0,    R_{180}, D, D&amp;rsquo; }$. For any subgroup containing ${ R_0, R_{180}, D&amp;rsquo; }$ it must contain also ${ R_0, R_{180}, D, D&amp;rsquo; }$. (+1)&lt;/p&gt;
&lt;p&gt;For any subgroup containing $R_s$ for $s \neq 180$ and any reflection $X = H, V, D, D&amp;rsquo;$, since it is closed, it must contain also ${ R_0, R_{90}, R_{180}, R_{270}, H, V, D, D&amp;rsquo;}$. (+1)&lt;/p&gt;
&lt;p&gt;So far we counted 10 subgroups.&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;19&lt;/h3&gt;
&lt;p&gt;We show the contrapositive. Assume $a^m = a^n$ for $m &amp;gt; n$. Then $a^m a^{-n} = a^n a^{-n}$ implying $a^{m-n} = e$, but $m - n &amp;gt; 0$ so $a$ is of a finite order.&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;30&lt;/h3&gt;
&lt;p&gt;The question presumes the uniqueness of $H$. We won&amp;rsquo;t prove it.&lt;/p&gt;
&lt;p&gt;$H = { 2 (9 k_1 + 15 k_2 + 20 k_3) \mid k_1,k_2,k_3 \in \mathcal{Z} }$.&lt;/p&gt;
&lt;p&gt;Taking $k_1 = k_2 = k_3 = 0$ yields the identity $e = 0$. For $x \in H$ corresponding to $k_i$, Take $-(k_i)$ to obtain the inverse. Closed property is clear from the definition. Associativity follows from $G$. Odd numbers are excluded conforming to the fact $H$ is a proper subgroup.&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;34&lt;/h3&gt;
&lt;p&gt;Since $e \in H$ and $e \in K$ by definition, We have $e \in H$.&lt;/p&gt;
&lt;p&gt;if $x,y,z \in H \cap K$, then $x,y,z \in H$ and associativity follows.&lt;/p&gt;
&lt;p&gt;if $x \in H \cap K$, then $-x \in H$ and $-x \in K$, and any element has an inverse.&lt;/p&gt;
&lt;p&gt;if $x,y \in H \cap K$, then $x + y \in H$ and $x + y \in K$ by properties of a group.&lt;/p&gt;
&lt;p&gt;A trivial argument by induction shows the intersection of any number of subgroups.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 04</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset04/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset04/</guid>
      <description>&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;1&lt;/h3&gt;
&lt;p&gt;By &lt;em&gt;corollary 4&lt;/em&gt; (page 80).&lt;/p&gt;
&lt;p&gt;Generators of $\mathcal{Z}_6$ are $1,5$ since $gcd(1,6) = gcd(5,6) = 1$.&lt;/p&gt;
&lt;p&gt;Generators of $\mathcal{Z}_8$ are $1,3,5,7$ since $gcd(1,8) = gcd(3,8) = gcd(5,8) = gcd(7,8) = 1$.&lt;/p&gt;
&lt;p&gt;Generators of $\mathcal{Z}_{20}$ are $1,3,7,9,11,13,17,19$ since $gcd(1,20) = gcd(3,20) = gcd(7,20) = gcd(9,20) = gcd(11,20) = gcd(13,20) = gcd(17,20) = gcd(19,20) = 1$.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;5&lt;/h3&gt;
&lt;p&gt;$\langle 3 \rangle = \{ 3^0, 3^1, 3^2, 3^3, 3^4, 3^5, \dots\} \cup \{ 3^{-1}, 3^{-2}, 3^{-3}, 3^{-4}, 3^{-5}, \dots \} = \{0, 3, 9, 7 , 1, 3, \dots\} \cup \{ -3, 9, -7, 1, -3, \dots \} = \{0, 3, 9, 7 , 1, 3\} \cup \{ 17, 9, 13, 1, 17 \} = \{0, 1, 3, 7, 9, 13, 17\}$.&lt;/p&gt;
&lt;p&gt;$\langle 7 \rangle = \{ 7^0, 7^1, 7^2, 7^3, 7^4, 7^5, \dots\} \cup \{ 7^{-1}, 7^{-2}, 7^{-3}, 7^{-4}, 7^{-5}, \dots \} = \{ 0, 7, 9, 3, 1, 7, \dots \} \cup \{ -7, 9, -3, 1, -7, \dots \} = \{ 0, 7, 9, 3, 1 \} \cup \{ 13, 1, 17, 1 \} = \{ 0, 1, 3, 7, 9, 13, 17 \}$&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;10&lt;/h3&gt;
&lt;p&gt;By corollary (page 82). One generator is $\langle 24/8 \rangle = \langle 3 \rangle = \{ 3^0, 3^1, 3^2, 3^3, 3^4, 3^5, 3^6, 3^7, 3^8, 3^9 \} \cup \{ 3^{-1}, 3^{-2}, 3^{-3}, 3^{-4}, 3^{-5}, 3^{-6}, 3^{-7}, 3^{-8}, 3^{-9} \} = \{ 0, 3, 6, 9, 12, 15, 18, 21, 0 \} \cup \{ 21, 6, 15, 12, 9, 18, 3, 0, 21 \} = \{ 0, 3, 6, 9, 12, 15, 18, 21 \}$&lt;/p&gt;
&lt;p&gt;Note any generator of that subgroup must be contained in it as $a = a^1 \in \langle a \rangle$.&lt;/p&gt;
&lt;p&gt;By corollary 3 (page 80). Generators are $3^5 = 15$ and $3^7 = 21$, as $gcd(24,5) = gcd(24, 7) = 1$.&lt;/p&gt;
&lt;p&gt;By corollary 3 (page 80). Generators of arbitrary $G$ are $1,5,7,11,13,17,19,23$ since $gcd(24,i) = 1$. Observe since $G$ is generated by $a$, Any candidate must be of the form $a^i$. So we covered
all of them.&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;11&lt;/h3&gt;
&lt;p&gt;Follows trivially by corollary 3 (page 80), as $gcd(n, -1) = 1$.&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;27&lt;/h3&gt;
&lt;p&gt;We know given a positive integer $n$, there is a complex $z$ such that $z^n = 1$. Then $S_n = \{ z^0, z^1, z^2, \dots \} = \{ z^0, z^1, \dots, z^{n-1} \}$.
Clearly it is a group.&lt;/p&gt;
&lt;p&gt;For $z^{-i}$ observe $-i = n(m) + r$ where $0 \leq r &amp;lt; n$. Then $-i-r$ is divisable by $n$, and by &lt;em&gt;theorem 4.1&lt;/em&gt; (page 76), $z^{-i} = z^r$. Then $\{ z^{-1}, z^{- 2}, \dots \}$ is contained in $S_n$.&lt;/p&gt;
&lt;p&gt;Thus we conclude $S_n = \langle z \rangle$ is a subgroup of order $n$.&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;30&lt;/h3&gt;
&lt;p&gt;We call a subgroup &lt;em&gt;new&lt;/em&gt; if it is not ${e}$ or $G$. Observe constructing it contradicts a given hypothesis.&lt;/p&gt;
&lt;p&gt;Select $a \neq e$. If $\langle a \rangle$ is of infinite order, then $\langle a^2 \rangle$ is a &lt;em&gt;new&lt;/em&gt; subgroup. So $\langle a \rangle$ is of finite order $n$.&lt;/p&gt;
&lt;p&gt;If $\langle a \rangle \neq G$ then $\langle a \rangle$ is a &lt;em&gt;new&lt;/em&gt; subgroup. So $\langle a \rangle = G$.&lt;/p&gt;
&lt;p&gt;If $n$ is not prime, i.e composite, then by &lt;em&gt;theorem 4.3&lt;/em&gt; (page 81), we can take divisor $k$ such that $\langle a^{n/k} \rangle$ is a &lt;em&gt;new&lt;/em&gt; subgroup of order $k$. Note by divisibility $1 &amp;lt; k &amp;lt; n$.&lt;/p&gt;
&lt;p&gt;It follows $G$ is a finite cyclic group of prime order $n$.&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;36&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;All entries are contained in ${ 4, 8, 12, 16 }$, So closed. $16$ is the identity. Every row has an $16$ entry showing inverses existince. The group is cyclic.&lt;/p&gt;
&lt;p&gt;Its generators are all its elements, $4, 8, 12$ and $16$. To see why you can trace the table. For example $8^1 = 8$, $8^2 = 4$, $8^3 = 8^2 \cdot 8 = 4 \cdot 8 = 12$, $8^4 = 8^3 \cdot 8 = 12 \cdot 8 = 16$.&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;48&lt;/h3&gt;
&lt;p&gt;$H$ is a subgroup by &lt;em&gt;Theorem 3.2&lt;/em&gt; (page 63). Given $a = 10 k_0 = 8 k_1$ and $b = 10 k_2 = 8 k_3$, Trivially $a+b = 10(k_0 + k_2) = 8(k_1 + k_3) \in H$. Also $-a = 10 (-k_0) = 8 (-k_1) \in H$.&lt;/p&gt;
&lt;p&gt;$H$ is not a subgroup in case of &amp;quot;OR&amp;quot;. Consider the counter-example $10 + 8 = 18$ as $18$ is neither divisible by $10$ nor $8$, Violating closeness property.&lt;/p&gt;
&lt;h3 id=&#34;section-8&#34; class=&#34;unnumbered&#34;&gt;59&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Partially Solved&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let $G$ be a group with only $a$ and $b$ elements of order 2. We try to come-up with a contradiction.&lt;/p&gt;
&lt;p&gt;By definition $a^2 = b^2 = e$, so $a^{-1} = a$ and $b^{-1} = b$. Clearly $ab \neq a, b$, or $e$. For example if $ab = e$ then $b = a^{-1} = a$ which is not true as $a$ and $b$ are given as distinct elements.&lt;/p&gt;
&lt;p&gt;Case $ab = ba$. Then $(ab)^2 = (ab)(ba) = aea = a^2 = e$. Contradiction.&lt;/p&gt;
&lt;p&gt;Case $ab \neq ba$. No solution found for that case.&lt;/p&gt;
&lt;h3 id=&#34;section-9&#34; class=&#34;unnumbered&#34;&gt;61&lt;/h3&gt;
&lt;p&gt;Let $x \in \langle a \rangle \cap \langle b \rangle$. Then by &lt;em&gt;corollary 1&lt;/em&gt; (page 79), $|x|$ divides both $10$ and $21$. Since they are coprime, $|x| = 1$ and $x^1 = x = e$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gallian&#39;s Abstract Algebra</title>
      <link>https://mostafatouny.github.io/post/siniora-algebra-pset/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/siniora-algebra-pset/</guid>
      <description>&lt;h2 id=&#34;forward&#34;&gt;Forward&lt;/h2&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;h2 id=&#34;materials&#34;&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/view/daoudsiniora/lecture-notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lecture Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Book: Abstract Algebra by Joseph Gallian, 9th ed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;problem-set&#34;&gt;Problem Set&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Chapter&lt;/th&gt;
&lt;th&gt;Solution&lt;/th&gt;
&lt;th&gt;Grading&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ch00&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch00_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset00&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;ch00_graded.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch01&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch01_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset01&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;ch01_graded.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch02&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch02_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset02&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;ch02_graded.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch03&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch03_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset03&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;ch03_graded.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch04&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch04_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset04&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;ch04_graded.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch05&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch05_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset05&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;ch05_graded.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch06&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch06_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset06&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;ch06_graded.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch07&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch07_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset07&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch08&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch08_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset08&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch09&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch09_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset09&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch10&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch10_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset10&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch11&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch11_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset11&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch12&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch12_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset12&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch13&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch13_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset13&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch14&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch14_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/siniora-algebra-post/pset14&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Lab 03</title>
      <link>https://mostafatouny.github.io/msa-levitin-post/lab03/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/msa-levitin-post/lab03/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;3.1.4&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Observe we can derive $x^i$ from $x^{i-1}$, so we don&amp;rsquo;t need to recompute&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Same as manual:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-3-1-4.png&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-3-1-4_1.png&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;3.1.14&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;3.2.8&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Following the definition, If you knew $S[i] = A$, and $S[j] = S[z] = B$ for $j,z &amp;gt; i$, What can you infer?&lt;/li&gt;
&lt;li&gt;Utilize that observation in algorithm design.&lt;/li&gt;
&lt;li&gt;Consider a flag which stores whether character $A$ is read.&lt;/li&gt;
&lt;li&gt;Generalize for a variable that counts how many $A$ was read.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(a)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def count_substrings_starting_with_a_ending_with_b(S[0..n-1]):
      count = 0

      for i in 0..n-2
          if S[i] == A
              for j in i+1..n-1
                  if S[j] == B
                      count = count + 1

      return count
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The number of basic operations is upperbounded by $\sum_{i=0}^{n-2} \sum_{j=i+1}^{n-1} 1 = \mathcal{O}(n^2)$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(b)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def count_substrings_starting_with_a_ending_with_b(S[0..n-1]):
      count_a = 0  # Count of &#39;A&#39; characters encountered so far
      count_ab = 0  # Count of substrings starting with &#39;A&#39; and ending with &#39;B&#39;

      for i in 0..n-2:
          if S[i] == A
              count_a = count_a + 1
          else if S[i] == B
              count_ab = count_ab + count_a

      return count_ab
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;$\sum_{i=0}^{n-2} 1 = \Theta(n)$. Observe count of basic operations is exactly 1 per iteration.&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;3.2.9&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;3.3.3&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;3.3.9&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Think of a unique property about extreme points, in terms of coordinates.&lt;/li&gt;
&lt;li&gt;What can you conclude about the point of maximum $x$ or $y$ coordinates?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # input: array of points, each point is a tuple of x and y coordinates
    # output: a list of exactly two extreme points
    def find_extreme_points(P[0..n]) # given n &amp;gt;= 2

      # Initialize extreme points with the first point in the set
      min_x_point, min_y_point = P[0]
      max_x_point, max_y_point = P[0]

      # Iterate through the remaining points
      for i in P[1..n]
          x, y = i

          # Update max_x_point and max_y_point if needed
          if x &amp;gt; max_x_point:
              max_x_point = x
              max_y_point = y
          else if x == max_x_point and y &amp;gt; max_y_point:
              max_y_point = y

          # Update min_x_point and min_y_point if needed
          if x &amp;lt; min_x_point:
              min_x_point = x
              min_y_point = y
          else if x == min_x_point and y &amp;lt; min_y_point:
              min_y_point = y

      return [(min_x_point, min_y_point), (max_x_point, max_y_point)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;3.4.6&lt;/h3&gt;
&lt;p&gt;We assume the problem would always have a solution. We leave it as an exercise for students to detect the case of the non-existince of any solution.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What can you conclude about the total sum of the whole set, given we have a partition of two subsets, each of total sum $p$?&lt;/li&gt;
&lt;li&gt;If we selected a subset whose sum is $k$, How do we compute the total sum of the remaining elements?&lt;/li&gt;
&lt;li&gt;Consider the special case of finding a single subset whose total sum is $p$.&lt;/li&gt;
&lt;li&gt;Design your algorithm to only rely upon searching through the domain of subsets.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There is an elegant generator based on binary numbers. Since this is not the core focus of the question, We show an easier to understand code by recursion.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def generate_subsets(A[0..n-1]):
      if n == 0:
          return [ [] ]

      # Generate subsets without the last element
      subsets_without_last = generate_subsets( A[0..n-2] )

      # Add the last element to each subset in subsets_without_last
      subsets_with_last = [ subset + [A[n-1]] for subset in subsets_without_last ]

      # Concatenate subsets with and without the last element
      return subsets_without_last + subsets_with_last
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;3.4.9&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-8&#34; class=&#34;unnumbered&#34;&gt;3.5.7&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-9&#34; class=&#34;unnumbered&#34;&gt;3.5.8&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The hinted picture of 2-colorable might be more useful.&lt;/li&gt;
&lt;li&gt;Try to construct a 2-colorable labeling on given graphs. Observe by symmetry you can start anywhere and with any colour.&lt;/li&gt;
&lt;li&gt;What if a vertex must be coloured with two different colours from two different vertices? Can we conclude colouring impossibility?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(a)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;modify $dfs$ function in page 124 to maintain a two colours switching for each level, rather than $count$.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def switchColour(input_colour)
      if input_colour is white
        return black
      if input_colour is black
        return white

    def dfs(v, current_colour)
      if v.colour == NULL
        v.colour = current_colour
      else
        return v.colour == current_colour

      for each vertex w in V adjacent to v
        if not dfs( w, switchColour(current_colour) )
          return False
      
      return True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;(b)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;modify $bfs$ to maintain the depth alongside the vertex in the queue, and then colour according to whether the depth is even or odd.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def colourByDepth(depth_input)
      if depth_input is even
        return white
      if depth_input is odd
        return black

    def bfs(v)
      set v.depth = 0
      v.colour = colourByDepth(v.depth)
      initialize a queue with v
      
      while the queue is not empty do
        for each vertex w in V adjacent to the front vertex f
          if w.colour == NULL
            w.depth = f.depth + 1
            w.colour = colourByDepth(w.depth)
            add w to the queue
          else
            if w.colour != colourByDepth(f.depth+1)
              return False

        remove the front vertex from the queue

      return True
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lab 04</title>
      <link>https://mostafatouny.github.io/msa-levitin-post/lab04/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/msa-levitin-post/lab04/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;instructor-notes&#34; class=&#34;unnumbered&#34;&gt;Instructor Notes&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt; $\lfloor \log n \rfloor + 1 = \lceil \log (n+1) \rceil$.&lt;/p&gt;
&lt;p&gt;We know $n = 2^k + r$ for some $k \geq 0$ and $0 \leq r &amp;lt; 2^k$, By&lt;em&gt;Euclid&amp;rsquo;s Theorem&lt;/em&gt; and &lt;em&gt;Archimedean Property&lt;/em&gt;. Then
\begin{aligned}
k + 1 = \log 2^{k+1} \geq \log (2^k + r + 1) &amp;gt; \log (2^k + r) \geq \log 2^k = k
\end{aligned}&lt;/p&gt;
&lt;p&gt;Thus, $\lceil \log(n + 1) \rceil = \lceil \log (2^k + r + 1) \rceil = k + 1$ and $\lfloor \log (n+1) \rfloor  = \lfloor \log(2^k + 1) \rfloor = k$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt; Given $n$, If we repeatedly apply the operation $\lfloor n/2 \rfloor$ Then we reach $1$ after exactly $\lfloor \log n \rfloor + 1$.&lt;/p&gt;
&lt;p&gt;Consider $n$ but in binary representation $(d_1 d_2 \dots d_k)_2$, where $d_1 = 1$. Then by definition $(d_1 d_2 \dots d_k)_2 / 2$&lt;/p&gt;
&lt;p&gt;yields a quotient $(d_1 \dots d_{k-1})$ and remainder $d_k$. Since we are taking floor, We can safely ignore $d_k$. It is easy to we reach $d_1 = 1$ after exactly $k-1$ operations. But we know $k = \lfloor \log n \rfloor$.&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;4.1.4&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consider the fact, for a fixed element $k$, All subsets either contain $k$, or does not contain $k$.&lt;/li&gt;
&lt;li&gt;Given all subsets not containing $k$, What do we generate when we append $k$ to each subset?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Top-down&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      def generateSubsets(A[0..n-1])
        # base case, empty subset
        if A.length == 0
          return [ [ ] ]
        
        lastElement = A[n-1]

        # smaller instance solution
        subsetsWithNoLast = generateSubsets(A[0..n-2])

        # generate new solutions from smaller instance
        subsetsWithLast = []
        for subset in subsetsWithNoLast
          subsetsWithLast.append( subset + [lastElement] )

        # concatenate solutions
        return subsetsWithNoLast + subsetsWithLast
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bottom-up (Iterative Improvement)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def generateSubsets(A[0..n-1]):
        n = A.length
        allSubsets = [ [ ] ]

        for i in 0..n-1:
            newSubsets = []
            for subset in allSubsets:
                newSubsets.append( subset + [ A[i] ] )
            allSubsets = allSubsets + newSubsets

        return allSubsets
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;4.1.10&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;4.2.3&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(a)&lt;/strong&gt; In matrix implementation $\Theta(|V|^2)$, and in adjacency list implementation $\Theta(|V| + |E|)$. Careful analysis won&amp;rsquo;t be shown as it is outside the scope of the lab, especially that students lack data structures foundations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(b)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consider a stack data structure&lt;/li&gt;
&lt;li&gt;Think in terms of recursion, Given a solved smaller instance, How do we augment it to reach a greater instance?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # a node is inserted in stack, only after calling its subgraph
    # Input: node, visited nodes list, stack
    # Output: NULL
    def dfs(node, visited, stack):
      visited.add( node )

      for neighbor in graph[node]:
        if neighbor not in visited:
          dfs(neighbor, visited, stack)
      
      stack.insert(node)

    # Input: directed graph in adjacency list implementation
    # Output: Topological order of the graph
    def topologicalSortDfs(graph G):
      visited = set() # no multiple occurences in sets
      stack = []

      # can be omitted if we assumed graph&#39;s connectivity
      # and given a unique root (tree)
      for node in G(V):
        if node not in visited:
          dfs(node)

      return stack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another simpler implementation not based on DFS as a bonus answer. Preferred to students over DFS based implementation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # Input: directed graph in adjacency list implementation
    # Output: Topological order of the graph
    def topologicalsortRecursive(graph G):
      visited = set() # multiple occurences in sets
      stack = []

      for node in G(V):
        if node not in visited:
          visited.add(node)
          topologicalSortRecursive(graph[node], visited, stack)
          stack.insert(0, node)

      return stack
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;4.2.8&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;4.3.7&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For each bit string of size $n-1$, If we added $0$, What do we generate?&lt;/li&gt;
&lt;li&gt;Combine adding $0$ and $1$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # Input: Positive integer n
    # Output All bit strings of length n
    def generateAllBitStrings(n):
      # base case
      if n == 1:
        return [&amp;quot;0&amp;quot;, &amp;quot;1&amp;quot;]
      else
        # smaller instance solution
        smallerInstanceStrings = generateAllBitsStrings(n-1)

        # generate n instance from smaller instance

        nInstanceWithZero = []
        for bitString in smallerInstanceStrings
          nInstanceWithZero.append(bitString + &amp;quot;0&amp;quot;)

        nInstanceWithOne = []
        for bitString in smallerInstanceStrings
          nInstanceWithOne.append(bitString + &amp;quot;1&amp;quot;)

        return nInstanceWithZero + nInstanceWithOne
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;4.3.10&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;4.4.2&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consider n separation, in case it is odd, and in case it is even.&lt;/li&gt;
&lt;li&gt;If odd, subtract from it only 1, to get an even number&lt;/li&gt;
&lt;li&gt;Since we are taking floor, We only need to care about the new even number. I.e we won&amp;rsquo;t count.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def floorLog2Recursive(n):
      
      # Base case
      # log2(1) = 0
      if n == 1:
        return 0

      # n is even
      if n % 2 == 0:
        return 1 + floorLog2Recursive(n/2)
      
      # n is odd
      else
        return 0 + floorLog2Recursive( (n-1)/2 )
        # Since we consider floor, the remainder does not count
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;4.4.9&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-8&#34; class=&#34;unnumbered&#34;&gt;4.5.12&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-9&#34; class=&#34;unnumbered&#34;&gt;4.5.13&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given the target $t &amp;gt;$ cell $c$, for some cell in the matrix. Which elements of the matrix can we exclude from the search?&lt;/li&gt;
&lt;li&gt;Consider the case if the cell $c$ is at the corner.&lt;/li&gt;
&lt;li&gt;Try to reduce the problem size by $1$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Recursive implementation&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # Input: n x n Matrix, and target value t
    # Output: tuple (row, column) of the element found, or -1 if not found
    def searchMatrixRecursive(matrix M[0..n-1, 0..n-1], target t, row, col):
      if row &amp;gt;= n or col &amp;lt; 0:
        return -1

      # Base case
      if M[row][col] == t:
        return (row, col)

      # Call smaller instances
      else M[row][col] &amp;lt; t:
        return searchMatrixRecursive(M, t, row + 1, col)
      else:
        return searchMatrixRecursive(M, t, row, col - 1)

    def searchMatrix(Matrix M[0..n-1, 0..n-1], target t)
      # initialize with row = 0 and column = n-1
      return searchMatrixRecursive(M, t, 0, n-1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Upperbounded by $2n = \mathcal{O}(n)$ by the recurrence $T(q) = T(q-1) + 1$, where $q = n + n$, the sum of columns and rows number.&lt;/p&gt;
&lt;p&gt;Bottom-up implementation (iterative improvement)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # Input: n x n matrix and target value t
    # Output: tuple (row, column) of the element found, or -1 if not found
    def searchMatrixBottomUp(matrix M[0..n-1, 0..n-1] , target t):
      row = 0
      col = n-1

      while row &amp;lt; n and col &amp;gt;= 0:
        if M[row][col] == t:
          return (row, col)
        
        if M[row][col] &amp;lt; t:
          row = row + 1
        else:
          col = col - 1

      return -1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Upperbounded by $\sum_{i=1}^{2n} 2 = 2(2n) = \mathcal{O}(n)$, the sum of columns and row numbers.&lt;/p&gt;
&lt;p&gt;P.S. It might be more elegant to consider three-comparison as a single operation. For our students we omit this discussion.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lab 05</title>
      <link>https://mostafatouny.github.io/msa-levitin-post/lab05/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/msa-levitin-post/lab05/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;5.1.3&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you can use floors and ceils as subroutines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(a)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def divConqPower(a,n)
      if n = 1
        return a
      return divConqPower(a, floor(n/2)) * divConqPower(a, ceil(n/2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;(b)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Time of basic operations $T(n)$ are $T(n) = T( \lfloor n/2 \rfloor ) + T( \lceil n/2 \rceil) + 1$. Assuming $n = 2^k$, We get $T(n) = 2T(n/2) + 1$. By master theorem,
$T(n) = \Theta(n)$.&lt;/p&gt;
&lt;p&gt;For general cases of $n$, Observe $n = 2^{\log n} \leq 2^{\lceil \log n \rceil}$, So by master theorem $T(n) \leq \mathcal{O}(2^{\lceil \log n \rceil}) \leq \mathcal{O}(2^{\log n + 1}) = \mathcal{O}(n)$. Similarly $T(n) \geq \Omega(2^{\lfloor \log n \rfloor}) = \Omega(n)$. That concludes $T(n) = \Theta(n)$ for any $n$.&lt;/p&gt;
&lt;p&gt;Complexity proof by substitution. Recurrence is
\begin{aligned}
T(1) &amp;amp;= 0 \\
T(n) &amp;amp;= 2T(n/2) + 1
\end{aligned}
It follows
\begin{aligned}
T(n) &amp;amp;= 2T(n/2) + 1 \\
&amp;amp;= 2^2 T(n/2^2) + 2^1 + 2^0 \\
&amp;amp;= 2^3 T(n/2^3) + 2^2 + 2^1 + 2^0 \\
&amp;amp;= 2^k T(n/2^k) + 2^{k-1} + \dots + 2^0 \\
&amp;amp;= 2^{\log n} T(n/2^{\log n}) + 2^{(\log n) - 1} + \dots + 2^0 \\
&amp;amp;= 2^{\log n} T(1) + 2^{(\log n) - 1} + \dots + 2^0 \\
&amp;amp;= 2^{(\log n) - 1} + \dots + 2^0 \\
&amp;amp;= 2^{\log n } - 1 = n - 1 = \Theta(n)
\end{aligned}&lt;/p&gt;
&lt;p&gt;P.S. Generally speaking we can ignore floors and ceilings in asymptotic notation (see page 885 in MIT&amp;rsquo;s Math for CS).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(c). Homework&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;5.1.10&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;5.2.8&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt; Consider pivot to be zero.&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;5.2.9&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;5.3.1&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recall in a binary tree, a node has at most two leaves. Apply the strategy on them&lt;/li&gt;
&lt;li&gt;Given the height of subtrees, What can you conclude about height of the main tree?&lt;/li&gt;
&lt;li&gt;What is subtrees have different heights?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Same as solution manual:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-5.3.1.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Analysis. We know each node is going to count 1 operation. If we assumed total number of nodes to be $n$, then $T(n) = \Theta(n)$. If we assumed like the book the total number of internal nodes to be $n$ and leaves to be $x$, then $x + n = 2n$, so $T(n) = \Theta(n)$.&lt;/p&gt;
&lt;p&gt;P.S. The book considers checking whether tree is empty to be the basic operation. My intuition tells me it is the max operation.&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;5.3.2&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consider the problem size to be level of a node, not number of nodes.&lt;/li&gt;
&lt;li&gt;Consider the base case as the tree being a single node (leaf).&lt;/li&gt;
&lt;li&gt;Assume you can query the tree&amp;rsquo;s root, and its children.&lt;/li&gt;
&lt;li&gt;Recall a binary tree has at most two children for each node. Given counts of both, what can we conclude?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Commentary on the given algorithm in the question. It is flawed. Given the solution of an empty tree, we reach a flawed claim about the tree of size 1 node. Remarkably we shouldn&amp;rsquo;t consider problem size to be the number of nodes, but rather the height.&lt;/p&gt;
&lt;p&gt;Correct algorithms:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # input: tree T with access to its root
    # output: count of leaves
    def leafCounter (Tree T)
      # base case: the tree is empty
      if T is empty
        return 0

      # base case: the tree is a leaf node
      if T.root.children == []
        return 1
      
      # recursive step
      return leafCounter(T_left) + leafCounter(T_right)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Analysis. We count one summation operation for each non-leaf node. Following the notation given in the book, $n$ as number of non-leaf nodes and $x$ as leaves, We get $T(n) = n$.&lt;/p&gt;
&lt;p&gt;Alternatively we can consider $n$ to be total number of nodes. But we know $n = 2i+1$ where $i$ is number of non-leaf nodes. So $T(n) \approx n/2 = \Theta(n)$.&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;5.4.3&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt; Proving exponent rules is not germane to the course.&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;5.4.8&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt; Uses geometric series.&lt;/p&gt;
&lt;h3 id=&#34;section-8&#34; class=&#34;unnumbered&#34;&gt;5.5.1&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Among pairs of right and left subsets, What are the least-distance ones?&lt;/li&gt;
&lt;li&gt;Use the given sorted property to deduce the least-distance pair.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like the solution manual.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-5.5.1.png&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;section-9&#34; class=&#34;unnumbered&#34;&gt;5.5.9&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lab 06</title>
      <link>https://mostafatouny.github.io/msa-levitin-post/lab06/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/msa-levitin-post/lab06/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;6.1.1&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(a).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sort the array as a preprocessing step.&lt;/li&gt;
&lt;li&gt;Given a sorted array, and an adjacent pair $A[i],A[i+1]$, Could the distance between $A[i]$ and $A[j]$ where $j &amp;gt; i+1$, be strictly less?&lt;/li&gt;
&lt;li&gt;Use that to design your algorithm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # input: Array of integers
    # output: minimum distance between any pairs
    def ClosestDistance(A[0..n-1])

        # Transformation: Sort the array
        A.sort()

        # Initialize minimum distance to | A[0] - A[1] |
        minDistance = abs( A[0] - A[1] )

        # Iterate and compute the distance between adjacent elements
        for i in 1..n-1:
            currentDistance = | arr[i] - arr[i + 1] )

            # Update the minimum distance if the current distance is smaller
            if currentDistance &amp;lt; minDistance:
                minDistance = currentDistance

        # Return the minimum distance
        return minDistance
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;(b). Homework&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;6.1.2&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;6.2.4&lt;/h3&gt;
&lt;p&gt;We ask students whether $\Theta(n^3) - \Theta(n^3) + \Theta(n^3) = \Theta(n^3)$.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try to given a counter example where coefficients cancel each other.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We show it is not true in general true by the counter example $T_1(n) = n^3$, $T_2(n) = 2 n^3$, and $T_3(n) = n^3$.&lt;/p&gt;
&lt;p&gt;Analysis of the algorithm is left as a &lt;strong&gt;homework&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;6.2.5&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;6.3.5&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(a)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The idea is similar to binary search tree&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # input: non-empty graph, by its root
    # output: smallest element
    def find_smallestKey(root):
        node = root

        while node.left is not None
            current = current.left

        return current.key

    # input: non-empty graph, by its root
    # output: largest element
    def find_largestKey(root):
        node = root

        while node.right is not None:
            node = node.right

        return current.key

    # input: non-empty graph, by its root
    # output: difference between largest and smallest elements
    def range(root)
        return find_largestKey(root) - find_smallestKey(root)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Complexity is $2 \log n = \Theta( \log n )$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(b)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For the largest, Note we can step down on left children. Similarly for the smallest, we can step down on right children.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;False. Counter example from the solution manual.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /msa-levitin-post/lab06/ex-6.3.5_hu20487f532a374fff88820af30ef449ed_28306_3c809170eaddcc85d3055af618253bd4.webp 400w,
               /msa-levitin-post/lab06/ex-6.3.5_hu20487f532a374fff88820af30ef449ed_28306_62f817a1f4e49bb0d3f9b27f91423c2c.webp 760w,
               /msa-levitin-post/lab06/ex-6.3.5_hu20487f532a374fff88820af30ef449ed_28306_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/msa-levitin-post/lab06/ex-6.3.5_hu20487f532a374fff88820af30ef449ed_28306_3c809170eaddcc85d3055af618253bd4.webp&#34;
               width=&#34;760&#34;
               height=&#34;376&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;6.3.9&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Very similar to binary search tree&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like the previous previous exercise we traverse left-most and right-most nodes. The difference is we consider left key and right key of these nodes, respectively.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def range(root)
        leftMost = find_leftMostNode(root)
        rightMost = find_rightMostNode(root)

        return rightMost.rightKey - leftMost.leftKey
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;6.4.2&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;6.4.5&lt;/h3&gt;
&lt;p&gt;Students will be given the following subroutines.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # input: heap as an array, node by its index
    # output: None. Given heap is modified in-place
    def siftUp(heap, index):

        # cannot sift-up root node
        while index &amp;gt; 0:

            # parent of the node
            parentIndex = (index - 1) // 2
          
            # parental dominance is satisfied
            if heap[index] &amp;lt;= heap[parentIndex]
                break

            # if not satisfied, swap with parent
            swap(heap[index], heap[parentIndex])

            # set the cursor to the parent, and repeat
            index = parentIndex

    # input: heap as an array, node by its index
    # output: None. Given heap is modified in-place
    def siftDown(heap, index):

        # Children indices
        leftChild_index = (2 * index) + 1
        rightChild_index = (2 * index) + 2


        # Find the largest out of index, leftChild_index, and rightChild_index

        # Initially set
        largest = index

        # Check if the left child exists. if larger, update largest
        if leftChild_index &amp;lt; len(heap) and heap[leftChild_index] &amp;gt; heap[largest]
            largest = leftChild_index

        # Check if the right child exists. if larger, update largest
        if rightChild_index &amp;lt; len(heap) and heap[rightChild_index] &amp;gt; heap[largest]:
            largest = rightChild_index


        # If the largest element is one of the children.
        if largest != index:

            # swap the child with parent
            swap( heap[index], heap[largest] )

            # recursively heapify the smaller tree
            siftDown(heap, largest)


        # parental dominance is satisfied here, whether recursion is called or not, so we are done
        return
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;(a). Homework&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The approach is very similar to &lt;em&gt;Maximum Key Deletion&lt;/em&gt; in Levitin.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hint. Same logic of &lt;em&gt;b&lt;/em&gt; but notably restrict search of the min element on leaves, $H[ \lfloor n/2 \rfloor + 1 ], \dots H[n]$. Also since the minimum is in leaves, we will only call \verb#siftUp#.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  def delMin(heap H)
    # find the minimum node&#39;s index in leaves
    minElIndex = min(H[n/2 .. n])

    # swap the minimum with last node
    swapWithLast(minElIndex)

    # remove the last node
    removeLast()

    # sift-up the node in the index, previously containing the minimum
    siftUp(minElIndex )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;(b).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the element removal subroutine, given in the book. Call it &lt;code&gt;removeLast&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use the swap with last indexed node trick, given in the book. Call it &lt;code&gt;swapWithLast&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def findElementIndex(heap, target)
    for each element i of heap
        if i == target
            return i.index

def removeIndexNode(heap, index)

    # swap the indexed node with the last node
    swapWithLast(heap, index)

    # remove the last node
    removeLast(heap)

    # One of them must terminate in constant time
    siftDown(heap, index) # swapping downwards
    siftUp(heap, index) # swapping upwards

def removeElementNode(heap, target)

    # get the index of target by a linear scan
    index = findElementIndex(heap, target)

    # remove the element at found index
    removeIndexNode(heap, index)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is easy to verify, that one of &lt;code&gt;siftDown&lt;/code&gt; and &lt;code&gt;siftUp&lt;/code&gt; must terminate in $\mathcal{O}(1)$, given the structure properties of the heap.&lt;/p&gt;
&lt;p&gt;Complexity is $\mathcal{O}(n) + \mathcal{O}(1) + \mathcal{O}(1) + \mathcal{O}(\log n) = \mathcal{O}(n)$, respectively, of &lt;code&gt;findElementIndex&lt;/code&gt; and &lt;code&gt;removeIndexNode&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;section-8&#34; class=&#34;unnumbered&#34;&gt;6.5.1&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;section-9&#34; class=&#34;unnumbered&#34;&gt;6.5.9&lt;/h3&gt;
&lt;p&gt;We ask students how to compute the binary representation of a given number n.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def binaryRepresentation(n)
      
        # list storing binary representation
        # b[i] corresponds to ith digit
        binRep = []

        # by definition we know left-most digit is not 0
        # n becomes 0, only when last digit is computed
        while n != 0
          # fetch right-most digit
          b = n mod 2
          # eliminate right-most digit
          n = floor( n/2 )

          binRep.append(b)

        return binRep
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally we hint to them, algorithm &lt;code&gt;RightToLeftBinaryExponentiation&lt;/code&gt; in page 238 can be modified, so that it does not require list b(n) as an input.&lt;/p&gt;
&lt;h3 id=&#34;section-10&#34; class=&#34;unnumbered&#34;&gt;6.6.5&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;section-11&#34; class=&#34;unnumbered&#34;&gt;6.6.6&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;section-12&#34; class=&#34;unnumbered&#34;&gt;6.6.+&lt;/h3&gt;
&lt;p&gt;You are given an array of positive integers. Find the maximum element but without using &amp;gt; operator.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Think of a related algorithm that uses &amp;lt; operator&lt;/li&gt;
&lt;li&gt;Is the knowledge of minimum element useful in anyway?&lt;/li&gt;
&lt;li&gt;What if we transformed all elements to their negation?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def negationOfArray(A[0..n-1])
        for i in 0..n-1
            A[i] = -(A[i])

    def minElement(A[0..n-1])
        minElement = A[0]
        
        for i in 1..n-1
            if A[i] &amp;lt; minElement
                minElement = A[i]

        return minElement

    def maxElementByReduction(A[0..n-1])
        # transform
        negationOfArray(A)

        # conquer
        min = minElement(A)

        # solve the main problem
        return -(min)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 00</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset00/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset00/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;d&#34; class=&#34;unnumbered&#34;&gt;2(d)&lt;/h3&gt;
&lt;p&gt;Observe the prime factorization $21 = 3 \cdot 7$ and $50 = 2 \cdot 5 \cdot 5$. As they share no prime numbers, $gcd(21,50) = 1$.&lt;/p&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;4&lt;/h3&gt;
&lt;p&gt;We have $1 = 7(-3) + 11(2) = -21 + 22$, and $1 = 7(8) + 11(-5) = 56 - 56 - 56 - 56 - 56 - 56 - 55$. Generally $1 = 7(-3 + 11k) + 11(2 - 7k)$.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;7&lt;/h3&gt;
&lt;p&gt;$(\rightarrow)$ We are given $a = nk_0 + r$ and $b = nk_1 + r$. Thus $a - b = nk_0 - nk_1 = n(k_0 - k_1)$.&lt;/p&gt;
&lt;p&gt;$(\leftarrow)$ We have $a = nk_1 + r_1$, and $b = nk_2 + r_2$. Construct $a - b = n(k_1 - k_2) + (r_1 - r_2)$ and observe we get $0 \leq r_1 - r_2 \leq n-1$. If $r_1 - r_2 \neq 0$, Then $n$ won&amp;rsquo;t divide $a-b$ contradicting the given hypothesis.&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;10&lt;/h3&gt;
&lt;p&gt;We have $1 = 7(-3) + 11(2) = -21 + 22$, and $1 = 7(8) + 11(-5) = 56 - 56 - 56 - 56 - 56 - 56 - 55$. Generally $1 = 7(-3 + 11k) + 11(2 - 7k)$.&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;11&lt;/h3&gt;
&lt;p&gt;Observe the form $ax \mod n = 1$ is equivalent to $(a)x + (-n)k = 1$.&lt;/p&gt;
&lt;p&gt;$(\leftarrow)$ Given $gcd(a,n) = 1$, It is easy to show $gcd(a, (-1)n) = 1$ as any negative divisor won&amp;rsquo;t ever be the $gcd$. By &lt;em&gt;theorem 0.2&lt;/em&gt; there exists $x_0$ and $k_0$ such that $(a)x_0 + (-n)k_0 = gcd(a,n) = 1$.&lt;/p&gt;
&lt;p&gt;$(\rightarrow)$ We have $x_0$ and $k_0$ which satisfy $(a)(x_0) + (n)(-k_0) = 1$. But $1$ is the smallest positive integer satisfying it. It follows $1 = gcd(a,n) = d$.&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;13&lt;/h3&gt;
&lt;p&gt;By definition $gcd(m,n) = 1$ and hence we get $m(s_0) + n(t_0) = 1$. Multiplying both sides by $r$, We get $m(s_0 \cdot r) + n(t_0 \cdot r) = r$.&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;20&lt;/h3&gt;
&lt;p&gt;Assume for contradiction that $p_1 p_2 \dots p_n + 1$ is divisable by $p_i$. Then&lt;/p&gt;
&lt;p&gt;\begin{aligned}
\frac{\displaystyle{p_1 p_2 \dots p_n + 1}}{\displaystyle{p_i}} &amp;amp;= \frac{\displaystyle{p_i k_0}}{\displaystyle{p_i}} \\
\frac{\displaystyle{p_1 \dots p_n}}{\displaystyle{p_i}} + \frac{\displaystyle{1}}{\displaystyle{p_i}} &amp;amp;= k_0 \\
\frac{\displaystyle{p_1 \dots p_n}}{\displaystyle{p_i}} - k_0 &amp;amp;= \frac{\displaystyle{1}}{\displaystyle{p_i}}
\end{aligned}&lt;/p&gt;
&lt;p&gt;$L.H.S$ is clearly an integer implying $\frac{\displaystyle{1}}{\displaystyle{p_i}}$ is an integer also. Contradiction.&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;28&lt;/h3&gt;
&lt;p&gt;$2^n \cdot 3^{2n} = 18^n$. Since $18 \mod 17 = 1$, We get $18^2 \mod 17 = 1 \cdot 1 \mod 17 = 1$. Generally $18^n \mod 17 = 1$, and finally $18^n - 1 \mod 17 = 1 - 1 \mod 17 = 0$.&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;33&lt;/h3&gt;
&lt;p&gt;We prove a relaxed version of the problem and hence assume $a$ is positive.&lt;/p&gt;
&lt;p&gt;We show the contrapositive. Consider $S$ which does not contain every integer $z \geq a$. Then there&amp;rsquo;s some integer $z_0 \geq a$ where $z_0 \notin S$. In other words the set $R ={ z ; | ; z \geq a \wedge z \notin S }$ is not empty. By the well-ordering principle $R$ has a smallest member, Call it $z_s$. Note $z_s \neq a$ So we can safely take $z_s - 1 \in S$. Therefore it is NOT the case that if integer $z \in S$ then $z+1 \in S$ by the counter-example we constructed.&lt;/p&gt;
&lt;p&gt;For a general version of any integer $a$, We would partition set $R$ to a finite subset of non-positives and another subset of positives. Then we consider the smallest of positives by well-ordering, and smallest of non-positives, and take the minimum of both. Recall any finite set has a smallest member.&lt;/p&gt;
&lt;h3 id=&#34;section-8&#34; class=&#34;unnumbered&#34;&gt;35&lt;/h3&gt;
&lt;p&gt;Note $(n+3)^3 = n^3 + 9(n^2 + 3n + 3)$ by trivial algebraic operations.&lt;/p&gt;
&lt;p&gt;Base. $n = 1$. $n^3 + (n+1)^3 + (n+2)^3 = 1 + 8 + 27 = 36 = 9(4)$.&lt;/p&gt;
&lt;p&gt;Hypo. $n^3 + (n+1)^3 + (n+2)^3 = 9k_0$&lt;/p&gt;
&lt;p&gt;Step.
$(n+1)^3 + (n+2)^3 + (n+3)^3 = n^3 + (n+1)^3 + (n+2)^3 + 9(n^2 + 3n + 3) = 9k_0 + 9(n^2 + 3n + 3) = 9(k_0 + n^2 + 3n +3)$&lt;/p&gt;
&lt;h3 id=&#34;section-9&#34; class=&#34;unnumbered&#34;&gt;57&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Let $a_0, a_1 \in A$ where
$(\beta \alpha)(a_0) = (\beta \alpha)(a_1)$. In other notation, $\beta(\alpha(a_0)) = \beta(\alpha(a_1))$. Since $\beta$ is one-to-one we get $\alpha(a_0) = \alpha(a_1)$. Since $\alpha$ is one-to-one we get $a_0 = a_1$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Let $c \in C$. Since $\beta$ is onto we get $\beta(b_0) = c$. Since $\alpha$ is onto we get $\alpha(a_0) = b_0$. Thus $\beta \alpha (a_0) = c$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; For the sake of brevity we highlight that fact the inverse $a^{-1}$ is a well-defined function, i.e maps each element of the domain to exactly one element of the range, as $a$ is both one-to-one and onto.&lt;/p&gt;
&lt;h3 id=&#34;section-10&#34; class=&#34;unnumbered&#34;&gt;58&lt;/h3&gt;
&lt;p&gt;Reflexive. $a - a = 0$.&lt;/p&gt;
&lt;p&gt;Symmetry. Given $a - b = z$ is an integer, Trivially $b - a = -z$ is an integer also.&lt;/p&gt;
&lt;p&gt;Transitivity. Given $a - b = z_0$ and $b - c = z_1$, Trivially $(a - b) + (b - c) = a - c = z_0 + z_0$ is an integer also.&lt;/p&gt;
&lt;p&gt;A Class has numbers of the same decimal fraction.&lt;/p&gt;
&lt;h3 id=&#34;section-11&#34; class=&#34;unnumbered&#34;&gt;59&lt;/h3&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;h3 id=&#34;section-12&#34; class=&#34;unnumbered&#34;&gt;63&lt;/h3&gt;
&lt;p&gt;$3^{100} \mod 10$ and $2^100 \mod 10$ respectively.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chapter 01</title>
      <link>https://mostafatouny.github.io/siniora-algebra-post/pset01/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/siniora-algebra-post/pset01/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;problems&#34; class=&#34;unnumbered&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;2&#34;&gt;2&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;R_0&lt;/th&gt;
&lt;th&gt;R_120&lt;/th&gt;
&lt;th&gt;R_240&lt;/th&gt;
&lt;th&gt;D&lt;/th&gt;
&lt;th&gt;D&#39;&lt;/th&gt;
&lt;th&gt;D&#39;&#39;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;R_0&lt;/td&gt;
&lt;td&gt;R_0&lt;/td&gt;
&lt;td&gt;R_120&lt;/td&gt;
&lt;td&gt;R_240&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;D&#39;&lt;/td&gt;
&lt;td&gt;D&#39;&#39;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R_120&lt;/td&gt;
&lt;td&gt;R_120&lt;/td&gt;
&lt;td&gt;R_240&lt;/td&gt;
&lt;td&gt;R_0&lt;/td&gt;
&lt;td&gt;D&#39;&#39;&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;D&#39;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R_240&lt;/td&gt;
&lt;td&gt;R_240&lt;/td&gt;
&lt;td&gt;R_0&lt;/td&gt;
&lt;td&gt;R_120&lt;/td&gt;
&lt;td&gt;D&#39;&lt;/td&gt;
&lt;td&gt;D&#39;&#39;&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;D&#39;&lt;/td&gt;
&lt;td&gt;D&#39;&#39;&lt;/td&gt;
&lt;td&gt;R_0&lt;/td&gt;
&lt;td&gt;R_120&lt;/td&gt;
&lt;td&gt;R_240&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&#39;&lt;/td&gt;
&lt;td&gt;D&#39;&lt;/td&gt;
&lt;td&gt;D&#39;&#39;&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;R_240&lt;/td&gt;
&lt;td&gt;R_0&lt;/td&gt;
&lt;td&gt;R_120&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&#39;&#39;&lt;/td&gt;
&lt;td&gt;D&#39;&#39;&lt;/td&gt;
&lt;td&gt;R_0&lt;/td&gt;
&lt;td&gt;D&#39;&lt;/td&gt;
&lt;td&gt;R_120&lt;/td&gt;
&lt;td&gt;R_240&lt;/td&gt;
&lt;td&gt;R_0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Two pictures.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./examples.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Not abelian.&lt;/p&gt;
&lt;h3 id=&#34;3&#34;&gt;3&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;a.&lt;/strong&gt; $V$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b.&lt;/strong&gt; $R_{270}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c.&lt;/strong&gt; $R_0$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;d.&lt;/strong&gt; $R_0$, $R_{180}$, $H$, $V$, $D$, $D&amp;rsquo;$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;e.&lt;/strong&gt; None.&lt;/p&gt;
&lt;h3 id=&#34;5&#34;&gt;5&lt;/h3&gt;
&lt;p&gt;We follow our intuition and generalize the cases of $D_4$ and $D_3$ with no formal   argumentation.&lt;/p&gt;
&lt;p&gt;For both cases, Elements include rotations $\nfrac{i}{n} 360$ for $i = 1, 2, \dots,  n-1$. Counts $n$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Even case only.&lt;/strong&gt; Flips about the $ith$ diagonal (counts $n/2$), and Flips    about the $ith$ axis (counts $n/2$)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Odd case only.&lt;/strong&gt; Flips about the $ith$ diagonal (counts $n$).&lt;/p&gt;
&lt;p&gt;$D_n$ is going to have a total of $2n$ elements; This fact was mentioned in the      textbook though.&lt;/p&gt;
&lt;h3 id=&#34;11&#34;&gt;11&lt;/h3&gt;
&lt;p&gt;Notation. We donate &lt;em&gt;Rotation&lt;/em&gt; by &lt;em&gt;T&lt;/em&gt; and &lt;em&gt;Reflection&lt;/em&gt; by &lt;em&gt;F&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Lemma. Through Caylay table in page 33, $TT = T$, $FF = T$, $TF = F$, and $FT = F$.  In other words $X^2 = T$, and $XY = F$ if $X \neq Y$.&lt;/p&gt;
&lt;p&gt;Theorem. Observe we can re-structure the given composed function as $a^2b^2b^2 ac    c^2 c^2 a^2 ac = TTTacTTTac = (TTTac)^2 = T$.&lt;/p&gt;
&lt;p&gt;Therefore, Regardless of the choices of $a, b, c$, The given function is always a    &lt;em&gt;rotation&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;13&#34;&gt;13&lt;/h3&gt;
&lt;p&gt;$D = H R_{90} = R_{90} V$.&lt;/p&gt;
&lt;h3 id=&#34;21&#34;&gt;21&lt;/h3&gt;
&lt;p&gt;$X \neq H, V, D, D&amp;rsquo;, R_0, R_{180}$, As otherwise $X^2 = R_0$ and then $Y = R_{90}$.  For either of the remaining two cases $X = R_{90}$ or $X = R_{270}$, Necessarily $Y  = R_{270}$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lab 01</title>
      <link>https://mostafatouny.github.io/msa-levitin-post/lab01/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/msa-levitin-post/lab01/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;1.1.4&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are given a square number $n$. Given some integer $k$, How can we verify it is the root?&lt;/li&gt;
&lt;li&gt;Follow the exhaustive search strategy, to find the root of $n$.&lt;/li&gt;
&lt;li&gt;You are given a real number $r$. Given some integer $k$, How can we verify it is the floor of $r$?&lt;/li&gt;
&lt;li&gt;Follow the exhaustive search strategy, to find the floor of $n$.&lt;/li&gt;
&lt;li&gt;Combine all previous hints to find a unique definition of $\lfloor \sqrt{n} \rfloor$.&lt;/li&gt;
&lt;li&gt;Follow the exhaustive search strategy, to solve the main problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      for i in n-1 .. 0
        if (i)^2 &amp;lt;= n
          return i
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;1.1.8&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try this case on concrete examples like $m = 2$ and $n = 3$.&lt;/li&gt;
&lt;li&gt;Why $m \mod n = m$ when $m &amp;lt; n$?&lt;/li&gt;
&lt;li&gt;Recall the definition of mod. What are the possible ranges of $x \mod n$ for any integer $x$?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It shall swap them as $r = m \mod n = m$ when $m &amp;lt; n$.&lt;/p&gt;
&lt;p&gt;Only once. Given $m &amp;gt; n$, Necessarily $n &amp;gt; m \mod n$.&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;1.2.5&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convert a concrete decimal number to binary. Observe how the right most digit from the binary representation is obtained.&lt;/li&gt;
&lt;li&gt;Given a binary representation, What is the number we divide on it,
so that the quotient eliminate the right most digit?&lt;/li&gt;
&lt;li&gt;Follow the &lt;em&gt;Decrease and Conquer&lt;/em&gt; strategy, with the above two hints, to solve the problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    DecToBin(n):
      # input: integer n
      # output: binary representation as a list

      # binary representation
      l = [ ]

      while n != 0:
        # kth digit from right to left
        b.appendLeft( n % 2 )

        # remove the rightmost digit
        # division output is an integer
        n = n/2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;1.2.9&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Hint&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are there duplicated computations?&lt;/li&gt;
&lt;li&gt;Are there pairs tested twice?&lt;/li&gt;
&lt;li&gt;Observe $| a - b | = | b - a |$.&lt;/li&gt;
&lt;li&gt;If we checked all elements with $A[i]$, Do we need to test $A[j]$ with $A[i]$?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MinDistance( A ):
      # input: array of size n
      # output: minimum distance between two distinct elements

      dmin = infinity
      for i in 0 .. n-1:
        for j in i+1 .. n-1:
          dis = | A[i] - A[j] |
          if dis &amp;lt; dmin:
            dmin = dis
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;1.3.1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if $A[i] == A[j]$ which index shall be counted? What can we conclude about $S$?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a&lt;/strong&gt;. Tedious to typeset.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b&lt;/strong&gt;. No. Observe counting only happens when strictly $i &amp;lt; j$. If $A[i] == A[j]$ then the code counts $A[i]$ not $A[j]$. Therefore $A[i]$&lt;/p&gt;
&lt;p&gt;shall succeed $A[j]$. In fact equal cells are reversed in the sorted array.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c&lt;/strong&gt;. No. It does not modify array $A$ but output is a different array $S$.&lt;/p&gt;
&lt;h2 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;1.4.2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Hint&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For ascendingly ordered array $A$, Is it possible for the target value $t$ to exist in $A[i..n-1]$ given the fact $t &amp;gt; A[i]$?&lt;/li&gt;
&lt;li&gt;Use the above hint to prune the search space.&lt;/li&gt;
&lt;li&gt;Which index of the array you think shall prune the greatest search space.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For target value $t$:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a&lt;/strong&gt;. Access some element $x$ in the array. If $t \neq x$, We can ignore searching in the right/left side of $x$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b&lt;/strong&gt;. While linear scanning, Terminate the algorithm earlier once some $A[i] &amp;gt; t$.&lt;/p&gt;
&lt;h2 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;1.4.10&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Hints&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is it possible for two strings to be anagrams in case they different
lengths?&lt;/li&gt;
&lt;li&gt;Is it possible for two strings to be anagrams if one of them has a
character not present in the other?&lt;/li&gt;
&lt;li&gt;You can convert a character to its corresponding ascii number. Use
that for a cheaper data strucutre.&lt;/li&gt;
&lt;li&gt;the ascii number corresponds to an index.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Two strings are &lt;em&gt;anagrams&lt;/em&gt; if and only if they have the same count of
characters.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      AreStringsAnagrams(A, B):
        # input two strings
        # output True if anagrams and False otherwise
        
        # if lengths are not the same, then not anagrams
        if length(A) != length(B):
          return False

        # initialize characters counts to zeros for both strings
        A_chCount = B_chCount = [ 0 ] * 26

        # Count characters in both strings
        for ch in A:
          A_chCount[ int(ch) ] = A_chCount[ int(ch) ] + 1

        for ch in B:
          B_chCount[ int(ch) ] = B_chCount[ int(ch) ] + 1

        # Anagrams if and only if characters count is exactly the same
        return A_chCount == B_chCount
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lab 02</title>
      <link>https://mostafatouny.github.io/msa-levitin-post/lab02/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/msa-levitin-post/lab02/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34; class=&#34;unnumbered&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;section&#34; class=&#34;unnumbered&#34;&gt;2.1.1&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(a)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def sumOfArrayNumbers(A[0 .. n-1])
      sum = 0
      for i in 0..n-1
        sum = sum + A[i]
      return sum
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;n; Summation; no.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(b)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def factorial(n)
      res = 1
      for i in n..1
        res = res * i
      return res
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1; Multiplication; yes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(c)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Algorithm is in page 61.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def maxElementInArray(A[0..n-1])
      max = A[0]
      for i in 1..n-1
        if A[i] &amp;gt; max
          max = A[i]
      return max
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;n; Comparison; no.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(d)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    def gcd(m,n)
      while n != 0
        r = m mod n
        m = n
        n = r
      return m
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2; mod operation; yes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(e)&lt;/strong&gt; Homework.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(f)&lt;/strong&gt; Homework.&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34; class=&#34;unnumbered&#34;&gt;2.1.3&lt;/h3&gt;
&lt;p&gt;Yes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Classical Search&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Worst-case is $\mathcal{O}(n)$.&lt;/li&gt;
&lt;li&gt;Average-case is $1 \cdot \frac{\displaystyle{1}}{\displaystyle{n}} + \dots + n \cdot \frac{\displaystyle{1}}{\displaystyle{n}} = \frac{\displaystyle{1}}{\displaystyle{n}} (1 + \dots + n) = \frac{\displaystyle{1}}{\displaystyle{n}} \frac{\displaystyle{n(n+1)}}{\displaystyle{2}} = \frac{\displaystyle{n+1}}{\displaystyle{2}} = \mathcal{O}(n)$.&lt;/li&gt;
&lt;li&gt;Best-case is $\mathcal{O}(1)$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Varied Search&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Worst-case, Average-case, and Best-case, are all $\Omega(n)$. For any determinstic algorithm not reading all the $n$ cells, We can construct a counter-example input.&lt;/p&gt;
&lt;p&gt;P.S. Big-Oh is used to upper-bound complexity, showing an algorithm is efficient. So it can&amp;rsquo;t be used here while we are showing the inefficiency.&lt;/p&gt;
&lt;h3 id=&#34;section-2&#34; class=&#34;unnumbered&#34;&gt;2.2.5&lt;/h3&gt;
&lt;p&gt;$5 \lg(n+100)^{10}, \ln^2 n, n^{1/3}, 0.001n^4 + 3n^2 + 1, 3^n, 2^{2n}, (n-2)!$&lt;/p&gt;
&lt;h3 id=&#34;section-3&#34; class=&#34;unnumbered&#34;&gt;2.2.12&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34; class=&#34;unnumbered&#34;&gt;2.3.4&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(a)&lt;/strong&gt; $s(n)&lt;em&gt;{i=1}^n = \sum&lt;/em&gt;{i=1}^n i*i$, The sum of squares up to $n$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(b)&lt;/strong&gt; Multiplication.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(c)&lt;/strong&gt; $\sum_{i=1}^n 1 = n(1) = n$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(d)&lt;/strong&gt; $\mathcal{O}(n)$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(e)&lt;/strong&gt; &lt;strong&gt;Homework&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34; class=&#34;unnumbered&#34;&gt;2.3.6&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(a)&lt;/strong&gt; &lt;strong&gt;Homework&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(b)&lt;/strong&gt; Comparison.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(c)&lt;/strong&gt;
$\sum_{i=0}^{n-2} \sum_{j=i+1}^{n-1} 1 = \sum_{i=0}^{n-2} (n-1) - (i+1) + 1 = \sum_{i=0}^{n-2} n-i-1 = (n+1) + n + \dots + (n - (n-2) - 1) = \frac{\displaystyle{n(n+1)}}{\displaystyle{2}}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(d)&lt;/strong&gt; $\mathcal{O}(n^2)$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(e)&lt;/strong&gt; &lt;strong&gt;Homework&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34; class=&#34;unnumbered&#34;&gt;2.4.3&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(a)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;\begin{aligned}
S(n) &amp;amp;= S(n-1) + 2 \
&amp;amp;= S(n-2) + 4 \
&amp;amp;\dots \
&amp;amp;= S(n-(n-1)) + 2(n-1) \
&amp;amp;= 0 + 2n - 2
\end{aligned}&lt;/p&gt;
&lt;p&gt;Hence $\mathcal{O}(n)$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(b)&lt;/strong&gt; &lt;strong&gt;Homework&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;section-7&#34; class=&#34;unnumbered&#34;&gt;2.4.9&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;(a)&lt;/strong&gt; &lt;strong&gt;Homework&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(b)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;\begin{aligned}
S(n) &amp;amp;= S(n-1) + 1 \
&amp;amp;= S(n-2) + 2 \
&amp;amp;\dots \
&amp;amp;= S(n-(n-1)) + n-1 \
&amp;amp;= 1 + n - 1
\end{aligned}&lt;/p&gt;
&lt;p&gt;Hence $\mathcal{O}(n)$&lt;/p&gt;
&lt;h2 id=&#34;section-8&#34; class=&#34;unnumbered&#34;&gt;2.5.10&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;section-9&#34; class=&#34;unnumbered&#34;&gt;2.5.12&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;section-10&#34; class=&#34;unnumbered&#34;&gt;2.6.1&lt;/h2&gt;
&lt;p&gt;No count of the comparison basic operation $A[j] &amp;gt; v$ in case it is $False$.&lt;/p&gt;
&lt;p&gt;Fix by adding &lt;code&gt;if j &amp;gt;= 0 then count = count+1&lt;/code&gt; after the end of while.&lt;/p&gt;
&lt;h2 id=&#34;section-11&#34; class=&#34;unnumbered&#34;&gt;2.6.10&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Calculus</title>
      <link>https://mostafatouny.github.io/post/rog-adam-ex/</link>
      <pubDate>Fri, 06 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/rog-adam-ex/</guid>
      <description>&lt;h2 id=&#34;materials&#34;&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Book: Calculus: Early Transcendentals by Rogawski &amp;amp; Adams, 3rd ed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Section&lt;/th&gt;
&lt;th&gt;Source&lt;/th&gt;
&lt;th&gt;Solution&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ch. 12, Sec. 01&lt;/td&gt;
&lt;td&gt;Page 635&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch12-sec01_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/rog-adam-post/ch12-sec01&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch. 12, Sec. 02&lt;/td&gt;
&lt;td&gt;Page 644&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch12-sec02_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/rog-adam-post/ch12-sec02&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ch. 12, Sec. 03&lt;/td&gt;
&lt;td&gt;Page 652&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./ch12-sec03_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/rog-adam-post/ch12-sec03&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Ch.12, Sec.3</title>
      <link>https://mostafatouny.github.io/rog-adam-post/ch12-sec03/</link>
      <pubDate>Fri, 06 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/rog-adam-post/ch12-sec03/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex-390&#34;&gt;Ex. 3.90&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-3.90.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;\begin{align*}
c^2 &amp;amp;= (a \sin \theta)^2 + (b - a \cos \theta)^2 \\
&amp;amp;= a^2 \sin^2 \theta + b^2 + a^2 \cos^2 \theta - 2 ab \cos \theta \\
&amp;amp;= a^2 (\sin^2 \theta + \cos^2 \theta ) + b^2 - 2ab \cos \theta \\
&amp;amp;= a^2 + b^2 - 2ab \cos \theta
\end{align*}&lt;/p&gt;
&lt;h3 id=&#34;ex-391&#34;&gt;Ex. 3.91&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-3.91.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(a)&lt;/strong&gt;. The goal is $||xv + w||^2 = ||v||^2 x^2 (2v \cdot w)x + ||w||^2$. Then
\begin{align*}
L.H.S &amp;amp;= (xv + w) \cdot (xv + w) \\
&amp;amp;= xv \cdot xv + 2xv \cdot w + w \cdot w \\
&amp;amp;= x^2 (v \cdot v) + (2v \cdot w)x + ||w||^2 \\
&amp;amp;= ||v||^2 x^2 + (2v \cdot w)x + ||w||^2 \\
&amp;amp;= R.H.S
\end{align*}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(b)&lt;/strong&gt;. We know $f(x) = ax^2 + bx + c \geq 0$. Geometrically a parabola which  does not intersect the x-axis at two points. So there are no two distinct real       solutions, and hence the discriminent $b^2 - 4ac \leq 0$.&lt;/p&gt;
&lt;h3 id=&#34;ex-392&#34;&gt;Ex. 3.92&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-3.92.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Observe $(v+w) \cdot (v+w) = (v+w) \cdot v + (v+w) \cdot w$, So hint is proven.
\begin{align*}
L.H.S = ||v+w||^2 &amp;amp;\leq ||v+w|| ; ||v|| + ||v+w|| ; ||w|| \\
&amp;amp;= ||v+w|| (||v|| + ||w||)
\end{align*}
Thus, $||v+w|| \leq ||v|| + ||w||$.&lt;/p&gt;
&lt;h3 id=&#34;ex-393&#34;&gt;Ex. 3.93&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-3.93.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Recall the &lt;em&gt;cosine additition formula&lt;/em&gt; is $\cos(a-b) = \cos a \cos b + \sin a \sin b$.
\begin{align*}
v &amp;amp;\cdot w \\
&amp;amp;= ||v|| (\cos \theta_1, \sin \theta_1) \cdot ||w|| (\cos \theta_2, \sin       \theta_2) \\
&amp;amp;= ||v|| \cdot ||w|| \left[ (\cos \theta_1, \sin \theta_1) \cdot (\cos         \theta_2, \sin \theta_2) \right] \\
&amp;amp;= ||v|| \cdot ||w|| \left[ \cos \theta_2 \cos \theta_1 + \sin \theta_2 \sin   \theta_1 \right] \\
&amp;amp;= ||v|| \cdot ||w|| \cos(\theta_2 - \theta_1) \\
&amp;amp;= ||v|| \cdot ||w|| \cos(\theta)    \text{   given } \theta = \theta_2 -       \theta_1
\end{align*}&lt;/p&gt;
&lt;h3 id=&#34;ex-394&#34;&gt;Ex. 3.94&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-3.94.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;It suffices to show $\cos \theta = \nfrac{V \cdot V_\theta}{||V|| \cdot ||V_\theta||}$. But $||V|| = ||V_\theta||$, Then
\begin{align*}
R.H.S &amp;amp;= \nfrac{(x^2 \cos \theta + xy \sin \theta)+(-xy \sin \theta + y^2 \cos   \theta)}{||V||^2} \\
&amp;amp;= \nfrac{\cos \theta (x^2 + y^2)}{||V||^2} \\
&amp;amp;= \nfrac{\cos \theta  ||V||^2}{||V||^2} \\
&amp;amp;= L.H.S
\end{align*}&lt;/p&gt;
&lt;h3 id=&#34;ex-395&#34;&gt;Ex. 3.95&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-3.95.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Let $V_x$, $V_y$, $V_z$ be projected vectors of $V$ on $x$, $y$, and $z$ axis. Then:
\begin{align*}
\cos \alpha &amp;amp;= ||V_x|| / ||V|| \\
\cos \beta  &amp;amp;= ||V_y|| / ||V|| \\
\cos \gamma &amp;amp;= ||V_z|| / ||V||
\end{align*}
It follows
\begin{align*}
\cos^2 \alpha &amp;amp;+ \cos^2 \beta + \cos^2 \gamma \\
&amp;amp;= (||V_x|| / ||V||)^2 + (||V_y|| / ||V||)^2 + (||V_z|| / ||V||)^2 \\
&amp;amp;= \nfrac{ ||V_x||^2 + ||V_y||^2 + ||V_z||^2 }{ ||V||^2 } \\
&amp;amp; = \nfrac{ ||V_{x,y}||^2 + ||V_z||^2 }{ ||V||^2 } \textit{  (Pythagorean Theorem)} \\
&amp;amp; = \nfrac{ ||V||^2 }{ ||V||^2 } \textit{  (Pythagorean Theorem)} \\
&amp;amp; = 1
\end{align*}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ch.12, Sec.2</title>
      <link>https://mostafatouny.github.io/rog-adam-post/ch12-sec02/</link>
      <pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/rog-adam-post/ch12-sec02/</guid>
      <description>&lt;p&gt;$\newcommand{\nfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex-260&#34;&gt;Ex. 2.60&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-2.60.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;\begin{align*}
L &amp;amp;= P_0 + tv \\
&amp;amp;= (x_0,y_0,z_0) + t (a,b,c)
\end{align*}
\begin{align*}
x = x_0 + ta \rightarrow t = \nfrac{x-x_0}{a} \\
y = y_0 + tb \rightarrow t = \nfrac{y-y_0}{b} \\
z = z_0 + tc \rightarrow t = \nfrac{z-z_0}{c}
\end{align*}&lt;/p&gt;
&lt;h3 id=&#34;ex-266&#34;&gt;Ex. 2.66&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-2.66.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Be definition of a slope, We have two points on the line: $(x_0, y_0)$ and $(x_0 +   1, y_0 + m)$.&lt;/p&gt;
&lt;p&gt;By page 640, We take the directional vector: $v = (x_0 + 1, y_0 + m) - (x_0, y_0) =  (1,m)$.&lt;/p&gt;
&lt;p&gt;Thus,
\begin{align*}
x = x_0 + (1)t \rightarrow t = x - x_0 \\
y = y_0 + (m)t \rightarrow t = \nfrac{y - y_0}{m}
\end{align*}
Hence, The symmetric form is satisfied.&lt;/p&gt;
&lt;h3 id=&#34;ex-267&#34;&gt;Ex. 2.67&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-2.67.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;\begin{align*}
\vec{OA}  &amp;amp;= v \\
\vec{OA&amp;rsquo;} &amp;amp;= \nfrac{1}{2} (w-u) + u \\
&amp;amp;= \nfrac{1}{2} (w+u) \\
\vec{OA&amp;rsquo;} - \vec{OA} &amp;amp;= \nfrac{1}{2} w + \nfrac{1}{2} u - v
\end{align*}
Taking $2/3$ of it: $\nfrac{2}{3} (\vec{OA&amp;rsquo;} - \vec{OA}) = \nfrac{1}{3} w +          \nfrac{1}{3} u - \nfrac{2}{3} v$.&lt;/p&gt;
&lt;p&gt;$P$ is the terminal of vector: $v + \nfrac{1}{3} w + \nfrac{1}{3} u - \nfrac{2}{3} v = \nfrac{1}{3} w + \nfrac{1}{3} u + \nfrac{1}{3} v$.&lt;/p&gt;
&lt;p&gt;Symmetrically, Taking $\nfrac{2}{3}$ of segments $BB&amp;rsquo;$ and $CC&amp;rsquo;$ yields the vector   $\nfrac{1}{3} w + \nfrac{1}{3} u + \nfrac{1}{3} v$, and thus point $P$ lies on the   other two medians as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ch.12, Sec.1</title>
      <link>https://mostafatouny.github.io/rog-adam-post/ch12-sec01/</link>
      <pubDate>Mon, 28 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/rog-adam-post/ch12-sec01/</guid>
      <description>&lt;p&gt;$\newcommand{\ddfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex-166&#34;&gt;Ex. 1.66&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-1.66-f.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-1.66.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./my-0.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
||L_3|| &amp;amp;= ||L_2|| \sin \theta_2 \\
||L_4|| &amp;amp;= ||L_6|| \sin \theta_1 \\
||L_5|| &amp;amp;= ||L_3|| + ||L_4|| \\
||L_7|| &amp;amp;= \sqrt{(L_2)^2 - (L_3)^2} \\
||L_7|| &amp;amp;= ||L_6|| \cos \theta_1 \rightarrow ||L_6|| = ||L_7|| / \cos \theta_1 \\
||L_8|| &amp;amp;= ||L_1|| - ||L_6|| \\
||L_9|| &amp;amp;= ||L_8|| \cos \theta_1
\end{aligned}
$$
Components are $\langle ||L_5||, ||L_9|| \rangle$.&lt;/p&gt;
&lt;h3 id=&#34;ex-169&#34;&gt;Ex. 1.69&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-1.69.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Observe $\overline{AC} = ||v+w||$ and $\overline{BD} = ||v-w||$.&lt;/p&gt;
&lt;p&gt;By vector algebra,
$$
\begin{aligned}
w + \frac{1}{2} (v-w) &amp;amp;= \frac{1}{2} (v+w) \\
\text{point of BD midpoint} &amp;amp;= \text{point of AC midpoint}
\end{aligned}
$$
Hence bisects each other.&lt;/p&gt;
&lt;h3 id=&#34;ex-170&#34;&gt;Ex. 1.70&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-1.70.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./my-1.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Observe that we can construct the midpoint between the ends of two vectors by $\frac{1}{2} (v-u)$.&lt;/p&gt;
&lt;p&gt;The midpoint of $H$ is $\frac{1}{2} [(v + \frac{1}{2} w) - \frac{1}{2} u] + \frac{1}{2} u = \frac{1}{2} v + \frac{1}{4} w + \frac{1}{4} u$.&lt;/p&gt;
&lt;p&gt;The midpoint of $V$ is $\frac{1}{2} [(u + \frac{1}{2} z) - \frac{1}{2} v] + \frac{1}{2} v = \frac{1}{2} u + \frac{1}{4} z + \frac{1}{4} v$&lt;/p&gt;
&lt;p&gt;Suffices to show $2u + v + z = 2v + w + u$ which reduces to $u+z = v+w$. By our diagram both yields exactly the same vector.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note.&lt;/strong&gt; I solved the problem without seeing the hint.&lt;/p&gt;
&lt;h3 id=&#34;ex-171&#34;&gt;Ex. 1.71&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-1.71.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;vectors $v$ and $w$ are perpendicular if and only if
$$
\begin{aligned}
||w-v||^2 &amp;amp;= ||v||^2 + ||w||^2 \\
||\langle c-a, d-b \rangle||^2 &amp;amp;= a^2 +b^2 + c^2 + d^2 \\
(c-a)^2 + (d-b)^2 &amp;amp;= \\
c^2 + a^2 - 2ac + d^2 + b^2 - 2bd &amp;amp;= \\
-2ac - 2bd &amp;amp;= 0 \\
ac - bd &amp;amp;=
\end{aligned}
$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ch. 07, Sec. A</title>
      <link>https://mostafatouny.github.io/axler-linear-post/ch07-seca/</link>
      <pubDate>Sun, 13 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/axler-linear-post/ch07-seca/</guid>
      <description>&lt;p&gt;$\newcommand{\ddfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex-11&#34;&gt;Ex. 11&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-11.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;$(\rightarrow)$ Observe $v = v_U + v_{U^\bot}$ and $w = w_U + w_{U^\bot}$. Clearly,
\begin{aligned}
\langle Pv, w \rangle &amp;amp;= \langle v_U, w \rangle \\
&amp;amp;= \langle v_U, w_{U^\bot} \rangle + \langle v_U, w_U \rangle \\
&amp;amp;= 0 + \langle v_U, w_U \rangle \\
\langle v, Pw \rangle &amp;amp;= \langle v_{U^\bot}, w_U \rangle + \langle v_U, w_U      \rangle \\
&amp;amp;= 0 + \langle v_U, w_U \rangle
\end{aligned}&lt;/p&gt;
&lt;p&gt;$(\leftarrow)$ For $U = range \ T$ and $v = v_U + v_{U^\bot}$, we show $Tv = v_U$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt; $Tv_U = v_U$.&lt;/p&gt;
&lt;p&gt;Since $v_U \in range \ T$, by definition we know $Tv_0 = v_U$. So $T(Tv_0) = Tv_0$ as $T^2 = T$, which concludes $Tv_U = v_U$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt; $Tv_{U^\bot} = 0$.&lt;/p&gt;
&lt;p&gt;By definition we know $v_{U^\bot} \in (range \ T)^\bot$. But given $T$ is &lt;em&gt;self-adjoint&lt;/em&gt;, $(range \ T)^\bot = null \ T$. So $v_{U^\bot} \in null \ T$.&lt;/p&gt;
&lt;p&gt;In conclusion, $Tv = Tv_U + Tv_{U^\bot} = v_U + 0 = v_U$.&lt;/p&gt;
&lt;h3 id=&#34;ex-17&#34;&gt;Ex. 17&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-17.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact.&lt;/strong&gt; For $normal \ T$, $range \ T$ = $range \ T^*$ and $null \ T = null \ T^*$. For any $T$, $range \ T = (null \ T^*)^\bot$. See &lt;em&gt;ex.16&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt; For $normal \ T$, $range \ T \cap null \ T = {0}$.&lt;/p&gt;
&lt;p&gt;Observe $L.H.S = (null \ T^*)^\bot \cap (null \ T^*)$ by the aforementioned facts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt; $null \ T^k = null \ T$.&lt;/p&gt;
&lt;p&gt;Clearly $null \ T \subset null \ T^k$ as $T0 = 0$ for any operator $T$. It remains to show $null \ T^k \subset null \ T$.&lt;/p&gt;
&lt;p&gt;$v \rightarrow^T v_1 \rightarrow^T v_2 \rightarrow^T \dots \rightarrow^T v_k = 0$.&lt;/p&gt;
&lt;p&gt;$v_{k-1} \in range \ T \cap null \ T$, so $v_{k-1} = 0$.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;$v_1 \in range \ T \cap null \ T$, so $v_1 = 0$.&lt;/p&gt;
&lt;p&gt;Thus $Tv = v_1 = 0$, and $v \in null \ T$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt; $range \ T^k = range \ T$.&lt;/p&gt;
&lt;p&gt;Let $T&amp;rsquo;$ be the same as $T$ but restricted on subspace $range \ T$. Observe it is a linear operator.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./T_dot.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We prove $null \ T&amp;rsquo; = {0}$. Observe for $v \in null \ T&amp;rsquo;$, $v \in range \ T \cap null \ T$, and hence $v = 0$. Clearly $T&#39;0 = 0$ as $T0 = 0$ for any operator $T$.&lt;/p&gt;
&lt;p&gt;It follows $dim \ null \ T&amp;rsquo; = 0$. By &lt;em&gt;The Fundamental Theorem of Linear Maps&lt;/em&gt; (See Axler page 63), $dim \ range \ T = dim \ range \ T&amp;rsquo;$. But by definition $range \ T&amp;rsquo; \subset range \ T$, and therefore $range \ T&amp;rsquo; = range \ T$.&lt;/p&gt;
&lt;p&gt;We conclude $T[range \ T] = range \ T$, The image of $range \ T$ under $T$ is exactly $range \ T$. Clearly it suffices to prove our intended theorem.&lt;/p&gt;
&lt;h3 id=&#34;ex-19&#34;&gt;Ex. 19&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex-19.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;By normality we know $null \ T = (range \ T)^\bot$. So $(z_1, z_2, z_3) \bot v$, for any $v \in ran \ T$. It follows
\begin{align*}
(z_1, z_2, z_3) \cdot v &amp;amp;= 0 \\
(z_1, z_2, z_3) \cdot T(1, 1, 1) &amp;amp;= 0 \\
&amp;amp;= (z_1, z_2, z_3) \cdot (2, 2, 2) = 2 z_1 + 2 z_2 + 2 z_3 = 2 (z_1 + z_2 +    z_3)
\end{align*}
Thus $z_1 + z_2 + z_3 = 0$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Erik&#39;s Algorithms</title>
      <link>https://mostafatouny.github.io/post/erik-alg-pset/</link>
      <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/erik-alg-pset/</guid>
      <description>&lt;h2 id=&#34;materials&#34;&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/6-046j-design-and-analysis-of-algorithms-spring-2015&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT OCW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;problem-sets&#34;&gt;Problem Sets&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Problem&lt;/th&gt;
&lt;th&gt;Source&lt;/th&gt;
&lt;th&gt;Solution&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 01&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/6-046j-design-and-analysis-of-algorithms-spring-2015/resources/mit6_046js15_pset1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset01_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/erik-alg-post/pset01&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 02&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/6-046j-design-and-analysis-of-algorithms-spring-2015/resources/mit6_046js15_pset2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset02_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/erik-alg-post/pset02&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 03&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/6-046j-design-and-analysis-of-algorithms-spring-2015/resources/mit6_046js15_pset3/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset03_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/erik-alg-post/pset03&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 04&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/6-046j-design-and-analysis-of-algorithms-spring-2015/resources/mit6_046js15_pset4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset04_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/erik-alg-post/pset04&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 05&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/6-046j-design-and-analysis-of-algorithms-spring-2015/resources/mit6_046js15_pset5/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset05_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/erik-alg-post/pset05&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 06&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/6-046j-design-and-analysis-of-algorithms-spring-2015/resources/mit6_046js15_pset6/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset06_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/erik-alg-post/pset06&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 07&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/6-046j-design-and-analysis-of-algorithms-spring-2015/resources/mit6_046js15_pset7/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset07_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/erik-alg-post/pset07&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 08&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/6-046j-design-and-analysis-of-algorithms-spring-2015/resources/mit6_046js15_pset8/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset08_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/erik-alg-post/pset08&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 09&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/6-046j-design-and-analysis-of-algorithms-spring-2015/resources/mit6_046js15_pset9/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset09_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/erik-alg-post/pset09&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 10&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/6-046j-design-and-analysis-of-algorithms-spring-2015/resources/mit6_046js15_pset10/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset10_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/erik-alg-post/pset10&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 10</title>
      <link>https://mostafatouny.github.io/erik-alg-post/pset10/</link>
      <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/erik-alg-post/pset10/</guid>
      <description>&lt;p&gt;$\newcommand{\ddfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex-1&#34;&gt;Ex. 1&lt;/h3&gt;
&lt;p&gt;Done&lt;/p&gt;
&lt;h2 id=&#34;problems&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;prob-1&#34;&gt;Prob. 1&lt;/h3&gt;
&lt;h4 id=&#34;a&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;The proof is identical to slide 15. Note the symmetric structure of the ring where, as all processes are identical they send the same message to their right port and receive the same message from their left port.&lt;/p&gt;
&lt;h4 id=&#34;b&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;A randomized algorithm identical to slide 18, satisfies all the problem&amp;rsquo;s requirements.&lt;/p&gt;
&lt;p&gt;The sole difference is the subroutine which exchanges all UIDs. In round $1$, A process sends its randomly generated UID to the right port. In round $r &amp;gt; 1$, The received message from the left port in the previous round is sent to the right port. All processes record received UIDs and stop after recording $n$ of them.&lt;/p&gt;
&lt;p&gt;That subroutine consumes $\mathcal{O}(n)$ rounds and $\mathcal{O}(n^2)$ messages.&lt;/p&gt;
&lt;h4 id=&#34;c&#34;&gt;c&lt;/h4&gt;
&lt;p&gt;I conjecture the answer there is no such algorithm; I couldn&amp;rsquo;t come-up with a rigorous proof. Here is an insight justifying my stance.&lt;/p&gt;
&lt;p&gt;The only way processes can know each other&amp;rsquo;s UIDs is by circulating their UIDs. They cannot ever know whether the whole ring is covered. For example, If a process recorded $(a,b,c,a)$ then it can be tricked by the actual complete ring $(a,b,c,a,d)$ whose size is $5$. It is trivial to generalize the trick to accommodate any number of loops of $a$, like $(a,b,c,a,b,c,a)$ tricked by ring $(a,b,c,a,b,c,a,d)$.&lt;/p&gt;
&lt;h3 id=&#34;prob-2&#34;&gt;Prob. 2&lt;/h3&gt;
&lt;h4 id=&#34;a-1&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;I am not sure what is the sufficent degree of clarity the instructor is looking for. Neither do I claim my argument to be formally rigorous or even convincing. However, We hope it fulfills all the practical purposes of two introductory lectures.&lt;/p&gt;
&lt;p&gt;The key idea is for processes, not to send &lt;em&gt;search&lt;/em&gt; unless the root $v_0$ broadcasts &lt;em&gt;ready&lt;/em&gt;. Also, &lt;em&gt;ready&lt;/em&gt; is broadcasted by $v_0$ only if all of its neighbours signaled level $i$ updated their parents.&lt;/p&gt;
&lt;h4 id=&#34;b-1&#34; class=&#34;unnumbered&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Time.&lt;/strong&gt; For each level, the root $v_0$ broadcasts &lt;em&gt;ready&lt;/em&gt; and receives a response, Accounting for $diam \cdot 2(diam)$ edges traversed. That concludes the desired $\mathcal{O}(diam^2 \cdot d)$ upper-bound.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Messages.&lt;/strong&gt; For each level, At most all vertices, both receive and send a message, Accounting for $diam \cdot 2n$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 09</title>
      <link>https://mostafatouny.github.io/erik-alg-post/pset09/</link>
      <pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/erik-alg-post/pset09/</guid>
      <description>&lt;p&gt;$\newcommand{\ddfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex-1&#34;&gt;Ex. 1&lt;/h3&gt;
&lt;h3 id=&#34;ex-2&#34;&gt;Ex. 2&lt;/h3&gt;
&lt;h3 id=&#34;ex-3&#34;&gt;Ex. 3&lt;/h3&gt;
&lt;h3 id=&#34;ex-4&#34;&gt;Ex. 4&lt;/h3&gt;
&lt;h2 id=&#34;problems&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;prob-1&#34;&gt;Prob. 1&lt;/h3&gt;
&lt;h4 id=&#34;a&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;Consider $$\begin{aligned}
A &amp;amp;= { 1, 2 } \\
S &amp;amp;= { 1, 50 } \\
V &amp;amp;= { 2, 50 } \\
B &amp;amp;= 50\end{aligned}$$
Observe the optimal solution is $C = 50$ while &lt;em&gt;Alg1&lt;/em&gt; is of value $C* = 2$. Therefore the approximation ratio is $2/50 = 1/25$.&lt;/p&gt;
&lt;p&gt;It is easy to see the number $50$ can be set arbitrarily larger, and
therefore we can reach the desired unbounded approximation ratio.&lt;/p&gt;
&lt;h4 id=&#34;b&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;We follow the same convention of assuming the given indices order follow
non-increasing order of their densities.&lt;/p&gt;
&lt;p&gt;For the first index $i$ such that $\sum_{j=1}^{i} v_j &amp;gt; B$, denote items up to $i-1$ by &lt;em&gt;Max-Dens-Items&lt;/em&gt; and $i$th item by &lt;em&gt;First-Overweight&lt;/em&gt;. For item $a_i$ denote $D(a_i)$ to be the density of $a_i$, i.e the &lt;em&gt;value&lt;/em&gt; per one unit of &lt;em&gt;weight&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Take &lt;em&gt;D(First-Overweight)&lt;/em&gt; and multiply it by the slack weight in $B$ after consuming weights of &lt;em&gt;Max-Dens-Items&lt;/em&gt;. Sum the resulting value along values of &lt;em&gt;Max-Dens-Items&lt;/em&gt; and let $V_{maxDensities}$ denote that sum.&lt;/p&gt;
&lt;p&gt;It is very clear $C* \leq V_{maxDensities}$ as we fully utilized the space of $B$ with maximum possible densities.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s return to &lt;em&gt;Alg2&lt;/em&gt; and note how similar it is to the way we defined $V_{maxDensities}$. Remark that $C = max{ V_{maxDensities}, \textit{value of First-Overweight} }$. We have two cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Case 1. Weights of &lt;em&gt;Max-Dens-Items&lt;/em&gt; $\geq \frac{\displaystyle{B}}{\displaystyle{2}}$.&lt;br&gt;
Then $C \geq \frac{\displaystyle{ V_{maxDensities} }}{\displaystyle{2}}$, As &lt;em&gt;Max-Dens-Items&lt;/em&gt; accounts for more than 50% of $V_{maxDensities}$.&lt;/li&gt;
&lt;li&gt;Case 2. Weights of &lt;em&gt;Max-Dens-Items&lt;/em&gt; $&amp;lt; \frac{\displaystyle{B}}{\displaystyle{2}}$.&lt;br&gt;
Then the weight of &lt;em&gt;First-Overweight&lt;/em&gt; is greater than $\frac{\displaystyle{B}}{\displaystyle{2}}$. It follows $V_{maxDensities}$ is contributed only by &lt;em&gt;Max-Dens-Items&lt;/em&gt; and &lt;em&gt;First-Overweight&lt;/em&gt;. Observe one of them must contribute at least 50% of $V_{maxDensities}$. By definition, that one shall be selected by &lt;em&gt;Alg2&lt;/em&gt;, and therefore $C \geq \frac{\displaystyle{ V_{maxDensities} }}{\displaystyle{2}}$.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;c&#34;&gt;c&lt;/h4&gt;
&lt;p&gt;That is a standard dynamic programming problem whose solution can be found in any textbook. For brevity we only show the recurrece relation.&lt;/p&gt;
&lt;p&gt;Base: $S_{1,v} = w(a_1)$ if $w(a_1) = v$.&lt;br&gt;
Induction Step: $S_{i,v} = min{ S_{i-1,v}, w(a_i) + S_{i-1, v-v_i} }$&lt;/p&gt;
&lt;h4 id=&#34;d&#34;&gt;d&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Polynomial Time Complexity.&lt;/strong&gt; Observe the time complexity of $Alg3$ is
$\mathcal{O}(n^2 V)$, As the memoization table is:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;value\items&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;..&lt;/th&gt;
&lt;th&gt;n&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;..&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nV&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Since $Alg4$ basically runs $Alg3$ with additional linear operations, Its time complexity is $\mathcal{O}(n^2 V&amp;rsquo;)$, where $V&amp;rsquo;$ is similarly defined but on scaled values $v_i&amp;rsquo;$.&lt;/p&gt;
&lt;p&gt;Clearly $V&amp;rsquo; = \lfloor \frac{\displaystyle{V}}{\displaystyle{V}} \cdot \frac{\displaystyle{n}}{\displaystyle{\epsilon}} \rfloor = \lfloor \frac{\displaystyle{n}}{\displaystyle{\epsilon}} \rfloor$. So complexity of $Alg4$ can be re-written as $\mathcal{O}(n^3 \cdot \frac{1}{\epsilon})$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Approximation Scheme.&lt;/strong&gt; The idea is to use the bound of &lt;strong&gt;b&lt;/strong&gt; but on scaled values $v_i&amp;rsquo;$, then reverse the scaling to reach the intended ratio.&lt;/p&gt;
&lt;p&gt;Let $U$ be the upper-bound of optimal solutions which we defined earlier in &lt;strong&gt;b&lt;/strong&gt; on given values $v_i$. Let $U&amp;rsquo;$ be similarly defined but on scaled values $v_i&amp;rsquo;$. Define function $f$ so that it scales value as mentioned by the author. Let $C$ and $C&amp;rsquo;$ denote the value of the subset solution obtained by $Alg4$ but on given and scaled values respectively.&lt;/p&gt;
&lt;p&gt;From &lt;strong&gt;b&lt;/strong&gt;, We know there exists a solution on scaled values $v_i&amp;rsquo;$ whose approximation ratio is $2$, out of $U&amp;rsquo;$. Then trivially the optimal solution also can deviate by a ratio of at most $2$ out of $U&amp;rsquo;$.&lt;/p&gt;
&lt;p&gt;Observe if we scaled back a value then the calculated value is no greater than the original given value, since we are taking ceils. In other words, $f^{-1}(v_i&amp;rsquo;) \leq v_i$.&lt;/p&gt;
&lt;p&gt;Joining all these remarks:
\begin{aligned}
C&amp;rsquo; &amp;amp;\geq \frac{1}{2} U&amp;rsquo; \\
C \geq f^{-1}(C&amp;rsquo;) &amp;amp;\geq \frac{1}{2} f^{-1}(U&amp;rsquo;) = U
\end{aligned}
From &lt;strong&gt;b&lt;/strong&gt;, That suffices to concluding $Alg4$ is an approximation scheme.&lt;/p&gt;
&lt;h3 id=&#34;prob-2&#34;&gt;Prob. 2&lt;/h3&gt;
&lt;h4 id=&#34;a-1&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;Assume for the sake of contradiction there is a cycle $c_0$ in the reversed graph $\hat{G}$. Then it must contain an edge from $A$. Otherwise $c_0$ would also be in graph $G$ and by definition it must contain an edge from $A$. Call that edge $a$. Returning to $G$, $a$ would be reversed as in the figure below. It is possible to have edges other than $a$ in cycle $c_0$ which would also be reversed in graph $G$ In this case $p_0$ would be constructed by taking the corresponding sub-cycles into it.&lt;/p&gt;
&lt;p&gt;Since $A$ is minimal there must be a cycle $c_1$ in graph $G$ which would not be covered if not for $a$. Observe we have cycle $c_2$ constructed by paths $p_0$ and $p_1$. What covers $c_2$ in $G$? Clearly no edge in path $p_0$ would do that since we already considered all edges of $A$ we might encounter and took a sub-cycle avoiding them. Then $c_2$ is covered by edge $b$ in path $p_1$ which is part of the cycle $c_1$. That contradicts $c_1$ being a cycle only covered by edge $a$ $\textbf{QED}$.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./cycle.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;b-1&#34; class=&#34;unnumbered&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;Remove all isolated vertices as they are irrelevant to cycles. Iteratively &lt;em&gt;contract&lt;/em&gt; edges if they are not a side of a triangle as in the following figure.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./contract.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;By definition, Each edge of the resulting graph is a side of a triangle. Observe the graph is still equivalent to the previous one, When it comes to cycles. Intuitively we just condensed the length of cycles.&lt;/p&gt;
&lt;p&gt;For a single edge $e$, Consider the number of different triangles it is a side of. If the number is greater than $k$ then we must have $e \in S$; Otherwise, To cover all of these triangles, We will need more than $k$ edges. Note any two different triangles can share at most one edge. Remove edge $e$, and &lt;em&gt;contract&lt;/em&gt; edges as needed if they are no longer a side of a triangle (suffices also to maintain no isolated vertices). Output the resulting graph as $\hat{G}$ but with a capacity
of at most $k-1$ edges to cover all of its cycles.&lt;/p&gt;
&lt;p&gt;After repeating this process, We will have a graph where each edge is a side of a triangles, whose count is no more than $k$. Also each vertex is part of a cycle. We show now the number of vertices is upper-bounded by $k^2 + 2k$. They key idea is, If there is an additional vertex, We will have cycles more than what $k$ edges can accommodate.&lt;/p&gt;
&lt;p&gt;For a single edge $e$, It can cover at most $k$ cycles. Vertices in those cycles are exactly, $2$ of the edge itself, and $k$ for each cycle. That is a total of $2+k$. See the picture below:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./verNum.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Considering all edges of $A$, The total we get is $k(2+k) = 2k + k^2$.&lt;/p&gt;
&lt;p&gt;It is clear now we cannot have vertices greater than that number. As by our graph structure that vertex $v$ would be part of a cycle, and we have already consumed the maximum number of cycles $k$ edges can cover. In other words, We will miss a cycle which contains vertex $v$.&lt;/p&gt;
&lt;h4 id=&#34;c-1&#34;&gt;c&lt;/h4&gt;
&lt;p&gt;It suffices to have a polynomial-time algorithm of the kernlization
procedure we illustrated.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Degrees of vertices are computed by a linear scan of edges,    $\mathcal{O}(|E|)$.&lt;/li&gt;
&lt;li&gt;Contracting edges takes at most $\mathcal{O}(|E|^2)$.&lt;/li&gt;
&lt;li&gt;Computing number of triangles for each edge takes at most $\mathcal{O}(|E| (|E| + |V|))$ by a trivial graph search, made for each edge.&lt;/li&gt;
&lt;li&gt;Removing edges consumes $\mathcal{O}(|E|)$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since each step is polynomial in the size of the input, The sum of these sub-routines is polynomial also.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 08</title>
      <link>https://mostafatouny.github.io/erik-alg-post/pset08/</link>
      <pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/erik-alg-post/pset08/</guid>
      <description>&lt;p&gt;$\newcommand{\ddfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex-1&#34;&gt;Ex. 1&lt;/h3&gt;
&lt;p&gt;Done&lt;/p&gt;
&lt;h3 id=&#34;ex-2&#34;&gt;Ex. 2&lt;/h3&gt;
&lt;p&gt;\begin{aligned}
\text{Maximize } &amp;amp;d_y \\
\text{Subject to } &amp;amp;d_s = 0 \\
&amp;amp;d_t \leq d_s + w(s,t) \\
&amp;amp;d_y \leq d_s + w(s,y) \\
&amp;amp;d_y \leq d_t + w(t,y) \\
&amp;amp;d_x \leq d_t + w(t,x) \\
&amp;amp;d_t \leq d_y + w(y,t) \\
&amp;amp;d_x \leq d_y + w(y,x) \\
&amp;amp;d_z \leq d_y + w(y,z) \\
&amp;amp;d_z \leq d_x + w(x,z) \\
&amp;amp;d_x \leq d_z + w(z,x) \\
&amp;amp;d_s \leq d_z + w(z,s)
\end{aligned}&lt;/p&gt;
&lt;h3 id=&#34;ex-3&#34;&gt;Ex. 3&lt;/h3&gt;
&lt;p&gt;\begin{aligned}
\text{Maximize } \sum_{v \in V} f_{sv} &amp;amp;- \sum_{v \in V} f_{vs} \\
\text{Subject to } f_{s,v_1} &amp;amp;\leq c(s,v_1) \\
f_{s,v_2} &amp;amp;\leq c(s,v_2) \\
f_{v_1,v_3} &amp;amp;\leq c(v_1,v_3) \\
f_{v_2,v_1} &amp;amp;\leq c(v_2,v_1) \\
f_{v_2,v_4} &amp;amp;\leq c(v_2,v_4) \\
f_{v_3,v_2} &amp;amp;\leq c(v_3,v_2) \\
f_{v_3,t} &amp;amp;\leq c(v_3,t) \\
f_{v_4,v_3} &amp;amp;\leq c(v_4,v_3) \\
f_{v_4,t} &amp;amp;\leq c(v_4,t) \\
\\
\sum_{v \in V} f_{v_1v} &amp;amp;= \sum_{v \in V} f_{vv_1} \\
\sum_{v \in V} f_{v_2v} &amp;amp;= \sum_{v \in V} f_{vv_2} \\
\sum_{v \in V} f_{v_3v} &amp;amp;= \sum_{v \in V} f_{vv_3} \\
\sum_{v \in V} f_{v_4v} &amp;amp;= \sum_{v \in V} f_{vv_4} \\
\\
f_{sv_1} &amp;amp;\geq 0 \\
f_{sv_2} &amp;amp;\geq 0 \\
f_{v_1v_3} &amp;amp;\geq 0 \\
f_{v_2v_1} &amp;amp;\geq 0 \\
f_{v_2v_4} &amp;amp;\geq 0 \\
f_{v_3v_2} &amp;amp;\geq 0 \\
\\
f_{v_4t} &amp;amp;\geq 0
\end{aligned}&lt;/p&gt;
&lt;h3 id=&#34;ex-4&#34;&gt;Ex. 4&lt;/h3&gt;
&lt;h3 id=&#34;ex-5&#34;&gt;Ex. 5&lt;/h3&gt;
&lt;h2 id=&#34;problems&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;prob-1&#34;&gt;Prob. 1&lt;/h3&gt;
&lt;h4 id=&#34;a&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;For the sake of time, We cheat by a drawn graph from
&lt;a href=&#34;https://www.desmos.com/calculator/rfl2epfkpm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;desmos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./feasible.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;b&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Standard Form&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here $n=2$ and $m=4$.
\begin{aligned}
\text{Maximize } 4(x_1) &amp;amp;+ 1(x_2) \\
\text{Subject to } 1(x_1) &amp;amp;+ 1(x_2) \leq 10 \\
4(x_1) &amp;amp;+ -1(x_2) \leq 20 \\
1(x_1) &amp;amp;+ 3(x_2) \leq 24 \\
x_1, x_2 &amp;amp;\geq 0
\end{aligned}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slack Form&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;\begin{aligned}
\text{Maximize } &amp;amp;4(x_1) + 1(x_2) \\
\text{Subject to } &amp;amp;x_3 = -1(x_1) - 1(x_2) + 10 \\
&amp;amp;x_4 = -4(x_1) + 1(x_2) + 20 \\
&amp;amp;x_5 = -1(x_1) - 3(x_2) + 24 \\
&amp;amp;x_1, x_2, x_3, x_4, x_5 \geq 0
\end{aligned}&lt;/p&gt;
&lt;h4 id=&#34;c&#34;&gt;c&lt;/h4&gt;
&lt;p&gt;The solution form is $(x_1,x_2,x_3,x_4,x_5)$ where $x_1, x_2$ are basic and $x_3,x_4,x_5$ are non-basic.&lt;/p&gt;
&lt;p&gt;Basic solution, by setting basic variables to zeros is $(0,0,10,20,24)$.&lt;/p&gt;
&lt;p&gt;Interchange basic $x_1$ with non-basic $x_4$. Solving $x_1$ by the equation of $x_4$, We get $x_1 = 5 + \frac{\displaystyle{1}}{\displaystyle{4}}x_2 + \frac{\displaystyle{-1}}{\displaystyle{4}} x_4$.&lt;/p&gt;
&lt;p&gt;Substituting the new equation into remaining ones, We get:
\begin{aligned}
\text{Maximize } &amp;amp;20 + 2x_2 - x_4 \\
\text{Subject to } &amp;amp;x_1 = 5 + \frac{\displaystyle{1}}{\displaystyle{4}}x_2 +     \frac{\displaystyle{-1}}{\displaystyle{4}}x_4 \\
&amp;amp;x_3 = 5 - \frac{\displaystyle{5}}{\displaystyle{4}}x_2 +             \frac{\displaystyle{1}}{\displaystyle{4}}x_4 \\
&amp;amp;x_5 = 19 + \frac{\displaystyle{-13}}{\displaystyle{4}}x_2 +          \frac{\displaystyle{1}}{\displaystyle{4}}x_4 \\
&amp;amp;x_1, x_2, x_3, x_4, x_5 \geq 0
\end{aligned}&lt;/p&gt;
&lt;p&gt;Solution = $(5, 0, 5, 4, 19)$ with objective equal to $20$.&lt;/p&gt;
&lt;p&gt;Interchange basic $x_2$ with non-basic $x_3$. Solving $x_2$ by the equation of $x_3$, We get $x_2 = 4 - \frac{\displaystyle{4}}{\displaystyle{5}} x_3 + \frac{\displaystyle{1}}{\displaystyle{5}} x_4$.&lt;/p&gt;
&lt;p&gt;Substituting the new equation into remaining ones, We get:
\begin{aligned}
\text{Maximize } &amp;amp;28 - \frac{\displaystyle{8}}{\displaystyle{5}}x_3 -            \frac{\displaystyle{3}}{\displaystyle{5}}x_4 \\
\text{Subject to } &amp;amp;x_1 = 6 - \frac{\displaystyle{1}}{\displaystyle{5}}x_3 -     \frac{\displaystyle{19}}{\displaystyle{20}}x_4 \\
&amp;amp;x_2 = 4 - \frac{\displaystyle{4}}{\displaystyle{5}}x_3 +             \frac{\displaystyle{1}}{\displaystyle{5}}x_4 \\
&amp;amp;x_5 = 6 + \frac{\displaystyle{13}}{\displaystyle{5}}x_3 -            \frac{\displaystyle{8}}{\displaystyle{20}}x_4 \\
&amp;amp;x_1, x_2, x_3, x_4, x_5 \geq 0
\end{aligned}&lt;/p&gt;
&lt;p&gt;Solution = $(6, 4, 0, 0, 6)$ with objective equal to $28$.&lt;/p&gt;
&lt;p&gt;Quoting from CLRS, page 868: &amp;quot;At this point, all coefﬁcients in the
objective function are negative. As we shall see later in this chapter,
this situation occurs only when we have rewritten the linear program so
that the basic solution is an optimal solution.&amp;quot;&lt;/p&gt;
&lt;h4 id=&#34;d&#34;&gt;d&lt;/h4&gt;
&lt;p&gt;\begin{aligned}
\text{Minimize } &amp;amp;10y_1 + 20y_2 + 24y_3 \
\text{Subject to } &amp;amp;1y_1 + 4y_2 + 1y_3 \geq 4\
&amp;amp;1y_1 - 1y_2 + 3y_3 \geq 1\
&amp;amp;y_1, y_2, y_3 \geq 0
\end{aligned}
From &lt;em&gt;c&lt;/em&gt; we know the optimal value is 28.&lt;/p&gt;
&lt;h3 id=&#34;prob-2&#34;&gt;Prob. 2&lt;/h3&gt;
&lt;h4 id=&#34;a-1&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;Given a $3SAT$ formula $\phi$, Construct $\phi&amp;rsquo; = \phi \wedge (x_{n+1} \vee x_{n+2})$. Observe every &lt;em&gt;True&lt;/em&gt; assignment of $\phi$ corresponds to three distinct &lt;em&gt;True&lt;/em&gt; assignments of $\phi&amp;rsquo;$. It follows $\phi$ is solvable if and only if $\phi&amp;rsquo;$ is, and the solution of $3SAT$ is basically the output on $\phi$ in formula of $\phi&amp;rsquo;$. Therefore $3SAT$ is reduced to &lt;em&gt;TRIPLE-SAT&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&#34;b-1&#34; class=&#34;unnumbered&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;Observe the following illustrative example reducing $3SAT$ to $DONUT$.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./NP_Hard.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All profits of vertices equal exactly 1.&lt;/li&gt;
&lt;li&gt;Every clause is transformed to a complete 3-vertices sub-graph. It
ensures Every 1 counted of $k$ must be of a distinct sub-graph.&lt;/li&gt;
&lt;li&gt;$k$, the profit threshold to be satisfied, is equal to the number of
clauses. It ensures every clause to be satisfied corresponds to
counting 1 of k.&lt;/li&gt;
&lt;li&gt;For consistency, There is an edge between every $v_i$ and
$\neg v_i$, So that we cannot select both of them.&lt;/li&gt;
&lt;li&gt;It is not problemetic to select $v_i$ multiple times. It is
interpreted by many clauses being satisfied by the same literal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now it is clear, Given a problem instance $x$, The transformed
construction $f(x)$, achieves $x$ is $3SAT$ satisfiable if and only if
$f(x)$ has a subset of profit at least $k$.&lt;/p&gt;
&lt;h4 id=&#34;c-1&#34;&gt;c&lt;/h4&gt;
&lt;p&gt;We reduce from &lt;em&gt;subset-sum&lt;/em&gt; problem in CLRS p.1097.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./sum.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Given an arbitrary subset-sum set $S$, Transform each integer $i$ to a task with time $i$ and profit $i$. All deadlines are set to the given $t$ of sum aimmed to find. Think of time as a discrete sequence of seconds.&lt;/p&gt;
&lt;p&gt;Observe the maximum obtainable profit of machines is $t$. Observe also if that maximum is achieved then the integers corresponding to machines form a subset whose sum is $t$. On the other hand, If machines&amp;rsquo; profit found does not meet $t$ then there is no subset of integers summing to $t$, As otherwise machines found won&amp;rsquo;t be maximal.&lt;/p&gt;
&lt;p&gt;The problem can be stated as a decision problem, by the existince of machines whose profit is at least $k$. The transformation between optimization and decision problems is easily done by a logarithmic binary search. For brevity we omit those details.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 07</title>
      <link>https://mostafatouny.github.io/erik-alg-post/pset07/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/erik-alg-post/pset07/</guid>
      <description>&lt;p&gt;$\newcommand{\ddfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex-1&#34;&gt;Ex. 1&lt;/h3&gt;
&lt;p&gt;Will do while solving the exercises.&lt;/p&gt;
&lt;h3 id=&#34;ex-2&#34;&gt;Ex. 2&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Definitions &amp;amp; Properties&lt;/th&gt;
&lt;th&gt;Extended&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Network&lt;/td&gt;
&lt;td&gt;Instructed below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Source s&lt;/td&gt;
&lt;td&gt;Sources ${s_1, s_2, \dots, s_{k_s}}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sink t&lt;/td&gt;
&lt;td&gt;Sinks ${t_1, t_2, \dots, t_{k_t} }$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Capacity constraint&lt;/td&gt;
&lt;td&gt;Same&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Flow conservation&lt;/td&gt;
&lt;td&gt;V - {sources} - {sinks}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flow value $|f|$&lt;/td&gt;
&lt;td&gt;$\sum_{s_i} ( \sum_v f(s_i,v) - \sum_v f(v, s_i) )$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For brevity we illustrate the construction definition by the following
diagram.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./0.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Observe $\sum_v f(s_{sup},v) = \sum_{s_i} \sum_v f(s_i, v)$ and $\sum_v f(v,s_{sup}) = \sum_{s_i} \sum_v f(v,s_i)$ which concludes our goal.&lt;/p&gt;
&lt;h3 id=&#34;ex-3&#34;&gt;Ex. 3&lt;/h3&gt;
&lt;p&gt;Denote $f = \alpha f_1 + (1-\alpha) f_2$. We show $f$ satisfies both definitions of (1) &lt;em&gt;capacity&lt;/em&gt; and (2) &lt;em&gt;reservation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; Clearly
\begin{aligned}
0 \leq \alpha f_1(u,v) &amp;amp;\leq \alpha c(u,v) \\
0 \leq (1-\alpha) f_2(u,v) &amp;amp;\leq (1-\alpha) c(u,v)
\end{aligned}
Which concludes
\begin{aligned}
\alpha f_1(u,v) + (1-\alpha) f_2(u,v) \leq \alpha c(u,v) + (1-\alpha) c(u,v) = c(u,v)
\end{aligned}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; Clearly,
\begin{aligned}
\alpha \sum_v f_1(u,v) &amp;amp;= \alpha \sum_v f_1(v,u) \\
(1-\alpha) \sum_v f_2(u,v) &amp;amp;= (1-\alpha) \sum_v f_2(v,u)
\end{aligned}
Which concludes
\begin{aligned}
\sum_v \alpha f_1(u,v) + (1-\alpha) f_2(u,v) = \sum_v \alpha f_1(v,u) + (1-\alpha) f_2(v,u)
\end{aligned}&lt;/p&gt;
&lt;h3 id=&#34;ex-4&#34;&gt;Ex. 4&lt;/h3&gt;
&lt;p&gt;Intuitively and without proof, min-cut is $S = {s, v_1, v_2, v_4}$ and
$T = {v_3, t}$.&lt;/p&gt;
&lt;h3 id=&#34;ex-5&#34;&gt;Ex. 5&lt;/h3&gt;
&lt;p&gt;Comment: I don&amp;rsquo;t feel confident about the solution.&lt;/p&gt;
&lt;p&gt;By &lt;em&gt;Ex. 2&lt;/em&gt; we have a construction procedure from &lt;em&gt;multiple&lt;/em&gt; to &lt;em&gt;single&lt;/em&gt;
with the same flow value. Intuitively and without proof, a flow of
&lt;em&gt;multiple&lt;/em&gt; corresponds to a flow of the same value in &lt;em&gt;single&lt;/em&gt;. Then
solving the &lt;em&gt;single&lt;/em&gt; yields a max-flow for &lt;em&gt;multiple&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;problems&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;prob-1&#34;&gt;Prob. 1&lt;/h3&gt;
&lt;h4 id=&#34;a&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Notation.&lt;/strong&gt; We say an edge $(u,v)$ is saturated in $F$ if
$f(u,v) = c(u,v)$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact.&lt;/strong&gt; Since $F$ is a max-flow, we know there is no augmenting path
existing in it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt; Based on the fact, Lest a flow greater than $|f|$ gets
constructed in $F$, The following cannot happen in $F&amp;rsquo;$:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Augmenting path, not containing edge $(u,v)$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Augmenting path, containing $(u,v)$, but $(u,v)$ was not &lt;em&gt;saturated&lt;/em&gt;
in $F$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Augmenting path, containing $(u,v)$, but $f(u,v)$ is decreased.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt; Then, the possible cases of $F&amp;rsquo;$ are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No augmenting path exists, Then $|f&amp;rsquo;| = |f|$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Augmenting path exists, containing $(u,v)$, which was saturated in
$F$, and flow increases it in $F&amp;rsquo;$. Since $c&amp;rsquo;(u,v) = f(u,v) + 1$,
Then by definition of taking the minimum values along the path, It
is concluded the increase in flow is at most 1.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If an augmenting path is taken in $F&amp;rsquo;$, Then by the same line of
reasoning, No second augmenting path is possible. Note
$f&amp;rsquo;(u,v) = c&amp;rsquo;(u,v)$ now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;br&gt;
Similar.&lt;/p&gt;
&lt;p&gt;A difference is the increase shall be at most k rather than at most 1,
Following taking the minimum values along the augmenting path.&lt;/p&gt;
&lt;p&gt;It is possible to have multiple augmenting paths, but even in that case,
the overall increase shall be upperbounded by $k$.&lt;/p&gt;
&lt;p&gt;The same line of reasoning leads to, any existing augmenting path, must
be in the edge $(u,v)$ whose capacity is increased.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;br&gt;
Symmetric.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;br&gt;
Similar.&lt;/p&gt;
&lt;h4 id=&#34;b&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;Intuitively and without a proof, apply &lt;em&gt;Ford-Fulkerson&lt;/em&gt; method, Searching for paths which only contains edge $(u,v)$ whose capacity is increased. Intuitively that search restriction yields the upperbound $k \cdot (V+E)$.&lt;/p&gt;
&lt;h4 id=&#34;c&#34;&gt;c&lt;/h4&gt;
&lt;p&gt;Intuitively and without a proof, If the new capacity $c(u,v)$ is less than the flow of $F$, Fix the flow by decreasing flow values of edges which are in paths containing $(u,v)$, Then similarly to &lt;em&gt;b&lt;/em&gt;, apply &lt;em&gt;Ford-Fulkerson&lt;/em&gt; but only on paths containing $(u,v)$. Intuitively that search restriction yields the upperbound $k \cdot (V+E)$&lt;/p&gt;
&lt;h3 id=&#34;prob-2&#34;&gt;Prob. 2&lt;/h3&gt;
&lt;p&gt;Out solution is based on intuition not a rigorous proof. Given a
&lt;em&gt;directed graph&lt;/em&gt; input, Construct a corresponding &lt;em&gt;flow network&lt;/em&gt; where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new source vertex $s$ has a new edge with each $s_i$.&lt;/li&gt;
&lt;li&gt;All edges have a capacity equal to $1$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then we run &lt;em&gt;Ford-Fulkerson&lt;/em&gt; to find the maximum flow. Now observe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If max-flow $|f| = k$, output &amp;quot;Possible&amp;quot;&lt;/li&gt;
&lt;li&gt;if max-flow $|f| \neq k$, output &amp;quot;Impossible&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The goal of edge-disjoint paths is realized by setting all capacities
to 1. If max-flow is $k$ then each $s_i$ has a path to $t$. If max-flow
is not $k$ then it must be less than $k$ and means some $s_i$ doesn&amp;rsquo;t
have a successful flow to $t$.&lt;/p&gt;
&lt;h3 id=&#34;prob-3&#34;&gt;Prob. 3&lt;/h3&gt;
&lt;p&gt;Observe the following illustrative diagram which models the problem as a
&lt;em&gt;max-flow&lt;/em&gt; problem.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./1.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;A customer $a_i$ has an edge with food $b_j$ in our constructed graph,
If we are given $b_j \in A_i$. There is an additional edge for each
customer to the special vertex &lt;em&gt;10$&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Intuitively and without a proof, Maximizing a flow, corresponds to
minimizing the 1-flow value output from each customer to the &lt;em&gt;10$&lt;/em&gt;
vertex as it does not reach vertex &lt;em&gt;t&lt;/em&gt; and hence does not contribute to
increasing the flow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Baby Rudin&#39;s Real Analysis</title>
      <link>https://mostafatouny.github.io/post/mit-analysis1c-pset/</link>
      <pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/mit-analysis1c-pset/</guid>
      <description>&lt;h2 id=&#34;materials&#34;&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/18-100c-real-analysis-fall-2012&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT OCW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Book: Principles of Mathematical Analysis by Walter Rudin, 3rd ed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;problem-sets&#34;&gt;Problem Sets&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Problem&lt;/th&gt;
&lt;th&gt;Source&lt;/th&gt;
&lt;th&gt;Solution&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 01&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/18-100c-real-analysis-fall-2012/resources/mit18_100cf12_ps1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset01_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/mit-analysis1c-post/pset01&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 02&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/18-100c-real-analysis-fall-2012/resources/mit18_100cf12_ps2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset02_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/mit-analysis1c-post/pset02&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 03&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/18-100c-real-analysis-fall-2012/resources/mit18_100cf12_ps3/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset03_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/mit-analysis1c-post/pset03&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 04&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/18-100c-real-analysis-fall-2012/resources/mit18_100cf12_ps4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset04_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/mit-analysis1c-post/pset04&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 05&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/18-100c-real-analysis-fall-2012/resources/mit18_100cf12_ps5/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 06&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/18-100c-real-analysis-fall-2012/resources/mit18_100cf12_ps6/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset06_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/mit-analysis1c-post/pset06&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 07&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/18-100c-real-analysis-fall-2012/resources/mit18_100cf12_ps7/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset07_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/mit-analysis1c-post/pset07&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 08&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/18-100c-real-analysismfall-2012/resources/mit18_100cf12_ps8/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset08_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/mit-analysis1c-post/pset08&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 08</title>
      <link>https://mostafatouny.github.io/mit-analysis1c-post/pset08/</link>
      <pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/mit-analysis1c-post/pset08/</guid>
      <description>&lt;h2 id=&#34;problem.-1&#34; class=&#34;unnumbered&#34;&gt;Problem. 1&lt;/h2&gt;
&lt;p&gt;By boundedness we get $|f(x)| \leq M_f$ and $|g(x)| \leq M_g$. Clearly there is $N_g$ such that for $n \geq N_g$, $|g_n(x)| \leq M_g + \epsilon_g$.&lt;/p&gt;
&lt;p&gt;Let $\epsilon &amp;gt; 0$ be arbitrary. Define $\epsilon_0 = \frac{\displaystyle{\epsilon}}{\displaystyle{2(M_g + \epsilon_g)}}$ and $\epsilon_1 = \frac{\displaystyle{\epsilon}}{\displaystyle{2(M_f)}}$.&lt;/p&gt;
&lt;p&gt;By hypothesis we have can take $N_{max}$ considering also $N_g$ to get
\begin{aligned}
|f_n(x) - f(x)| &amp;lt; +\epsilon_0 \\
|g_n(x) - g(x)| &amp;lt; +\epsilon_1
\end{aligned}
By multiplication,
\begin{aligned}
|f_n(x) g_n(x) - f(x) g_n(x)| &amp;lt; +\epsilon_0 \cdot |g_n(x)| \\
|f(x) g_n(x) - f(x) g(x)| &amp;lt; +\epsilon_1 \cdot |f(x)|
\end{aligned}
Now observe:
\begin{aligned}
|f_n(x) g_n(x) - f(x) g(x)| &amp;amp;= |f_n(x) g_n(x) - f(x) g_n(x) + f(x) g_n(x) - f(x)   g(x)| \\
&amp;amp;\leq |f_n(x) g_n(x) - f(x) g_n(x)| + |f(x) g_n(x) - f(x)g(x)| \\
&amp;amp;&amp;lt; \epsilon_0 |g_n(x)| + \epsilon_1 |f(x)| \\
&amp;amp;\leq \epsilon_0 (M_g + \epsilon_g) + \epsilon_1 (M_f) \\
&amp;amp;= \epsilon/2 + \epsilon/2 = \epsilon
\end{aligned}
The second line follows by triangular inequality.&lt;/p&gt;
&lt;h2 id=&#34;problem.-2&#34; class=&#34;unnumbered&#34;&gt;Problem. 2&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt; $\hat{f}$ is of the same class.&lt;/p&gt;
&lt;p&gt;By definition, The domain of $\hat{f}$ is the same as $f$. Clearly $\hat{f}(0) = \frac{\displaystyle{1}}{\displaystyle{4}} f(2 \cdot 0) = \frac{\displaystyle{1}}{\displaystyle{4}} f(0) = \frac{\displaystyle{1}}{\displaystyle{4}} (0) = 0$ and $\hat{f}(1) = \frac{\displaystyle{3}}{\displaystyle{4}} f(2 \cdot 1 - 1) + \frac{\displaystyle{1}}{\displaystyle{4}} = \frac{\displaystyle{3}}{\displaystyle{4}} f(1) +\frac{\displaystyle{1}}{\displaystyle{4}} =          \frac{\displaystyle{3}}{\displaystyle{4}} (1) + \frac{\displaystyle{1}}{\displaystyle{4}} = 1$.&lt;/p&gt;
&lt;p&gt;The continuity of $\hat{f}$ follows by the continuity of $f$. Consider arbitrary $\hat{f}(q)$ and $\epsilon &amp;gt; 0$. Consider the case of $\hat{f}(q) = \frac{\displaystyle{3}}{\displaystyle{4}} f(2q-1) + \frac{\displaystyle{1}}{\displaystyle{4}}$ and note the other case is symmetric. Take $\grave{\epsilon} = \frac{\displaystyle{4}}{\displaystyle{3}} \epsilon$. By continuity of $f$, There exists $\delta$ such that for any $r$, if $| r - p | &amp;lt; \delta$ then $| f(r) - f(p) | &amp;lt; \grave{\epsilon}$. Define $\grave{\delta} = \frac{\displaystyle{\delta}}{\displaystyle{2}}$, and observe for any $r$:
\begin{aligned}
\text{If  }       &amp;amp; | r - q | &amp;lt; \grave{\delta} = \frac{\displaystyle{\delta}}{\displaystyle{2}} \\
\text{Then  }     &amp;amp; | (2r+1) - (2q+1) | &amp;lt; \delta \\
\text{By Continuity  }    &amp;amp; | f(2r+1) - f(2q+1) | &amp;lt; \grave{\epsilon} = \frac{\displaystyle{4}}{\displaystyle{3}} \epsilon \\
\text{Then  }     &amp;amp; | (\frac{\displaystyle{3}}{\displaystyle{4}} f(2r+1) + \frac{\displaystyle{1}}{\displaystyle{4}}) -                         (\frac{\displaystyle{3}}{\displaystyle{4}} f(2q+1) + \frac{\displaystyle{1}}{\displaystyle{4}}) | &amp;lt; \epsilon \\
\text{By definition  }    &amp;amp; | \hat{f}(r) - \hat{f}(q) | &amp;lt; \epsilon
\end{aligned}&lt;/p&gt;
&lt;h2 id=&#34;problem.-3&#34; class=&#34;unnumbered&#34;&gt;Problem. 3&lt;/h2&gt;
&lt;p&gt;We use the following theorem found in Rudin&amp;rsquo;s book in page 59.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /mit-analysis1c-post/pset08/serConv_hub8832a69ca9b502c47331a959b6fa796_14838_06abe4cd6bd6e30f52223a3a59fa345e.webp 400w,
               /mit-analysis1c-post/pset08/serConv_hub8832a69ca9b502c47331a959b6fa796_14838_c5dde7601b6378ef3ae6ef447cf04fa8.webp 760w,
               /mit-analysis1c-post/pset08/serConv_hub8832a69ca9b502c47331a959b6fa796_14838_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/mit-analysis1c-post/pset08/serConv_hub8832a69ca9b502c47331a959b6fa796_14838_06abe4cd6bd6e30f52223a3a59fa345e.webp&#34;
               width=&#34;760&#34;
               height=&#34;147&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Fix $x \in [a,b]$. The theorem follows by the following lemmas&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(i) $\sum_{k=n}^m f_k(x) \geq 0$ for odd $n$.&lt;/li&gt;
&lt;li&gt;(ii) $\sum_{k=n}^m f_k(x) \leq 0$ for even $n$.&lt;/li&gt;
&lt;li&gt;(iii) Given $f_n(x) = +M$ for odd $n$ and non-negative $M$, $\sum_{k=n}^m f_n(x) \leq M$.&lt;/li&gt;
&lt;li&gt;(iv) Given $f_n(x) = -M$ for even $n$ and non-negative $M$, $\sum_{k=n}^m f_n(x) \geq -M$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Proof.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(i). Follows by a strong form of induction. Observe for odd $n$, $|f_n(x)| \geq |f_{n+1}(x)|$ yields $f_n(x) + f_{n+1} \geq 0$. The induction step is to show $\sum_{k=n}^{m+2} f_k(x) \geq 0$ given $\sum_{k=n}^{m} f_k(x) \geq 0$ and $\sum_{k=n}^{m+1} f_k(x) \geq 0$.&lt;/p&gt;
&lt;p&gt;(ii). Symmetric to (i).&lt;/p&gt;
&lt;p&gt;(iii) Expand to $f_n(x) + \sum_{k=n+1}^m f_k(x)$, Then it follows immediately by (ii)&lt;/p&gt;
&lt;p&gt;(iv). Symmetric to (iii).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt; These lemmas conclude, Given $f_n(x) = M$ regardless $n$ is even or odd, $|\sum_{k=n}^m f_k(x)| \leq |M|$. But we are given $f_n(x)$ converges to 0, So we can substitute $M$ by any $\epsilon &amp;gt; 0$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 06</title>
      <link>https://mostafatouny.github.io/erik-alg-post/pset06/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/erik-alg-post/pset06/</guid>
      <description>&lt;p&gt;$\newcommand{\ddfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex-1&#34;&gt;Ex. 1&lt;/h3&gt;
&lt;p&gt;skipped in hope of professionally read while solving the exercises, and
well-gain from lectures.&lt;/p&gt;
&lt;h3 id=&#34;ex-2&#34;&gt;Ex. 2&lt;/h3&gt;
&lt;p&gt;To definte shortest-path weight function $\delta$, which satisfies the triangle inequality, enabling the second property of $\overline{w}$.&lt;/p&gt;
&lt;h3 id=&#34;ex-3&#34;&gt;Ex. 3&lt;/h3&gt;
&lt;p&gt;For a cycle $c = v_0, v_1, \dots, v_k=v_0$ we are given $w(c) = 0$. It is natural to ignore the case $k = 0$.&lt;/p&gt;
&lt;p&gt;Recall the facts&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$\overline{w}(u,v) \geq 0$&lt;/li&gt;
&lt;li&gt;$\overline{w}(u,v) = w(u,v) + h(u) - h(v)$&lt;/li&gt;
&lt;li&gt;$\overline{w}(p) = w(p) + h(v_0) - h(v_k)$ for path $p$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   $\Sigma \overline{w}(v_i, v_{i+1}) = 0$&lt;br&gt;
$$\begin{aligned}
\overline{w}(c) &amp;amp;= w(c) + h(v_0) - h(v_k) \\
&amp;amp;= 0 + h(v_0) - h(v_0), v_0=v_k \\
&amp;amp;= 0
\end{aligned}$$&lt;/p&gt;
&lt;p&gt;If any $\overline{w}(v_i,v_{i+1}) &amp;gt; 0$ then $\overline{w}(c) &amp;gt; 0$,
contradicting the proved above lemma.&lt;/p&gt;
&lt;h3 id=&#34;ex-4&#34;&gt;Ex. 4&lt;/h3&gt;
&lt;p&gt;skipped in hope of professionally read while solving the exercises, and well-gain from lectures.&lt;/p&gt;
&lt;h3 id=&#34;ex-5&#34;&gt;Ex. 5&lt;/h3&gt;
&lt;p&gt;In page 636 there is a hint of using &lt;em&gt;fibonacci-heabs&lt;/em&gt;. I am not sure whether it is the key of solving the problem. Anyway, The exercise is postponed untill we gain a guidance from others. Skimming the chapter did not yield any promising clue to pursue.&lt;/p&gt;
&lt;h3 id=&#34;ex-6&#34;&gt;Ex. 6&lt;/h3&gt;
&lt;p&gt;Same as &lt;em&gt;Ex. 5&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;problems&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;prob-1&#34;&gt;Prob. 1&lt;/h3&gt;
&lt;h4 id=&#34;a&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;Case $r = w_{i,j}$. Nothing to be done.&lt;/p&gt;
&lt;p&gt;Case $r &amp;lt; w_{i,j}$. Check to see if new paths including edge $(i,j)$
offer less-weight.&lt;/p&gt;
&lt;p&gt;(For LaTeX issue we denote matrix $\Pi$ by $P$)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for x = 0 to n
  for y = 0 to n
    if d_x,i + r + d_j,y &amp;lt; d_x,y
      d_x,y = d_x,i + r + d_j,y
      P(x,j) = i
      P(x,y) = P(j,y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observe $\Pi(x,i)$ is the same, and same for its recursive vertices.
Similarly to $\Pi(j,y)$.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Complexity.&lt;/em&gt; $\mathcal{O}(V^2)$&lt;/p&gt;
&lt;p&gt;Case $r &amp;gt; w_{i,j}$. For paths which do not depend on $w_{i,j}$, Nothing
needs to be updated about them. If their paths are less or equal than
any path which includes $w_{i,j}$ then obviously these paths are still
optimal when the weight of $w_{i,j}$ increases. If for vertex $x$,
$P(x,j) != i$ then $x$ shall never visit edge $\set{i,j}$.&lt;/p&gt;
&lt;p&gt;Our focus starts on vertices $x$ whose $\Pi(x,j)$ equals $i$. For each such $x$ and each arbitrary vertex $y$, We compute minimum paths from $x$ to $y$ and update if needed. Let $D&amp;rsquo;$ and $\Pi&amp;rsquo;$ denote minimum distance and predecessor matrices after updating the weight of edge $\set{i,j}$ to $r$, respectively. Any path $x \rightarrow y$ either consists of a single edge $\set{x,y}$ or contains an intermediate vertex between $x$ and $y$. We loop on all vertices $z$ to compute $D(x,z) + D(z,y)$ and then set $D&amp;rsquo;(x,y)$. However, we must check whether edge $\set{i,j}$ falls into the path $x \rightarrow z$ or $z \rightarrow y$. if NO, then we know $D&amp;rsquo;(x,z) = D(x,z)$ and $D&amp;rsquo;(z,y) = D(z,y)$. If YES, then the new weight of path $x \rightarrow y$ which equals $D(x,y) + (r-w_{i,j})$, is equal or less than the new weight $D(x,z) + D(z,y) + (r - w_{i,j})$. That follows by $D(x,y) \leq D(x,z) + D(z,y)$ as the additional weight $r - w_{i,j}$ is added on both sides of the inequality. In this case we know $z$ won&amp;rsquo;t offer a less-weight path. So we can restrict our focus on vertices $z$ whose corresponding paths do not include edge $\set{i,j}$.&lt;/p&gt;
&lt;p&gt;(For LaTeX issues we denote matrix $\Pi$ by $P$)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;isEdgeInPath(edge {i,j}, path x -&amp;gt; y, predecessor P)
      if P(x,j) != i
        return False

      s = y
      while P(x,s) != x
        if P(x,s) == j
          return False

      return True

Main()
      for x = 0 to n
        if P(x,j) = i
          for y = 0 to n
            minDistance = min{ edge (x,y) if exists, D(x,y) + (r - w_i,j) }
            minVertex = NULL
            isDistanceUpdated = False
            for z = 0 to n
              if isEdgeInPath( {i,j}, x -&amp;gt; y, P) OR z = x OR z = y
                continue to next iteration of z

              zDistance = D(x,z) + D(z,y)
              if (distance &amp;lt; minDistance)
                minDistance = zDistance
                minVertex = z
                isDistanceUpdated = True

             if isDistanceUpdated
               P&#39;(x,y) = P(z,y)
               P&#39;(x,z) = P(x,z)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Complexity.&lt;/strong&gt; $\mathcal{O}(V^3)$&lt;/p&gt;
&lt;h4 id=&#34;b&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /erik-alg-post/pset06/3_hub21ae05e5b0627d0f8f8b6bd0d803308_64161_233f3b5766870163cd840f2af71223aa.webp 400w,
               /erik-alg-post/pset06/3_hub21ae05e5b0627d0f8f8b6bd0d803308_64161_d8c28cf9e7943b72c5ccd65831602d7f.webp 760w,
               /erik-alg-post/pset06/3_hub21ae05e5b0627d0f8f8b6bd0d803308_64161_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/erik-alg-post/pset06/3_hub21ae05e5b0627d0f8f8b6bd0d803308_64161_233f3b5766870163cd840f2af71223aa.webp&#34;
               width=&#34;760&#34;
               height=&#34;439&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;c&#34;&gt;c&lt;/h4&gt;
&lt;p&gt;In the same mannger matrices $M$ and $\Pi$ are maintainces &lt;em&gt;distances&lt;/em&gt;
and &lt;em&gt;predecessors&lt;/em&gt;, We maintain also matrix $W$ for the number of edges
corresponding to $d_{i,j}$ in $M$. The algorithm then checks $W$ before
updating a new solution whether its number of edges is at most $h$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Complexity.&lt;/strong&gt; The overhead is constant over the original algorithm. In
terms of parameters and $h$ is postponed.&lt;/p&gt;
&lt;h4 id=&#34;d&#34;&gt;d&lt;/h4&gt;
&lt;p&gt;The algorithm constructs a series of matrices $L^1, L^2, .., L^{n-1}$
where $L^m = \left ( l_{ij}^m \right )$, indicating shortest-paths of
edges length at most $m$. The adapted algorithm terminates on $L^{h}$
and outputs it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Complexity.&lt;/strong&gt; At most the complexity of the original algorithm.&lt;/p&gt;
&lt;h4 id=&#34;e&#34;&gt;e&lt;/h4&gt;
&lt;h3 id=&#34;prob-2&#34;&gt;Prob. 2&lt;/h3&gt;
&lt;h4 id=&#34;a-1&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;We prove if there are two different minimum spanning trees, $T_a$ and $T_b$, Then we can construct a minimum spanning tree $T_c$ whose weight is less than either of them.&lt;/p&gt;
&lt;p&gt;We define:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$E_a = T_a(E)$&lt;/li&gt;
&lt;li&gt;$E_b = T_b(E)$&lt;/li&gt;
&lt;li&gt;$E_c = E_a \cap E_b$&lt;/li&gt;
&lt;li&gt;$E_{a-b} = E_a - E_b$&lt;/li&gt;
&lt;li&gt;$E_{b-a} = E_b - E_a$&lt;/li&gt;
&lt;li&gt;$E_{-c} = E_{a-b} \cup E_{b-a}$&lt;/li&gt;
&lt;li&gt;$e_{a}$, An edge in $E_a$&lt;/li&gt;
&lt;li&gt;$e_{a0}$, An edge in $E_{a-b}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   For an edge $e_{a0} = {x,y}$, $x$ and $y$ are connected by a path in $T_b$ which does not include edge $e_{a0}$. Similarly for $e_{b0}$.&lt;/p&gt;
&lt;p&gt;Follows immediately as by definition $e_{a0} \not\in E_b$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   For an edge $e_{a0} = {x,y}$, There exists distinct edges $e_{b}^1$ and $e_{b}^2$ such that $e_b^1$ joins $x$ and $e_b^2$ joins $y$ in $E_b$. Similarly for $e_{b0}$.&lt;/p&gt;
&lt;p&gt;Follows immediately by &lt;em&gt;Lemma 1&lt;/em&gt;. Note the two edges $e_{b}^1$ and $e_{b}^2$ can share at most one vertix.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   If there is a cycle where all edges are in $E_a$ except exactly one edge $e_b$ in $E_b$, and $w(e_b) &amp;lt; w(e_a^i)$ for some $e_a^i$ in the cycle, then we can construct a MST $T_a&amp;rsquo; = T_a - e_a^i + e_b$ of weight less than $T_a$&lt;/p&gt;
&lt;p&gt;Consider two vertices, $v_1$ and $v_2$, whose connectivity relies on edge $e_a^i = {x,y}$. The path is $p(v_1,x), (x,y), p(y,v_2)$. By adding $e_b$ we know there is path $p_0(x,y) \neq (x,y)$, i.e $x$ can reach $y$ without edge $(x,y)$. Therefore we can form an alternative path for $v_1$ and $v_2$ without relying on $(x,y)$ by $p(v_1,x), p_0(x,y), p(y,v_2)$. Thus, Removing $e_a^i$ is safe. Note It is clear neither $p(v_1,x)$ nor $p(v_2,x)$ contains edge $(x,y)$ as that means there is an unnecessary cycle in the path.&lt;/p&gt;
&lt;p&gt;Clearly $E_{-c}$ is non-empty, Otherwise $T_a = T_b$. Without the loss of generality, Assume the selected element of $E_{-c}$ is ${x,z} = e_{a0} \in E_{a-b}$. There are only two cases regarding the weight of $e_{a0}$.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /erik-alg-post/pset06/0_hu824b5325236ddb7d5e366d445e6f9768_42318_eb512dddf3bd2bcc978a83b9b6da2e84.webp 400w,
               /erik-alg-post/pset06/0_hu824b5325236ddb7d5e366d445e6f9768_42318_d32a4562cba3881ac89fed82b2d88e06.webp 760w,
               /erik-alg-post/pset06/0_hu824b5325236ddb7d5e366d445e6f9768_42318_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/erik-alg-post/pset06/0_hu824b5325236ddb7d5e366d445e6f9768_42318_eb512dddf3bd2bcc978a83b9b6da2e84.webp&#34;
               width=&#34;760&#34;
               height=&#34;558&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case 1:&lt;/strong&gt; $w(e_{a0}) = 0$. By &lt;em&gt;Lemma 1&lt;/em&gt; we know there is a path $p(x,y)$ which does not include $e_{a0}$. Clearly have a circle of, edges in $E_b$ and exactly one edge in $E_a$. Since all weights of the graph are distinct and non-negative, $w(e_{a0})$ is strictly less than all edges in the circle. By &lt;em&gt;Lemma 3&lt;/em&gt;, We can form a lower-weight MST. Contradiction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case 2:&lt;/strong&gt; $w(e_{a0}) &amp;gt; 0$. By &lt;em&gt;Lemma 2&lt;/em&gt; we get edges $e_{b}^1$ and $e_{b}^2$ in $E_b$ where they contain vertices $x$ and $y$. Clearly it is not possible for both $e_b^1$ and $e_b^2$ to be in $E_a$. Otherwise we would have a cycle in $T_a$ contradicting the fact a tree has no cycles. It is easy to justify it by considering $T_a&amp;rsquo; = T_a - e_{a0}$. Without the loss of generality assume $e_b^1 \not\in E_a$, i.e
$e_b^1 = e_{b0}^1$. Denote $e_{b0}^1$ by ${y,z}$.&lt;/p&gt;
&lt;p&gt;We claim there is a cycle of edges including $e_{b0}$ and $e_{a0}$, Where all remaining edges are in $E_a$. By connectivity of $T_a$ we know there is a path in $T_a$ between $x$ and $z$. Note the cycle is totally legit if it contained $y$. Similarly, There is a cycle of edges including $e_{a0}$ and $e_{b0}$, Where all remainig edges are in $E_b$.&lt;/p&gt;
&lt;p&gt;We know $e_{a0} \neq e_{b0}$. In either cases some edge is greater than the other. By &lt;em&gt;Lemma 3&lt;/em&gt;, We get a lower-weight spanning tree. Contradiction.&lt;/p&gt;
&lt;h4 id=&#34;b-1&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Correctness.&lt;/strong&gt; For any graph $G$, There is a unique sub-graph $G_c$, Such that for any cycle $c$ in $G$ whose all edges are in $G_c$ except for exactly one edge $e_x$, The weight of $e_x$ is the maximum along the whole cycle of $c$. The proof is nearly identical to &lt;em&gt;a&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Clearly the MST exerts this property lest we construct another spanning-tree of less weight. Since the algorithm claimed here always prefers less-weight edges, It shall never contradict that property also. By uniqueness the claimed algorithm yields the MST.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Algorithm Description.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Complexity Analysis.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;c-1&#34;&gt;c&lt;/h4&gt;
&lt;p&gt;Counter-example:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /erik-alg-post/pset06/2_hu5abdcfff66ab83794bec2c42928b99ba_89582_cf3971a6f6c9d99fb7179219b241c122.webp 400w,
               /erik-alg-post/pset06/2_hu5abdcfff66ab83794bec2c42928b99ba_89582_f9642ef71be097a6fbaab6c2ee33ccda.webp 760w,
               /erik-alg-post/pset06/2_hu5abdcfff66ab83794bec2c42928b99ba_89582_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/erik-alg-post/pset06/2_hu5abdcfff66ab83794bec2c42928b99ba_89582_cf3971a6f6c9d99fb7179219b241c122.webp&#34;
               width=&#34;760&#34;
               height=&#34;172&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;d-1&#34;&gt;d&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Correctness.&lt;/strong&gt; Yes. The proof is nearly identical to &lt;em&gt;a&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Algorithm Description.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Odonnell&#39;s Undergrad Complexity</title>
      <link>https://mostafatouny.github.io/post/odonnell-undergrad-pset/</link>
      <pubDate>Sun, 21 May 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/odonnell-undergrad-pset/</guid>
      <description>&lt;h2 id=&#34;materials&#34;&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLm3J0oaFux3YL5vLXpzOyJiLtqLp6dCW2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lecture Videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Book: Introduction to the Theory of Computation by Michael Sipser, 3rd ed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;problem-sets&#34;&gt;Problem Sets&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Problem&lt;/th&gt;
&lt;th&gt;Source&lt;/th&gt;
&lt;th&gt;Solution&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 01&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.cs.cmu.edu/~odonnell/15455-s17/homework01.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset01_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/odonnell-undergrad-post/pset01&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 02&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.cs.cmu.edu/~odonnell/15455-s17/homework02.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset02_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/odonnell-undergrad-post/pset02&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 03&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.cs.cmu.edu/~odonnell/15455-s17/homework03.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset03_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/odonnell-undergrad-post/pset03&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 04&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.cs.cmu.edu/~odonnell/15455-s17/homework04.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset04_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/odonnell-undergrad-post/pset04&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 05&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.cs.cmu.edu/~odonnell/15455-s17/homework05.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset05_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/odonnell-undergrad-post/pset05&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P. Set 06&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.cs.cmu.edu/~odonnell/15455-s17/homework06.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;./pset06_sol.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;https://mostafatouny.github.io/odonnell-undergrad-post/pset06&#34;&gt;HTML&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 06,</title>
      <link>https://mostafatouny.github.io/odonnell-undergrad-post/pset06/</link>
      <pubDate>Sun, 21 May 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/odonnell-undergrad-post/pset06/</guid>
      <description>&lt;h2 id=&#34;ex-1&#34;&gt;Ex. 1&lt;/h2&gt;
&lt;p&gt;Here is a very illustrative example.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /odonnell-undergrad-post/pset06/example_hu2c6ab7b1b8480e879a3ed4ec3e8e8c8c_68342_1c70cb697e95da0303a9e289486ff2ee.webp 400w,
               /odonnell-undergrad-post/pset06/example_hu2c6ab7b1b8480e879a3ed4ec3e8e8c8c_68342_bf484466c77a9128d3e8d6d33dc4bf3f.webp 760w,
               /odonnell-undergrad-post/pset06/example_hu2c6ab7b1b8480e879a3ed4ec3e8e8c8c_68342_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/odonnell-undergrad-post/pset06/example_hu2c6ab7b1b8480e879a3ed4ec3e8e8c8c_68342_1c70cb697e95da0303a9e289486ff2ee.webp&#34;
               width=&#34;760&#34;
               height=&#34;355&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The procedure of encoding &lt;em&gt;3COL-UNARY&lt;/em&gt; to &lt;em&gt;3COL&lt;/em&gt; is as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(i) For each group of nodes labeled with some colour &lt;em&gt;x&lt;/em&gt;, create
two additional connected nodes &lt;em&gt;x1&lt;/em&gt; and &lt;em&gt;x2&lt;/em&gt;, and connect each node
coloured &lt;em&gt;x&lt;/em&gt; to both of them.&lt;/li&gt;
&lt;li&gt;(ii) For each two distinct groups of colours &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;, connect
some node from &lt;em&gt;x&lt;/em&gt; with some node from &lt;em&gt;y&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When encoded input is run on &lt;em&gt;3COL&lt;/em&gt;,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Procedure (i) ensures all nodes coloured &lt;em&gt;x&lt;/em&gt; will have the same
colour, even if that colour is not exactly &lt;em&gt;x&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Procedure (ii) ensures groups of labeled nodes will have different
colours.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notably the colours outputted by &lt;em&gt;3COL&lt;/em&gt; may not match the given original
labeled colours. Since colours are symmetric, i.e can be exchanged
without tampering any required condition, an encoded graph $f(w)$ is
accepted by &lt;em&gt;3COL&lt;/em&gt; if and only if graph $w$ is accepted by &lt;em&gt;3COL-UNARY&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;ex-2&#34;&gt;Ex. 2&lt;/h2&gt;
&lt;p&gt;The goal is to show any language in NP can be polynomially reduced to
&lt;em&gt;IMPLICIT-4COL&lt;/em&gt;. The exponentiality of number of vertices of graph $G_C$
is the central key of testing all possible certificates and in turn
determining whether a given &lt;em&gt;w&lt;/em&gt; belongs to &lt;em&gt;L&lt;/em&gt; language.&lt;/p&gt;
&lt;p&gt;By cook-levin we know any NP language can be encoded in terms of SAT,
and hence we can construct a corresponding circuit. Since the circuit&amp;rsquo;s
input is of length 2n, we can think of it as partitioned into two
n-length inputs. The first one is problem&amp;rsquo;s input (like a graph) and the
second is a potential certificate (like a graph-route). The circuit
evaluates whether a given input along some literals assignments
(cirtificate) yields true (satisfiable).&lt;/p&gt;
&lt;p&gt;We assume any language input is prefixed with 0, and any certificate
input is prefixed with 1. If the circuit is given an invalid encoding it
immediately outputs &lt;em&gt;FALSE&lt;/em&gt;. In other words, If a circuit accepts some
input pair, we are ensured the first one indicates a language input and
the second indicates a possible certificate.&lt;/p&gt;
&lt;p&gt;Now we can think of graph $G_C$ as being partitioned into two groups;
One for language inputs and the other for all possible certificates. If
a vertix prefixed with 0 is connected to a vertix prefixed with 1, we
can immediately conclude the language input is satisfiable, and
otherwise it is unsatisfiable.&lt;/p&gt;
&lt;p&gt;Given any language $L$ we can construct a corresponding $C$, and by
&lt;em&gt;IMPLICIT-4COL&lt;/em&gt; a corresponding $G_C$. For any input $w$ which we wish
to check whether it belongs to $L$, We can see whether its encoded
vertex in $G_C$ is connected to any other vertex.&lt;/p&gt;
&lt;h2 id=&#34;ex-3&#34;&gt;Ex. 3&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Notation.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NAE-Constraint: $N_i = (x_1, x_2, x_3)$&lt;/li&gt;
&lt;li&gt;$XOR(x_i, x_j) = (x_i \vee x_j) \wedge (\neg x_i \vee \neg x_j)$&lt;/li&gt;
&lt;li&gt;$GXOR(x_i, x_j, x_k) = XOR(x_i, x_j) \wedge XOR(x_i, x_k) \wedge XOR(x_j, x_k)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recall an $XOR$ means exactly one of two literals is true&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   $GXOR$ is unsatisfiable.&lt;br&gt;
Observe each two $XORs$ intersect a literal $x_i$. So either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$x_i$ is &lt;em&gt;False&lt;/em&gt;, and $x_j$ and $x_k$ are both &lt;em&gt;True&lt;/em&gt;. Or&lt;/li&gt;
&lt;li&gt;$x_i$ is &lt;em&gt;True&lt;/em&gt;, and $x_j$ and $x_k$ are both &lt;em&gt;False&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But that contradicts the third $XOR$ stipulating exactly one of $x_j$
and $x_k$ is &lt;em&gt;True&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   5 clauses of $GXOR$ are satisfiable.&lt;br&gt;
Following the same line of reasoning of the previous lemma, It&amp;rsquo;s clear
by ignoring some clause of the 6 clauses of $GXOR$, we can have $x_j$
and $x_k$ both assigned to the same boolean value.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   Equivalence of NAE constraint and 5 clauses of $GXOR$.&lt;br&gt;
It is clear from the previous discussion that satisfying any 5 clauses
of $GXOR$ is equivalent to satisfying an NAE constraint. Clearly,
&lt;em&gt;Not-All-Equal&lt;/em&gt; constraint is exactly the same as either two literals
are &lt;em&gt;True&lt;/em&gt; and one is &lt;em&gt;False&lt;/em&gt;, or two literals are &lt;em&gt;False&lt;/em&gt; and one is
&lt;em&gt;True&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt;   An &lt;em&gt;NAE-3SAT:&lt;/em&gt; $N_1, N_2, \dots, N_r$ is equivalent to
corresponding &lt;em&gt;MAX-2SAT:&lt;/em&gt; $GXOR_1, GXOR_2, \dots, GXOR_r$ with at least
$5r$ clauses to be satisfied.&lt;br&gt;
&lt;br&gt;
If &lt;em&gt;MAX-2SAT&lt;/em&gt; is going to satisfy exactly 5 clauses of each $GXOR_i$,
Then we are guaranteed of satisfying all $N_i$. In fact, This is the
only feasible distribution of satisfied clauses. Otherwise all 6 clauses
of some $GXOR_i$ must be satisfied, contradicting &lt;em&gt;Lemma 2&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;On the other hand, It&amp;rsquo;s clear if a given &lt;em&gt;NAE-3SAT&lt;/em&gt; instance is
satisfiable, then so is the corresponding &lt;em&gt;MAX-2SAT&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;ex-4&#34;&gt;Ex. 4&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;not confident of the solution&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;a&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;As mentioned by the instructor we follow the verifier-based definition
of NP. Our goal is to show $$\begin{aligned}
&amp;lt;M, x, 1^w, 1^t&amp;gt; \in TS \leftrightarrow \exists u , s.t , S(&amp;lt;M, x, 1^w, 1^t&amp;gt;, u)   , \text{certifies} , &amp;lt;M, x, 1^w, 1^t&amp;gt; \in TS\end{aligned}$$&lt;/p&gt;
&lt;p&gt;By $S$ we mean an algorithm which simulates $M$ on $(x, u)$, untill it
accepts on $t$ steps.&lt;/p&gt;
&lt;p&gt;The definition trivially concludes our intended goal. Note if
$&amp;lt;M, x, 1^w, 1^t&amp;gt; , \not\in , TS$ then obviously there&amp;rsquo;s no any
certificate $u$, such that any $M$ computes $(x, u)$ in time bounded by
$t$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 07</title>
      <link>https://mostafatouny.github.io/mit-analysis1c-post/pset07/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/mit-analysis1c-post/pset07/</guid>
      <description>&lt;h2 id=&#34;problem.-1&#34; class=&#34;unnumbered&#34;&gt;Problem. 1&lt;/h2&gt;
&lt;h2 id=&#34;problem.-2&#34; class=&#34;unnumbered&#34;&gt;Problem. 2&lt;/h2&gt;
&lt;h2 id=&#34;problem.-3&#34; class=&#34;unnumbered&#34;&gt;Problem. 3&lt;/h2&gt;
&lt;p&gt;By hypothesis, For any reals $x$ and $t$, We are given
$| f(t) - f(x) | \leq (t-x)^2$. Clearly:
\begin{aligned}
\frac{\displaystyle{|f(t) - f(x)|}}{\displaystyle{|t-x|}} \leq&amp;amp;                  \frac{\displaystyle{(t-x)^2}}{\displaystyle{|t-x|}} \\
\left | \frac{\displaystyle{f(t) - f(x)}}{\displaystyle{t-x}} \right | \leq&amp;amp; |t- x|
\end{aligned}
But $\lim_{t \rightarrow x} |t-x| = 0$ which concludes
$\lim_{t \rightarrow x} \left | \frac{\displaystyle{f(t)-f(x)}}{\displaystyle{t-x}}  \right | \leq 0$.
Since the absolute value is always equal or greater than 0, We get also
$\lim_{t \rightarrow   x} \left | \frac{\displaystyle{f(t)-f(x)}}{\displaystyle{t-   x}} \right | \geq 0$.
Therefore $f&amp;rsquo;(x) = 0$ for any real $x$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 05</title>
      <link>https://mostafatouny.github.io/erik-alg-post/pset05/</link>
      <pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/erik-alg-post/pset05/</guid>
      <description>&lt;p&gt;$\newcommand{\ddfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex-1&#34;&gt;Ex. 1&lt;/h3&gt;
&lt;p&gt;Done.&lt;/p&gt;
&lt;h3 id=&#34;ex-2&#34;&gt;Ex. 2&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt;   &lt;em&gt;coll&lt;/em&gt;, $p[coll]$&lt;br&gt;
We denote by &lt;em&gt;coll&lt;/em&gt; the collision event of $f(k_1) = f(k_2)$ for fixed
$k_1 \neq k_2$, and by $p[coll]$ the probability of that event
happening.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt;   ${f_{coll-i,j}}$&lt;br&gt;
We denote all functions with a collision on $i, j \in U$ by
${f_{coll-i,j}}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note.&lt;/strong&gt;   It&amp;rsquo;s explicitly assumed\&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;(i) The given hash family $\mathcal{H}$ contains all possible
functions $f:U \rightarrow B$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(ii) for any fixed $i$ and $j$,
$f(i), f(j) \in {0, \dots, |B|-1}$ are independently and randomly
assigned.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We are not aware whether these properties are part of a hash&amp;rsquo;s family
definition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   For a family of functions $\mathcal{H}$ whose functions are
defined on $f:U \rightarrow B$,
$p[coll] = \frac{\displaystyle{1}}{\displaystyle{|B|}}$&lt;br&gt;
For a fixed $k \in B$, $|{f_{coll-i,j} | f(i)=f(j)=k }| = |B|^{|U|-2}$
To see why, Think of $f(k_i)$ and $f(k_j)$ as a fixed determined values;
As a deferred choice, how many choices we have for $f$, for the
remaining of $|U|-2$ elements?&lt;/p&gt;
&lt;p&gt;Considering all $x_i \in {0, \dots, |B|-1}$ for
$f(k_i) = x_i = f(k_j)$,
$|{f_{coll-i,j}}| = |B|^{|U|-2} + \dots + |B|^{|U|-2} = |B| \cdot |B|^{|U|-2} = |B|^{|U|-1}$.&lt;/p&gt;
&lt;p&gt;Finally,
$\frac{\displaystyle{|{f_{coll-i,j}}|}}{\displaystyle{|\mathcal{H}|}} = \frac{\displaystyle{|B|^{|U|-1}}}{\displaystyle{|B|^{|U|}}} =                                     \frac{\displaystyle{1}}{\displaystyle{|B|}}$.
The result is concluded, recalling a function is drawn randomly from
$\mathcal{H}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollarly.&lt;/strong&gt;   If $p[coll] \leq \epsilon$, Then
$\epsilon \geq \frac{\displaystyle{1}}{\displaystyle{|B|}}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt;   If $p[coll] \leq \epsilon$, Then
$\epsilon \geq \frac{\displaystyle{1}}{\displaystyle{|B|}} - \frac{\displaystyle{1}}{\displaystyle{U}}$.
Note
$\epsilon \geq \frac{\displaystyle{1}}{\displaystyle{|B|}} - \frac{\displaystyle{1}}{\displaystyle{U}}$
is equivalent to $|B| |U| \epsilon + |B| \geq |U|$ by trivial algebraic
operations. It immediately follows from &lt;em&gt;lemma 4&lt;/em&gt;,
$|B| |U| \epsilon + |B| \geq |B| |U| \frac{\displaystyle{1}}{\displaystyle{|B|}} = |U|+|B| \geq |U|$,
since $|B| &amp;gt; 0$.&lt;/p&gt;
&lt;h3 id=&#34;ex-3&#34;&gt;Ex. 3&lt;/h3&gt;
&lt;p&gt;Done.&lt;/p&gt;
&lt;h3 id=&#34;ex-4&#34;&gt;Ex. 4&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fact.&lt;/strong&gt;   Trees&amp;rsquo; Keys&lt;br&gt;
Keys of the tree are keyed on low endpoints. i.e nodes on the left
subtree have low endpoints less than the root&amp;rsquo;s low endpoint and nodes
on the right subtree have greater low endpoints.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt;   Goodness&lt;br&gt;
By an &lt;em&gt;optimal-interval&lt;/em&gt; we mean an overlapping one with the lowest low
endpoint. We say some interval is &lt;em&gt;better&lt;/em&gt; when its low endpoint is
strictly lower.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   No &lt;em&gt;better-interval&lt;/em&gt; on the right subtree.&lt;br&gt;
If any search algorithm terminated upon finding an overlapping interval
$x$, Then for any other overlapping interval on the right subtree, Its
low endpoint is going to be at least equal to $x$&amp;rsquo;s low endpoint. That
due to &lt;em&gt;Fact 1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Observation.&lt;/strong&gt;   Possible &lt;em&gt;better-intervals&lt;/em&gt; on the left subtree.&lt;br&gt;
For node $x$ whose interval overlaps with the queried interval $i$, The
possible existince of a &lt;em&gt;better-interval&lt;/em&gt; on the left subtree is
justified by verifying $x.left.max$ to be at least $i.low$, and &lt;em&gt;Fact
1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollary.&lt;/strong&gt;   If $x.left.max$ is less than queried $i.low$, Then the found overlapping interval in $x$ is the &lt;em&gt;optimal&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tinkering Search Algorithm.&lt;/strong&gt; The previous discussion suggests a
simple modification to solve our problem. The algorithm maintains a
variable $bestInterval$, Updating it whenever a better overlapping
interval is found. If the algorithm found an interval, and $x.left.max$
is less than $i.low$, It terminates. If $x.left.max$ were at least
$i.low$, It steps to left subtree.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INTERVAL-SEARCH(T, i)
  bestIntervalNode = nil
  x = T.root

  while x != T.nil
    if i overlaps with x.int and x.int is better than bestIntervalNode
      bestIntervalNode = x

    if x.left != T:nil and x.left.max &amp;gt;= i.low
      x = x.left
    else
      if bestIntervalNode == nil
        x = x.right
      else return bestIntervalNode
  return bestIntervalNode
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ex-5&#34;&gt;Ex. 5&lt;/h3&gt;
&lt;p&gt;Done.&lt;/p&gt;
&lt;h3 id=&#34;ex-6&#34;&gt;Ex. 6&lt;/h3&gt;
&lt;p&gt;In &lt;em&gt;Memoized-Cut-Rod&lt;/em&gt;, Initalize a new binary array $c[0..n-1]$ where
$c[i]=1$ if there&amp;rsquo;s a cut at the ith possible cut position. In
&lt;em&gt;Memoized-Cut-Rod-Aux&lt;/em&gt;, While computing the maximum $q$ in $i$&amp;rsquo;s loop,
store $i_0$ value which corresponds to the maximum $q$. Then set
$c[i_0]=1$.&lt;/p&gt;
&lt;h3 id=&#34;ex-7&#34;&gt;Ex. 7&lt;/h3&gt;
&lt;p&gt;Postponed.&lt;/p&gt;
&lt;h3 id=&#34;ex-8&#34;&gt;Ex. 8&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt;   Less-order Sequence&lt;br&gt;
A sequence &lt;em&gt;A&lt;/em&gt; is &lt;em&gt;less-order&lt;/em&gt; than sequence &lt;em&gt;B&lt;/em&gt; if &lt;em&gt;A&lt;/em&gt; is less in terms
of the lexicographical order. For example, &lt;em&gt;A C B&lt;/em&gt; is &lt;em&gt;less-order&lt;/em&gt; than
&lt;em&gt;A D A&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remark.&lt;/strong&gt;   Misleading Equal Character&lt;br&gt;
Consider sequences &lt;em&gt;A = 1 9 2 5 1 3 4&lt;/em&gt; and &lt;em&gt;B = 1 9 2 6 1 3 4&lt;/em&gt;. On &lt;em&gt;A2 =
1 9&lt;/em&gt; and &lt;em&gt;B2 = 1 9&lt;/em&gt;, We have a subsequence &lt;em&gt;1 9&lt;/em&gt;. But since &lt;em&gt;9&lt;/em&gt; is a
huge number we can&amp;rsquo;t append subsequence &lt;em&gt;2 3 4&lt;/em&gt;. In fact the optimal
subsequence of &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt; is &lt;em&gt;1 2 3 4&lt;/em&gt;. Our algorithm must prefer
&lt;em&gt;less-order&lt;/em&gt; subsequences as they enable better chances of a longer
subsequence.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Approach.&lt;/strong&gt;   Same but tinkered&lt;br&gt;
Following exactly the same formulation and solution mentioned in CLRS
but with a simple tinkering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new character appended to a subsequence must be monotonically
increasing. Otherwise the subsequence is passed as it is without
appending the new character.&lt;/li&gt;
&lt;li&gt;if two subsequences collided in the same memoization-table entry,
the &lt;em&gt;less-order&lt;/em&gt; one is preferred.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt;  &lt;br&gt;
&lt;em&gt;A = 1 9 2 5 1 3 4&lt;/em&gt;&lt;br&gt;
&lt;em&gt;B = 1 9 2 6 1 3 4&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /erik-alg-post/pset05/table_hu895390269657cf423a5354d71f78621c_131805_f42346ce27e3c9ab836985d0d0324be0.webp 400w,
               /erik-alg-post/pset05/table_hu895390269657cf423a5354d71f78621c_131805_23c04a92418f3b07c80f6b98edb1e5db.webp 760w,
               /erik-alg-post/pset05/table_hu895390269657cf423a5354d71f78621c_131805_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/erik-alg-post/pset05/table_hu895390269657cf423a5354d71f78621c_131805_f42346ce27e3c9ab836985d0d0324be0.webp&#34;
               width=&#34;656&#34;
               height=&#34;608&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entry &lt;em&gt;c[2,2]&lt;/em&gt; prefers &lt;em&gt;1 2&lt;/em&gt; over &lt;em&gt;1 9&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Entry &lt;em&gt;c[4,4]&lt;/em&gt; does not append &lt;em&gt;1&lt;/em&gt; conforming to the monotonic
increase condition.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note.&lt;/strong&gt;  &lt;br&gt;
We rely on our intuition without rigorously proving the correctness of
our solution.&lt;/p&gt;
&lt;h2 id=&#34;problems&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;prob-1&#34;&gt;Prob. 1&lt;/h3&gt;
&lt;h4 id=&#34;a&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;We donte &lt;em&gt;with high probability&lt;/em&gt; by &lt;em&gt;w.h.p&lt;/em&gt;. As instructed in lectures,
Proofs here are identical to them but on the case of nodes m rather than
all n nodes. We follow the same assumptions. Namely, Total number of
moves is, Moves until all head tosses (upward moves) are consumed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Finger-Search Algorithm&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We define:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curN&lt;/code&gt;, As currently pointed node&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N.r&lt;/code&gt;, As the right node of node &lt;code&gt;N&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N.d&lt;/code&gt;, As the downward node of node &lt;code&gt;N&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N.u&lt;/code&gt;, As the upward node of node &lt;code&gt;N&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N.l&lt;/code&gt;, As the left node of node &lt;code&gt;N&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N.key&lt;/code&gt;, As the key of node &lt;code&gt;N&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Finger-Search(x,k)
  curN = x
  while curN.key != k:
    if (curN.u != NULL) AND (curN.u.r.leftCount + counter &amp;lt;= k), then curN = curN.u
    else if curN.r.key &amp;lt;= k, then curN = curN.r
    else curN = curN.d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recall we are assuming a successful search, so the case of finding a key
greater than &lt;em&gt;k&lt;/em&gt; while we are in &lt;em&gt;level-0&lt;/em&gt; is impossible. So is the case
of reaching &lt;em&gt;+inf&lt;/em&gt;. So we omit those validations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   The height, i.e maximum node&amp;rsquo;s upward levels, is bounded by
$c\lg m$ &lt;em&gt;w.h.p&lt;/em&gt;&lt;br&gt;
$$\begin{aligned}
Pr[\text{no node&amp;rsquo;s height} \leq c\lg m] &amp;amp;= 1 - Pr[\text{some node&amp;rsquo;s height} &amp;gt; c\lg m] \\
Pr[\text{some node&amp;rsquo;s height} &amp;gt; c\lg m] &amp;amp;\leq m \cdot Pr[\text{node x height} &amp;gt; c\lg m] \textit{  (union bound)} \\
&amp;amp;\leq m \cdot \left (\frac{\displaystyle{1}}{\displaystyle{2}} \right )^{c \lg m} = m \cdot (2^{\lg m})^{-c} = m \cdot m^{-c} =   \frac{\displaystyle{1}}{\displaystyle{m^{c-1}}} \\
&amp;amp;= \frac{\displaystyle{1}}{\displaystyle{m^\alpha}}, \text{where} ; \alpha=c-1 \\
Pr[\text{no node&amp;rsquo;s height} \leq c\lg m] &amp;amp;= 1 - \frac{\displaystyle{1}}{\displaystyle{m^\alpha}}  \end{aligned}$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   For every height $c\lg m$ there is a total number of moves
$d\lg m$ such that $c\lg m$ head tosses (upward moves) appears within
the $d\lg m$ moves &lt;em&gt;w.h.p&lt;/em&gt;&lt;br&gt;
Clearly, If we knew the maximum height of any node is $c\lg m$, then the
height of given node $x$ is upper-bounded by it.&lt;/p&gt;
&lt;p&gt;As given in the lecture, We use &lt;em&gt;Chernoff&amp;rsquo;s bound&lt;/em&gt; as our hammer:
$$Pr[Y \geq E[Y] + r] \leq e^{\frac{\displaystyle{-2r^2}}{\displaystyle{m}}}$$&lt;/p&gt;
&lt;p&gt;Observe among $d\lg m$ total tosses, The following are equivalent:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\geq c\lg m$ heads &lt;em&gt;w.h.p&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;$&amp;lt; c\lg m$ heads is bounded.&lt;/li&gt;
&lt;li&gt;$\geq d \lg m - c \lg m$ tails is bounded&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let $Y$ denote the number of tails. Note
$Ex[Y] = \frac{\displaystyle{d\lg m}}{\displaystyle{2}}$ by &lt;em&gt;linearity of expectation&lt;/em&gt;, and set $r = (d/2 - c) \lg m$. Thus,
$$
\begin{aligned}
Pr[Y \geq \frac{\displaystyle{d\lg m}}{\displaystyle{2}} + (d/2 - c) \lg m] &amp;amp;\leq e^{\frac{\displaystyle{-2(d/2 - c)^2 \lg^2 m}}{\displaystyle{d\lg m}}}\\
Pr[Y \geq (d-c) \lg m] &amp;amp;\leq e^{-9/4 \cdot c \cdot \lg m}, \text{Setting d=8c}\\
&amp;amp;\leq (2^{\lg m})^{-c}, \text{As $e&amp;gt;2$ and $9/4&amp;gt;1$}\\
&amp;amp;= \frac{\displaystyle{1}}{\displaystyle{m^c}}
\end{aligned}
$$
Therefore Pr[$\geq c\lg m$ heads] = 1 - $\frac{\displaystyle{1}}{\displaystyle{m^c}}$. &lt;em&gt;QED&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;b&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;We begin by augmenting &lt;em&gt;node&lt;/em&gt; with data additional to mentioned ones in
&lt;strong&gt;a&lt;/strong&gt;. Namely, &lt;em&gt;n.leftCount&lt;/em&gt; which denote the number of nodes additional
to node &lt;em&gt;n.l&lt;/em&gt; upto current &lt;em&gt;n&lt;/em&gt;. Note the number considers all nodes in
&lt;em&gt;level-0&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For &lt;em&gt;Search&lt;/em&gt;, Clearly augmenting new data on nodes do not influence the
number or order of nodes in the skip list. So nothings needs to be done
to prove the complexity is maintained.&lt;/p&gt;
&lt;p&gt;For &lt;em&gt;Insert&lt;/em&gt; and &lt;em&gt;Delete&lt;/em&gt;, &lt;em&gt;n.leftCount&lt;/em&gt; of some nodes must be updated.
Those nodes are exactly characterized by the same line of reasoning
mentioned in the lecture and in &lt;strong&gt;a&lt;/strong&gt;. If &lt;em&gt;Search&lt;/em&gt; is getting from a
top-left node to some level-0 node, Then &lt;em&gt;Reversed-Search&lt;/em&gt; is getting
from a level-0 node to some top-right node. Nodes along that path are
exactly the ones which need update. The proofs are identical to &lt;strong&gt;a&lt;/strong&gt;.
For the sake of brevity we omit them here and invite the reader to
observe the following diagrams as a convincing evidence.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /erik-alg-post/pset05/d1_hu9be9eaa926d11758e6b0d6e6ec8273e0_134490_6f03f84c915fc024025ae5ff1a1f4c2a.webp 400w,
               /erik-alg-post/pset05/d1_hu9be9eaa926d11758e6b0d6e6ec8273e0_134490_4ce5d7924d65079e5181c7d4d8fb6b7f.webp 760w,
               /erik-alg-post/pset05/d1_hu9be9eaa926d11758e6b0d6e6ec8273e0_134490_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/erik-alg-post/pset05/d1_hu9be9eaa926d11758e6b0d6e6ec8273e0_134490_6f03f84c915fc024025ae5ff1a1f4c2a.webp&#34;
               width=&#34;760&#34;
               height=&#34;683&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /erik-alg-post/pset05/d2_hu2325ffe726af9ab92b84bbd5fae319e7_201009_0855cb5fd0147612aeced29d245c6e54.webp 400w,
               /erik-alg-post/pset05/d2_hu2325ffe726af9ab92b84bbd5fae319e7_201009_169e7ece528afae7a9d4bbc3031edb91.webp 760w,
               /erik-alg-post/pset05/d2_hu2325ffe726af9ab92b84bbd5fae319e7_201009_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/erik-alg-post/pset05/d2_hu2325ffe726af9ab92b84bbd5fae319e7_201009_0855cb5fd0147612aeced29d245c6e54.webp&#34;
               width=&#34;760&#34;
               height=&#34;726&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;c&#34;&gt;c&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Compute-Rank(x)
  curN = x
  counter = 0
  while curN != -inf:
    if curN.u != NULL, then curN = curN.u
    else counter = counter + curN.leftCount; curN = curN.l
  return counter
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rank-Search(x,r)
  counter = Compute-Rank(curN)
  while counter != r:
    if (curN.u != NULL) AND (curN.u.r.leftCount + counter &amp;lt;= k), then curN = curN.u
    else if curN.r.leftCount + counter &amp;lt;= k, then curN = curN.r
    else curN = curN.d
    return curN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, As we assume a succesful search we do not check the cases of
&lt;em&gt;+inf&lt;/em&gt; and stepping downward while being in &lt;em&gt;level-0&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Again, Proofs are identical to &lt;strong&gt;a&lt;/strong&gt; and they are omitted for brevity.
`&lt;/p&gt;
&lt;h3 id=&#34;prob-2&#34;&gt;Prob. 2&lt;/h3&gt;
&lt;p&gt;For the sake of brevity we only show the &lt;em&gt;optimal-substructure&lt;/em&gt; and
&lt;em&gt;memoization-table&lt;/em&gt;, Whereby the algorithm should be clear enough.&lt;/p&gt;
&lt;h4 id=&#34;a-1&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Optimal Substructure&lt;/strong&gt;
$$
maxSeq(&amp;lt;p_1, \dots, p_n&amp;gt;, m) = max
\set{
\begin{array}{lr}
maxSeq(&amp;lt;p_1, \dots, p_{n-1}&amp;gt;, m-1) + p_n,\\
maxSeq(&amp;lt;p_1, \dots, p_{n-1}&amp;gt;, m)
\end{array}
}
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memoization Table.&lt;/strong&gt; ith column denote the consideration of prizes $p_1, \dots, p_i$, and ith
row denote exactly i prizes.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /erik-alg-post/pset05/a_hu6d0f0f24e8dec3824c01596d00a0f3eb_71109_dbc256874ec736261117a2f60185dd2a.webp 400w,
               /erik-alg-post/pset05/a_hu6d0f0f24e8dec3824c01596d00a0f3eb_71109_3a9b7f91fb4d26665bdde6804eba9062.webp 760w,
               /erik-alg-post/pset05/a_hu6d0f0f24e8dec3824c01596d00a0f3eb_71109_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/erik-alg-post/pset05/a_hu6d0f0f24e8dec3824c01596d00a0f3eb_71109_dbc256874ec736261117a2f60185dd2a.webp&#34;
               width=&#34;760&#34;
               height=&#34;608&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Since prizes&amp;rsquo; values are non-negative, table[m,n] is the answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Complexity.&lt;/strong&gt; Both time and space complexity are $\mathcal{O}(nm)$&lt;/p&gt;
&lt;h4 id=&#34;b-1&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Remark.&lt;/strong&gt; Observe the given sequence $S$ and the optimal-subsequence $OptS$ can
both be divided into two segments, $S1, S2$ and $OptS1, OptS2$, where
$OptS1$ is a subsequence of $S1$ and $OptS2$ is a subsequence of $S2$.&lt;br&gt;
But neither do we know where exactly $S$ is divided nor how many prizes
are devoted to &lt;em&gt;blues&lt;/em&gt; and &lt;em&gt;reds&lt;/em&gt;. The solution is basically to
brute-force all possible cases and apply &lt;em&gt;(a)&lt;/em&gt; to solve a single case.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Optimal Substructure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;\begin{align}
maxSeq(&amp;lt;p_1, \dots, p_n&amp;gt;, m) = max_{0 \leq i \leq n \wedge 0 \leq j \leq m}
\set{ maxSeq(&amp;lt;p_1, \dots, p_i&amp;gt;, j) \cdot maxSeq(&amp;lt;p_1, \dots, p_{n-i}&amp;gt;, m-j) }
\end{align}&lt;/p&gt;
&lt;p&gt;Where &amp;lsquo;$\cdot$&amp;rsquo; denotes a concatenation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Complexity.&lt;/strong&gt; Time is $nm \cdot \mathcal{O}(nm) = \mathcal{O}(n^2m^2)$. Space is the same as &lt;em&gt;(a)&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&#34;c-1&#34;&gt;c&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Remark&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can think of this problem as a generalization of &lt;em&gt;(b)&lt;/em&gt; where the
precedence of &lt;em&gt;Reds&lt;/em&gt; over &lt;em&gt;Blues&lt;/em&gt; is equivalent to prizes $p_i$ being
all less than some prize $p_0$. This is the crux of our solution.&lt;/p&gt;
&lt;p&gt;We introduce a trick to colour prizes. Pick-up some arbitrary prize
$p_0$ and colour and all prizes $p_i &amp;lt; p_0$ blue and all prizes
$p_i \geq p_0$ red. Call it &lt;em&gt;prizes-colouring&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Recursively apply &lt;em&gt;prizes-colouring&lt;/em&gt; and &lt;em&gt;(b)&lt;/em&gt; on the given sequence
$S$. Note the base case is the same as &lt;em&gt;(b)&lt;/em&gt;, where a sequence consists
only of prizes of an equal value.&lt;/p&gt;
&lt;p&gt;The justification is clear since we are brute-forcing all possible
cases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Complexity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On average we expect the recursion to count $\log n$ iterations. The
worst case is $n$. So we have time
$n \cdot \mathcal{O}(n^2 m^2) = \mathcal{O}(n^3m^2)$, and space same as
&lt;em&gt;(a)&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&#34;d&#34;&gt;d&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 05</title>
      <link>https://mostafatouny.github.io/odonnell-undergrad-post/pset05/</link>
      <pubDate>Sun, 30 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/odonnell-undergrad-post/pset05/</guid>
      <description>&lt;h2 id=&#34;ex-0&#34;&gt;Ex. 0&lt;/h2&gt;
&lt;p&gt;Naively we guess any transformation $f$ of Boolean formulas preserves the property of satisfiability. Hence it would always be the case
$$
\begin{aligned}
w \not\in \textit{UNSAT} \leftrightarrow f(w) \in \textit{SAT}
\end{aligned}
$$&lt;/p&gt;
&lt;h2 id=&#34;ex-1&#34;&gt;Ex. 1&lt;/h2&gt;
&lt;p&gt;Since the questions is about factor $a$ we can ignore constants. $n^r + {(n^l)}^b = n^{r+lb}$. So $a = r+lb$.&lt;/p&gt;
&lt;h2 id=&#34;ex-2&#34;&gt;Ex. 2&lt;/h2&gt;
&lt;p&gt;following NTM simulation by DTM, partition states into H1 and H2 subsets, and apply the same procedure on each. now the combination of delta1 and delta2 reaches all possible states of NTM.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First.&lt;/strong&gt; &lt;em&gt;sipser-NTM&lt;/em&gt; can be viewed as a sequence of states, Each of which, is a subset of a deterministic TM&amp;rsquo;s states. A state of &lt;em&gt;binary-NTM&lt;/em&gt; can be viewed as a subset of exactly two states from a deterministic TM. Since there are no restrictions on the number of elements of &lt;em&gt;sipser-NTM&lt;/em&gt;&amp;rsquo;s subset, &lt;em&gt;binary-NTM&lt;/em&gt; can be seen as a special case of it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second.&lt;/strong&gt; Recall the proof idea of a deterministic TM simulating a non-deterministic TM, whereby a determinstic state encodes/resembles a non-determinstic subset of states. Following the same idea, partition $Q = Q_1 \cup Q_2$ and define $Q_1&amp;rsquo; = P(Q_1)$ and $Q_2&amp;rsquo; = P(Q_2)$. Here $P(Q_i)$ means the set of all subsets of states $Q_i$. Let $\delta_1$ and $\delta_2$ be responsible of $Q_1&amp;rsquo;$ and $Q_2&amp;rsquo;$, respectively. Observe any state of $P(Q)$ can be constructed by some $x \cup y$ where
$x \in Q_1&amp;rsquo;$ and $y \in Q_2&amp;rsquo;$. Therefore, Any configuration sequence of &lt;em&gt;sipser-TM&lt;/em&gt; can be encoded/represented by some configuration sequence of &lt;em&gt;binary-TM&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;ex-3&#34;&gt;Ex. 3&lt;/h2&gt;
&lt;p&gt;The proof is shown by constructing a &lt;em&gt;non-deterministic&lt;/em&gt; &lt;em&gt;exponential-time&lt;/em&gt; algorithm for solving &lt;em&gt;IMPLICIT-4COL&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Given a circuit $C$, Construct its graph $G_C$ by enumerating all possible $2^n$ inputs of $i$ and all $2^n$ inputs of $j$, Computing $C(i,j)$, for $i \neq j$. The complexity is $2^n \times 2^n = 2^{n+1}$; Exponential.&lt;/p&gt;
&lt;p&gt;Check whether the graph $G_C$ is 4-colorable. For each vertex of the graph, non-determinstically brute-force all the possible 4 colours. Since there are $2^n$ vertices, The complexity is &lt;em&gt;NEXP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Clearly the total complexity of a subroutine of &lt;em&gt;EXP&lt;/em&gt; followed by a subroutine of &lt;em&gt;NEXP&lt;/em&gt;, is &lt;em&gt;NEXP&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;ex-4&#34;&gt;Ex. 4&lt;/h2&gt;
&lt;p&gt;We construct the reduction function through a polynomial algorithm. Let &lt;em&gt;C_colorable&lt;/em&gt; and &lt;em&gt;C_uncolorable&lt;/em&gt; be some fixed 4-colorable and 4-uncolorable graphs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    L-to-3COL(w)
      check whether w is in L by the given polynomial algorithm
      if w belongs to L output C_colorable
      otherwise output C_uncolorable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observe our mapping necessarily satisfies
$$
w \in L \leftrightarrow \textit{L-to-3COL(w)} \in 3COL
$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 06</title>
      <link>https://mostafatouny.github.io/mit-analysis1c-post/pset06/</link>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/mit-analysis1c-post/pset06/</guid>
      <description>&lt;h2 id=&#34;problem.-1&#34; class=&#34;unnumbered&#34;&gt;Problem. 1&lt;/h2&gt;
&lt;h2 id=&#34;problem.-2&#34; class=&#34;unnumbered&#34;&gt;Problem. 2&lt;/h2&gt;
&lt;h2 id=&#34;problem.-3&#34; class=&#34;unnumbered&#34;&gt;Problem. 3&lt;/h2&gt;
&lt;p&gt;The first part is solved by a trivial set-theoretic operations. The second is postponed.&lt;/p&gt;
&lt;p&gt;Observe if $x \in f(\overline{E})$ then $x = f(p)$ for some $p \in \overline{E}$. To prove $x \in \overline{f(E)}$ it suffices to have $f(p) \not\in f(E)$. By contrapositive, It follows by the given $p \not\in E$.&lt;/p&gt;
&lt;p&gt;Note the proof is independent of continuity.&lt;/p&gt;
&lt;h2 id=&#34;problem.-4&#34; class=&#34;unnumbered&#34;&gt;Problem. 4&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Observation.&lt;/strong&gt; In case of a continuous function $f$ at point $p$, If we have a sequence ${x_i}$ converging to $p$ and ${f(x_i)}$ converges to $a$ then $a = f(p)$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt; Our approach is proving the definition of a closed-set is satisfied. Namely, If $p$ is a limit point of of $Z(f)$ then $p \in Z(f)$. Fix $p$ and suppose $\forall \epsilon &amp;gt; 0$ $\exists x \in Z(f)$ such that $d(x,p) &amp;lt; \epsilon$. We can construct a sequence $x_i$ arbitrarily close to $p$ where $f(x_i)  = 0$. By the above observation it must be the case $f(p) = 0$, and hence $p \in Z(f)$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 04</title>
      <link>https://mostafatouny.github.io/erik-alg-post/pset04/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/erik-alg-post/pset04/</guid>
      <description>&lt;p&gt;$\newcommand{\ddfrac}[2]{\frac{\displaystyle{#1}}{\displaystyle{#2}}}$&lt;/p&gt;
&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex-1&#34;&gt;Ex. 1&lt;/h3&gt;
&lt;p&gt;Done.&lt;/p&gt;
&lt;h3 id=&#34;ex-2&#34;&gt;Ex. 2&lt;/h3&gt;
&lt;p&gt;he amortized cost of n operations is upper-bounded by
\begin{align*}
&amp;amp;n + \sum_{i=1}^{\lfloor \lg n \rfloor} 2^i \\
&amp;amp;= n + \ddfrac{2(1-2^{\lfloor \lg n \rfloor})}{1-2} \\
&amp;amp;\leq n + \ddfrac{2(1-n)}{-1} \\
&amp;amp;= n - 2 + 2n \\
&amp;amp;= 3n - 2 \\
&amp;amp;= \mathcal{O}(n)
\end{align*}&lt;/p&gt;
&lt;p&gt;So the amortized cost of one operation is $\ddfrac{\mathcal{O}(n)}{n} = \mathcal{O}(1).$&lt;/p&gt;
&lt;h3 id=&#34;ex-3&#34;&gt;Ex. 3&lt;/h3&gt;
&lt;p&gt;We assign the following amortized costs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ith operation isn&amp;rsquo;t a power of 2 $\rightarrow$  4&lt;/li&gt;
&lt;li&gt;ith operation is an exact power of 2 $\rightarrow$ 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We prove for each operation $2^i$, There&amp;rsquo;s a sufficient balance for it. For $i \geq 2$, There are exactly $2^{i-1} - 1$ non-power operations before $2^i$ and after $2^{i-1}$. It sufficies to show $4(2^{i-1}-1) \geq 2^i$ which can trivially be proven by induction.&lt;/p&gt;
&lt;p&gt;Observe amortized cost $= 4n - 4 \lfloor \lg n \rfloor \geq n - \lfloor \lg n \rfloor + 2n    \geq n - \lfloor \lg n \rfloor + \sum_{i=1}^{\lfloor \lg n \rfloor} 2^i$ = actual cost. Note  by the geometric series $\sum_{i=1}^{\lfloor \lg n \rfloor} 2^i = \ddfrac{2(1-2^{\lfloor \lg  n \rfloor})}{1-2} \leq 2n$&lt;/p&gt;
&lt;p&gt;The amortized cost of n operations is $\mathcal{O}(n)$, and hence the amortzed cost of one    operation is $\mathcal{O}(1)$.&lt;/p&gt;
&lt;h3 id=&#34;ex-4&#34;&gt;Ex. 4&lt;/h3&gt;
&lt;p&gt;Define potential function $\Phi(D_i)$ to be the number of 1-bits in the binary representation of i. Note $\Phi(D_0) = 0$ and $\Phi(D_i) \geq 0$ which suffices to show the validity of our    definition.&lt;/p&gt;
&lt;p&gt;Observe the amortized cost of operations:
\begin{align}
c_i&amp;rsquo; =
\begin{array}{lr}
i+1-i=1, &amp;amp; \text{i is a power of 2} \\
1+1=2, &amp;amp; \text{if i is odd} \\
1 + \Delta \Phi(D_i) \leq 1, &amp;amp; \text{if i is even but not power of 2}
\end{array}
\end{align}&lt;/p&gt;
&lt;p&gt;When i is odd, it has one additional 1-bit over even i-1, due to the right most bit being only flipped from 0 to 1. When i is even, then i-1 is odd, and at least one 1-bit is flipped to     zero and at most one 0-bit is flipped to 1. So $\Delta \Phi(D_i) \leq 0$. When $i = 2^k$, a power of two, then $\Phi(D_i) = 1$ because there&amp;rsquo;s exactly one 1-bit. Also, i-1 contains exactly  i 1-bits, So $\Phi(D_{i-1}) = i$.&lt;/p&gt;
&lt;p&gt;In all cases, the amortized cost of a single operation is $\mathcal{O}(1)$.&lt;/p&gt;
&lt;h3 id=&#34;ex-5&#34;&gt;Ex. 5&lt;/h3&gt;
&lt;p&gt;Done&lt;/p&gt;
&lt;h3 id=&#34;ex-6&#34;&gt;Ex. 6&lt;/h3&gt;
&lt;p&gt;Each element of the array needs to be compared with the &lt;em&gt;pivot&lt;/em&gt; only once to conclude whether it is greater or less than it.&lt;/p&gt;
&lt;h3 id=&#34;ex-7&#34;&gt;Ex. 7&lt;/h3&gt;
&lt;p&gt;Since $0 &amp;lt; \alpha \leq \ddfrac{1}{2}$ branching $1 - \alpha$ is greater or equal than         branching $\alpha$. Maximum depth is $\lg_{\ddfrac{1}{1-\alpha}} n = \ddfrac{\lg n}{\lg       \ddfrac{1}{1-\alpha}} = \ddfrac{\lg n}{\lg 1 - \lg (1-\alpha)}$ and minimum depth is          $\lg_{\ddfrac{1}{\alpha}} n = \ddfrac{\lg n}{\lg \ddfrac{1}{\alpha}} = \ddfrac{\lg n}{\lg 1 - \lg\alpha}$. The fact $\lg 1 = 0$ concludes the intended result.&lt;/p&gt;
&lt;h3 id=&#34;ex-8&#34;&gt;Ex. 8&lt;/h3&gt;
&lt;p&gt;Failed to solve.&lt;/p&gt;
&lt;p&gt;Through the same reasoning of establishing upper-bound, we derived a lower-bound of           $\Omega(\lg n)$.&lt;/p&gt;
&lt;h2 id=&#34;problems&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;prob-1&#34;&gt;Prob. 1&lt;/h3&gt;
&lt;p&gt;The obvious FIFO queue satisfies the problem&amp;rsquo;s requirements. Think of a list of numbers where integers are &lt;em&gt;enqueued&lt;/em&gt; to left and &lt;em&gt;dequeued&lt;/em&gt; from right.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;list.min&lt;/em&gt; variable is maintained whenever a new integer is added, Checking whether it&amp;rsquo;s less than &lt;em&gt;list.min&lt;/em&gt; and updating accordingly. Whenever &lt;em&gt;dequeue&lt;/em&gt; is called, we check whether      removed integer is equal to &lt;em&gt;list.min&lt;/em&gt;. If not, no additional work is done. If yes, we know by the distinctness of integers, that the &lt;em&gt;list.min&lt;/em&gt; is removed from the list, and hence it must  be updated. A linear scan is implemented to update &lt;em&gt;list.min&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;While the worst-case analysis of &lt;em&gt;dequeue&lt;/em&gt; is linear, That worst case of removing the &lt;em&gt;list.min&lt;/em&gt; happens in proportion to the number of integers enqueued, which in turn allows us to         conclude an amortized cost of $\mathcal{O}(1)$.&lt;/p&gt;
&lt;p&gt;The central key idea is to loop only once on each element, from left to right, storing in each &lt;em&gt;element.min&lt;/em&gt;, The minimum integer of the sub-array starting from left-most to current         element&amp;rsquo;s position. Now whenever we need to loop again to find &lt;em&gt;list.min&lt;/em&gt;, We do not loop on already-visited elements, but only on newly inserted elements. We assign &lt;em&gt;list.min&lt;/em&gt; to be the    minimum integer of that new sub-array. Observe we can conclude the minimum of the whole list, from &lt;em&gt;list.min&lt;/em&gt; and right-most &lt;em&gt;element.min&lt;/em&gt; stored in visited elements. It&amp;rsquo;s basically         &lt;em&gt;min(list.min, element.min)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We continue in this manner untill all visited elements are dequeued. Then we are left with a list of totally no visited elements, and &lt;em&gt;list.min&lt;/em&gt; is the minimum integer of the whole list.&lt;/p&gt;
&lt;h4 id=&#34;a&#34;&gt;a&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;element&lt;/strong&gt; contains &lt;em&gt;int&lt;/em&gt; holding the integer value and &lt;em&gt;min&lt;/em&gt; storing the minimum element  of a sub-array.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;list&lt;/strong&gt; contains &lt;em&gt;min&lt;/em&gt; indicating the minimum integer of the unstamped sub-array. That,    besides &lt;em&gt;elements&lt;/em&gt; aforementioned.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;b&#34;&gt;b&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;minAllElements&lt;/strong&gt; Loop from left to right on the whole list, Maintaining the minimum of the sub-array from left-most to currently visiting element, and storing it in each &lt;em&gt;element.min&lt;/em&gt;.  Reset &lt;em&gt;list.min&lt;/em&gt; to $+\infty$ so that it considers only newly inserted elements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enqueue&lt;/strong&gt; Append element to the left of the list. If it&amp;rsquo;s less than &lt;em&gt;list.min&lt;/em&gt;, Update &lt;em&gt;list.min&lt;/em&gt; to it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Find-Min&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;(1) No element is visited in a &lt;em&gt;minAllElements&lt;/em&gt; call before.
&lt;ul&gt;
&lt;li&gt;return &lt;em&gt;list.min&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(2) Some elements are visited in a &lt;em&gt;minAllElements&lt;/em&gt; call before.
&lt;ul&gt;
&lt;li&gt;return &lt;em&gt;min(list.min, element.min)&lt;/em&gt;, where the element here is the right-most one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dequeue&lt;/strong&gt; Assign &lt;em&gt;localMin=Find-Min()&lt;/em&gt;, and remove the element. For case (1), if removed element is equal to &lt;em&gt;localMin&lt;/em&gt;, &lt;em&gt;minAllElements&lt;/em&gt; is called.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;c&#34;&gt;c&lt;/h4&gt;
&lt;p&gt;We skip a proof by invariance is it seems unnecessarily. We believe our discussion suffices   to convince the reader our design covers all cases.&lt;/p&gt;
&lt;h4 id=&#34;d&#34;&gt;d&lt;/h4&gt;
&lt;p&gt;Trivially, &lt;em&gt;Enqueue&lt;/em&gt; and &lt;em&gt;Find-Min&lt;/em&gt; are $\mathcal{O}(1)$, and $minAllElements$ is             $\mathcal{\theta}(n)$. &lt;em&gt;Dequeue&lt;/em&gt;&amp;rsquo;s worst-case is $\mathcal{\theta}(n)$ due to the call of     &lt;em&gt;minAllElements&lt;/em&gt;. So, &lt;em&gt;m&lt;/em&gt; operations are upper-bounded by $\mathcal{\omega}(m^2)$.&lt;/p&gt;
&lt;p&gt;The goal now, by the &lt;em&gt;accounting&lt;/em&gt; method, is to show we can pay &lt;em&gt;minAllElements&lt;/em&gt; by an        amortized cost of 2 for &lt;em&gt;Enqueue&lt;/em&gt;. Note we cannot visit an element unless it&amp;rsquo;s enqueued. We   already discussed each element is going to be visited by &lt;em&gt;minAllElements&lt;/em&gt; at most once, Hence the additional credit for each element accommodates the payment.&lt;/p&gt;
&lt;p&gt;Now we have all desired operations to have an amortized cost of $\mathcal{O}(1)$, and a       sequence of m operations costs $\mathcal{O}(m)$.&lt;/p&gt;
&lt;h3 id=&#34;prob-2&#34;&gt;Prob. 2&lt;/h3&gt;
&lt;h4 id=&#34;a-1&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;The event is logically equivalent to, assuming $x_i$ is not the pivot the next recursive call containing $x_i$ has a subarray of size at most $3m/4$.&lt;/p&gt;
&lt;p&gt;Consider the array&amp;rsquo;s elements ordered as $q_1 &amp;lt; q_2 &amp;lt; \dots &amp;lt; q_m$. There are three cases for which the event occurs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(i) The pivot $z \in { \lceil m/4 \rceil, \dots, \lfloor 3m/4 \rfloor + 1 }$. Then $x_i$ is always in a subarray of size at most $3m/4$.&lt;/li&gt;
&lt;li&gt;(ii) $z \in { 1, \dots, \lceil m/4 \rceil -1 }$, and $x_i$ is in the left subarray.&lt;/li&gt;
&lt;li&gt;(iii) $z \in { \lfloor 3m/4 \rfloor + 2, \dots, m }$, and $x_i$ is in the right subarray.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We ignore (ii) and (iii) and prove (i) concludes the desired lower-bound of probability $1/2$.&lt;/p&gt;
&lt;p&gt;Since the pivot is randomly selected, we know the probability of $q_i$ being the pivot is $1/m$. There are exactly $\lfloor 3m/4 \rfloor + 1 - \lceil m/4 \rceil + 1$ elements. So the        probability is:&lt;/p&gt;
&lt;p&gt;\begin{align*}
\geq &amp;amp; \ddfrac{1}{m} (\left \lfloor \ddfrac{3m}{4} \right \rfloor + 1 - \left \lceil \ddfrac{m}{4} \right \rceil + 1) \\
\geq &amp;amp; \ddfrac{1}{m} ( \ddfrac{3m}{4} - \ddfrac{m}{4} ) \\
= &amp;amp; \ddfrac{1}{m} \cdot \ddfrac{m}{2}  = \ddfrac{1}{2}
\end{align*}&lt;/p&gt;
&lt;h4 id=&#34;b-1&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;Assume the algorithm lasted for iteration $3(2 + \ddfrac{1}{\log_2 4/3}) \log_2 n = 3(\alpha + c) \log_2 n$. By the instructor&amp;rsquo;s claim and exercise &lt;em&gt;a&lt;/em&gt;, We know the array size is reduced by a factor of at most $3m/4$ for at least $\ddfrac{1}{\log_2 4/3} ; \log_2 n = \log_{4/3} n$ times. Thus the array size is at most $\ddfrac{n}{(4/3)^{\lg_{4/3}n}} = 1$ and the algorithm      terminates. Therefore with probability at least $1 - \ddfrac{1}{n^2}$, The number of comparisons is logarithmic for $d \leq 3(2+\ddfrac{1}{\log_2 4/3})$.&lt;/p&gt;
&lt;h4 id=&#34;c-1&#34;&gt;c&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Definition 1.&lt;/strong&gt; Let $k_i$ denote the event, that the total comparisons of $x_i$ with pivots is at most $d \lg n$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma 2.&lt;/strong&gt; $prob[\neg k_1 \vee \neg k_2 \vee \dots \vee \neg k_n] \leq \ddfrac{1}{n}$.&lt;/p&gt;
&lt;p&gt;Immediately follows by the fact $prob[\neg k_i] = \ddfrac{1}{n^2}$ and the union bound. Note $\ddfrac{1}{n^2} + \dots + \ddfrac{1}{n^2} = n \ddfrac{1}{n^2} = \ddfrac{1}{n}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollary 3.&lt;/strong&gt; $prob[k_1 \wedge \dots \wedge k_n] \geq 1 - \ddfrac{1}{n}$&lt;/p&gt;
&lt;p&gt;The event is the logical negation of the event in &lt;strong&gt;lemma 2&lt;/strong&gt;. Hence $prob[k_1 \wedge \dots \wedge k_n] = 1 - prob[\neg k_1 \vee \neg k_2 \vee \dots \vee \neg k_n] \geq 1 - \ddfrac{1}{n}$.&lt;/p&gt;
&lt;h4 id=&#34;d-1&#34;&gt;d&lt;/h4&gt;
&lt;p&gt;The procedure of &lt;em&gt;c&lt;/em&gt; yields probability $1 - \ddfrac{1}{n^{\alpha-1}} = 1 -                   \ddfrac{1}{n^{1}}$ from $\alpha = 2$ in &lt;em&gt;b&lt;/em&gt;. But the procedure of &lt;em&gt;b&lt;/em&gt; is general enough, So   we can select any $\alpha$ instead of just $\alpha = 2$. In other words, For any $\alpha$ we  can set $\alpha + 1$ in &lt;em&gt;b&lt;/em&gt; and get the desired probability bound.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 04</title>
      <link>https://mostafatouny.github.io/odonnell-undergrad-post/pset04/</link>
      <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/odonnell-undergrad-post/pset04/</guid>
      <description>&lt;h2 id=&#34;ex-1&#34;&gt;Ex. 1&lt;/h2&gt;
&lt;h3 id=&#34;a&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;Obviously the problem has a polynomial-time verifier by specifying the range of the subsequence common among all $w_i$. It&amp;rsquo;s easy to loop on that range $k$, Checking whether corresponding positions of all $w_j$ are the same.&lt;/p&gt;
&lt;h3 id=&#34;b&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;Obviously a verifier is some input $x_0$ such that $C_1(x_0) \neq C_2(x_0)$. It&amp;rsquo;s easy to  compute both circuits and check their unequal output.&lt;/p&gt;
&lt;h2 id=&#34;ex-2&#34;&gt;Ex. 2&lt;/h2&gt;
&lt;p&gt;Intuitively, If a problem has some varifier, Then we can brute-force all possible verifiers. Observe we can choose the greatest branching factor $c_{max}$ so that time is upper-bounded by $c_{max}^{poly(n)}$. Alternatively, Our argument might be seen through the perspective of a tree of an $NP$ problem, where $poly(n)$ is the time required of the longest path of the tree.&lt;/p&gt;
&lt;p&gt;I am not aware of any more rigorous proof.&lt;/p&gt;
&lt;h2 id=&#34;ex-3&#34;&gt;Ex. 3&lt;/h2&gt;
&lt;h3 id=&#34;a-1&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;For clarity and brevity we list all cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unit clause $x_i$
&lt;ul&gt;
&lt;li&gt;delete any clause containing $x_i$&lt;/li&gt;
&lt;li&gt;delete $\neg x_i$ from any clase&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unit clause $\neg x_i$
&lt;ul&gt;
&lt;li&gt;delete any clause containing $\neg x_i$&lt;/li&gt;
&lt;li&gt;delete $x_i$ from any clause&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Due to symmetry we mention only the case of unit clause $x_i$.&lt;/p&gt;
&lt;p&gt;We prove the new propagated $C&amp;rsquo;$ is satisfiable if and only if the given $C$ is satisfiable.&lt;/p&gt;
&lt;p&gt;$(\leftarrow)$ Necessarily $x_i = True$. Hence any clause containing $x_i$ is immediately evaluated to $True$ as well. Since $\neg x_i = False$ one of the remaining units of the clause containing $\neg x_i$ must be evaluated to $True$.&lt;/p&gt;
&lt;p&gt;$(\rightarrow)$ Following the same reasoning, Since $x_i = True$, adding any clause containig $x_i$ is still going to be true regardless of other units boolean values. Also adding $\neg x_i = False$ to any clause evaluated to $True$ won&amp;rsquo;t change the whole clause&amp;rsquo;s boolean value.&lt;/p&gt;
&lt;h3 id=&#34;b-1&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;We give a constructive polynomial-time algorithm. We follow the hint mentioned in the problem statement.&lt;/p&gt;
&lt;p&gt;For case (ii), Loop on clauses, and for each:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If no negative literal is assigned any value, Conveniently pick-up the first negative literal $\neg x_k$ and assign $x_k = False$.&lt;/li&gt;
&lt;li&gt;If a negative literal $\neg x_k$ is assigned $x_k = False$, Continue to the next clause.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Observe we only assign $x_k = False$. As a result, the case of a negative literal $\neg x_k$ assigned $x_k = True$ won&amp;rsquo;t ever be encountered.&lt;/p&gt;
&lt;p&gt;For case (i), Keep applying the process of $a$, Until all unit-clauses are eliminated. If any clause is empty, It&amp;rsquo;s concluded the given $C$ is unsatisfiable. Now we know every clause contains at least two literals, Including a negative literal. Case (i) is now reduced to case (ii).&lt;/p&gt;
&lt;h2 id=&#34;ex-4&#34;&gt;Ex. 4&lt;/h2&gt;
&lt;h3 id=&#34;a-2&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;Clearly, If literals $x_i$ which are assigned to $1$ are even, Then they can re-arranged as pairs, Each yielding $0$, and in turn all pairs yield $0$. Observe for an even number, $2k$ mod 2 = 0.&lt;/p&gt;
&lt;p&gt;Similarly, if literals $x_i$ which are assigned to $1$ are odd, Then we obtain 1 XOR 0 = 1, by separating one literal from the remaining even literals.&lt;/p&gt;
&lt;h3 id=&#34;b-2&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;We define summation as, $\epsilon_1 + \epsilon_2 = c_1 + c_2 + 1$ where are $\sum_i x_{1i} = c_1$ mod $2$ and $\sum_i x_{2i} = c_2$ mod $2$. Note if $c_1 = c_2 = 1$, Then $c_1 +  c_2 + 1 = 1 + 1 + 1 = 1$ mod $2$ and hence $(\epsilon_1 + \epsilon_2)(x) = 1$. On the other hand, If $1 + c_2 + 1 = 1$ mod $2$, Then $c_2 = -1 = 1$ mod $2$. Hence, $\epsilon_2(x) = 1$.&lt;/p&gt;
&lt;h3 id=&#34;c&#34;&gt;c&lt;/h3&gt;
&lt;p&gt;Consider $k_1$ to be the number of equations in which $x_{11}$ appreas.&lt;/p&gt;
&lt;p&gt;\begin{align*}
\text{Update $x_{11}$ to} \hspace{10mm}
{
\begin{array}{lr}
0, &amp;amp;\text{if $k_1$ is even} \\
k_1 x_{11}, &amp;amp;\text{if $k_1$ is odd}
\end{array}
}
\end{align*}&lt;/p&gt;
&lt;p&gt;Remark in case $k_1 = 2m$ is even, Then $\sum_{j=1}^{2m} x_{1j} = 2(m x_{11}) = 0$ mod $2$. That, Regardless of $x_{1j}$ values, as we would always obtain an even number.&lt;/p&gt;
&lt;p&gt;Now consider the whole system of equations by summing all equations as we defined in &lt;em&gt;b&lt;/em&gt;. In  case $k_1$ is even, Then we know $x_{1j}$ evaluates to zero, and hence their removal from the system doesn&amp;rsquo;t affect. In case $k_1$ is odd, Then $k_1 x_{11}$ is exactly equivalent to $x_{11} + x_{12} + \dots + x_{1n}$. Think of redistributing $x_{1j}$ to reconstruct the original equations before the transformation, which clarifies why the new system is equivalent to the original one.&lt;/p&gt;
&lt;h3 id=&#34;d&#34;&gt;d&lt;/h3&gt;
&lt;p&gt;If at any stage $0 = 1$ is concluded, Then no matter what $x$ is inputted, The system won&amp;rsquo;t be satisfied. Since the transformed system is equivalent to the original one, It&amp;rsquo;s trivial why the original system is unsatisfiable.&lt;/p&gt;
&lt;p&gt;Observe in &lt;em&gt;modulus 2&lt;/em&gt;, the only possible evaluation outcomes are $0$ or $1$. So if $LHS \neq RHS$, then necessarily we get $0 = 1$. If we don&amp;rsquo;t get $0 = 1$, then all equations&amp;rsquo; evaluations are satisfied.&lt;/p&gt;
&lt;p&gt;Observe also if $k_{ii} x_{ii} = c , mod , 2$ then by our definitions we know $k_{ii}$ is odd. It follows there&amp;rsquo;s exactly one unique solution for $x_ii$.&lt;/p&gt;
&lt;p&gt;As the instructor hinted, back-substitution can be applied recursively to compute $x_{nn}$, $x_{n-1 , n-1}$, .., $x_{11}$ where once $x_{ii}$ is computed, For all the above equations, Their number of variables are reduced by one. Only one literal $x_{i-1 , i-1}$ is left for the next equation.&lt;/p&gt;
&lt;p&gt;As a valid assignment $x$ for the transformed system is constructed, The original system is satisfied by $x$ also.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 04</title>
      <link>https://mostafatouny.github.io/mit-analysis1c-post/pset04/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/mit-analysis1c-post/pset04/</guid>
      <description>&lt;h2 id=&#34;problem.-1&#34; class=&#34;unnumbered&#34;&gt;Problem. 1&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   If $x_{n+1} \leq \lambda x_n$, where $0 \leq \lambda &amp;lt; 1$, Then the sequence ${x_n}$ gets artbitrarily small&lt;br&gt;
Clearly $x_{1+k} \leq \lambda^k x_1$, by substituting successive terms in the inequality. Given $\epsilon &amp;gt; 0$ we can reach $\lambda^k x \leq \epsilon$ by setting $k \geq \log_\lambda y/x$.&lt;/p&gt;
&lt;p&gt;Fix any x in the metric space, Then construct the following sequence: ${f^n(x)} = f^0(x), f^1(x), f^2(x), \dots$. We prove it is cauchy. Consider $d(f^n(x),f^m(x))$ of some tail where $n &amp;lt; m$. By the &lt;em&gt;triangular inequality&lt;/em&gt;, We know the distance is upper-bounded by $d(f^n(x),f^{n+1}(x)) + d(f^{n+1}(x),f^{n+2}(x)) + \dots + d(f^{m-1}(x),f^m(x)) \leq (m-n+1)   \lambda^{n-1}  d(f^1(x),f^2(x))$. By &lt;em&gt;Lemma 1&lt;/em&gt; and substituting distances by a sequence ${x_n}$ our intended result is concluded.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Given $X$ is &lt;em&gt;complete&lt;/em&gt; we know our sequence ${f^n(x)}$ converges. Call it $q$. We show it converges also to $f(q)$, and by the uniqueness of limits, The main theorem of $f(x) = x$ for some $x$ is concluded. Observe $d(f^{n+1}(x),f(q)) \leq d(f^n(x),q)$, but the right hand side of the inequality is arbitrarily small. QED.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note.&lt;/strong&gt; This problem was solved with assistance by wonderful friends. The main key idea of using the uniqueness of limits was given by them. See the following chat:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./0.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./1.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./2.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./3.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./4.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./5.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./6.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./7.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./8.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./9.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./10.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./11.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./12.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;problem.-2&#34; class=&#34;unnumbered&#34;&gt;Problem. 2&lt;/h2&gt;
&lt;p&gt;Suppose $(x_k)$ converges to $q$. Let $\epsilon &amp;gt; 0$ be arbitrary. We already have $N_0$ where for any $k \geq N_0$ $x_k - q &amp;lt; \epsilon$. For a given permuted sequence $(x_{g(k)})$, We now show there&amp;rsquo;s $N_1$ where for any $n \geq N_1$, $x&amp;rsquo;_{n} - q &amp;lt; \epsilon$.&lt;/p&gt;
&lt;p&gt;Observe $x_1, \dots, x_{N_0-1}$ are finite. Consider indices $g(1), \dots, g(N_0-1)$ and take the maximum. Call it $g_{max}(N_0-1)$. Clearly for any index $i$ greater than it, we know $x_i&amp;rsquo;$ is not equal to any one of $x_1, \dots, x_{N_0-1}$. So it is contained in the trail $x_{N_0}, x_{N_0+1}, \dots$. Thus, $x_i&amp;rsquo; - q &amp;lt; \epsilon$ for any $i &amp;gt; g_{max}(N_0-1)$.&lt;/p&gt;
&lt;p&gt;It is not true if we dropped the assumption that $g$ is one-to-one. A counter example is a permutation function whose range is exactly one element of $\mathcal{N}$.&lt;/p&gt;
&lt;h2 id=&#34;problem.-3&#34; class=&#34;unnumbered&#34;&gt;Problem. 3&lt;/h2&gt;
&lt;p&gt;The is exactly the same as theorem 3.4 in Rudin&amp;rsquo;s page 50.&lt;/p&gt;
&lt;h2 id=&#34;problem.-4&#34; class=&#34;unnumbered&#34;&gt;Problem. 4&lt;/h2&gt;
&lt;p&gt;Postponed&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 03</title>
      <link>https://mostafatouny.github.io/erik-alg-post/pset03/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/erik-alg-post/pset03/</guid>
      <description>&lt;h2 id=&#34;exercises&#34;&gt;Exercises&lt;/h2&gt;
&lt;h3 id=&#34;ex-31&#34;&gt;Ex. 3.1&lt;/h3&gt;
&lt;p&gt;Done.&lt;/p&gt;
&lt;h3 id=&#34;ex-32&#34;&gt;Ex. 3.2&lt;/h3&gt;
&lt;p&gt;Skipped; I don&amp;rsquo;t understand the problem.&lt;/p&gt;
&lt;h3 id=&#34;ex-2&#34;&gt;Ex. 2&lt;/h3&gt;
&lt;p&gt;Skipped; I don&amp;rsquo;t understand the problem.&lt;/p&gt;
&lt;h2 id=&#34;problems&#34;&gt;Problems&lt;/h2&gt;
&lt;h3 id=&#34;prob-31&#34;&gt;Prob. 3.1&lt;/h3&gt;
&lt;p&gt;psuedo-code changes; compare new complexity with old one&lt;/p&gt;
&lt;h4 id=&#34;a&#34;&gt;a&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Psuedo-code.&lt;/strong&gt; No Changes at all. Note the sequence $2^9 \rightarrow 2^3 \rightarrow 2^1$, up to the base case of $u = 2$ as before, starting with total data of size $2^9 = 512$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Complexity.&lt;/strong&gt; Similarly $\mathcal{O}(\lg \lg u)$. We follow the same reasoning on the master method but on the case of a cluster size $u^{1/3}$. We gain $\lg_b a = \lg_3 1 = 0$, or more accurately $\lg_b a = \lg_{4/3} 1 = 0$, whereby $\lceil m/3 \rceil \leq 3m/4$. Thus, Reaching exactly the same complexity.&lt;/p&gt;
&lt;h4 id=&#34;b&#34;&gt;b&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;vEB-TREE-MIN&lt;/code&gt; No Changes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vEB-TREE-MAX&lt;/code&gt; No Changes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vEB-TREE-MEMBER(V, x)&lt;/code&gt; No Changes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vEB-TREE-SUCCESSOR(V, x)&lt;/code&gt; No Changes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vEB-TREE-PREDOCESSOR(V, x)&lt;/code&gt; Symmetric, Skipped.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vEB-EMPTY-TREE-INSERT(V, x)&lt;/code&gt; No Changes.&lt;/p&gt;
&lt;p&gt;Intuitively, We apply the same trick of swapping &lt;code&gt;V.min&lt;/code&gt;. Complexity is the same, as we only re-ordered a constant-complexity code block.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vEB-TREE-INSERT(V, x)
  if V.min == NIL
    vEB-EMPTY-TREE-INSERT(V, x)
  else 
    if x &amp;lt; V.min
      exchange x with V.min
    if x &amp;gt; V.max
      exchange x with V.max
    if V.u &amp;gt; 2
      if vEB-TREE-MINIMUM(V.cluster[high(x)] == NIL
        vEB-TREE-INSERT(V.summary, high(x))
        vEB-EMPTY-TREE-INSERT(V.cluster[high(x)], low.x)
    else
	  vEB-TREE-INSERT(V.cluster[high(x)], low.x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Intuitively, We apply the same trick of updating &lt;code&gt;V.min&lt;/code&gt; and assigning &lt;code&gt;x&lt;/code&gt; to a new value before the delete operation. In this case, there&amp;rsquo;s no need to check for &lt;code&gt;summary&lt;/code&gt; as &lt;code&gt;V.max&lt;/code&gt; will be already set to either &lt;code&gt;V.min&lt;/code&gt; or the suitable &lt;code&gt;index&lt;/code&gt; value. Complexity is the same for exactly the same reasoning&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vEB-TREE-DELETE(V, x)
.
..
else
  if x == V.min
    first-cluster = vEB-TREE-MINIMUM(V.summary)
    x = index(first-cluster, vEB-TREE-MINIMUM(V.cluster[first-cluster]))
    V.min = x
  elseif x == V.max
    last-cluster = vEB-TREE-MAXIMUM(V.summary)
	x = index(high(x), vEB-TREE-MAXIMUM(V.cluster[high(x)]))
    V.max = x
	
  vEB-TREE-DELETE(V.cluster[high(x)], low(x))

  if vEB-TREE-MINIMUM(V.cluster[high(x)]) == NIL
    vEB-TREE-DELETE(V.summary, high.x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Algorithm&amp;rsquo;s correctness are not proved. We relied only on our intuition. Not comfortable the new modification is simpler and yet offers the same complexity; Why not illustrated in this way by the author?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 03</title>
      <link>https://mostafatouny.github.io/odonnell-undergrad-post/pset03/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/odonnell-undergrad-post/pset03/</guid>
      <description>&lt;h2 id=&#34;ex-1&#34;&gt;Ex. 1&lt;/h2&gt;
&lt;p&gt;The proof is already mentioned in sipser. We can easily reprove it using the diagonalization argument.&lt;/p&gt;
&lt;h2 id=&#34;ex-2&#34;&gt;Ex. 2&lt;/h2&gt;
&lt;p&gt;Enumerate all the two choices of a node colored in (red or blue), or colored in yellow, on all nodes. Consider the two subgraphs separately; If the yellow subgraph contains any edge reject the instance. Check if the other subgraph is 2-colorable. Only if yes, accept as the whole graph as 3-colorable.&lt;/p&gt;
&lt;p&gt;The complexity is justified, Since checking 2-colorable is polynomially solved, on each instance of all two choices, on all nodes.&lt;/p&gt;
&lt;p&gt;Clearly, If the graph is 3-colorable, then the algorithm catches the instance corresponding to nodes correctly colored in yellow and others in either red or blue. On the other hand, If the algorithm found a solution, Then the graph is 3-colorable, As the solution can easily be constructed.&lt;/p&gt;
&lt;h2 id=&#34;ex-3&#34;&gt;Ex. 3&lt;/h2&gt;
&lt;p&gt;Observe the cases of $x_i$ and $x_j$ of the binary relation $x_i \leq x_j$.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) Both are assigned by a given condition&lt;/li&gt;
&lt;li&gt;(2) One is assigned 0 and the other is equal or less&lt;/li&gt;
&lt;li&gt;(2) One is assigned 1 and the other is equal or greater&lt;/li&gt;
&lt;li&gt;(3) Both are not assigned&lt;/li&gt;
&lt;li&gt;(4) One is assigned 0 and the other is equal or greater&lt;/li&gt;
&lt;li&gt;(4) One is assigned 1 and the other is equal or less&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We give an algorithm that costs exactly one linear scan. Scan all binary relations $x_i \leq x_j$, If&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;of type (1), Check whether assigned values conform to the relation, and reject satisfiability if not.&lt;/li&gt;
&lt;li&gt;of type (2), Assign 0 and 1, Correspondingly, So that values conform to the relation. If a conflict is faced, where there&amp;rsquo;s a prior assignment, that precludes from assigning what satisfies the relation, reject.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To see why the algorithm is correct, We construct a valid solution, Given what the algorithm had already verified. For case&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(3), assign $x_i = 0$ and $x_j$ arbitrarily $0$ or $1$&lt;/li&gt;
&lt;li&gt;(4), assign arbitrarily $0$ or $1$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clearly, cases $3$ and $4$, do not conflict with cases $1$ or $2$, Since the algorithm has already checked and assigned what satisfies cases $1$ and $2$. Case $3$ doesn&amp;rsquo;t conflict with $4$, As $4$ allows any assignment. Remaining $x_i$ with no conditions at all, can be arbitrarily assigned as well.&lt;/p&gt;
&lt;h2 id=&#34;ex-4&#34;&gt;Ex. 4&lt;/h2&gt;
&lt;p&gt;From &lt;em&gt;hw02-2-b&lt;/em&gt;, We are given a procedure &lt;em&gt;haltMachine(T, f(n))&lt;/em&gt; that produces a Turing Machine $T_{f(n)}$, which is exactly the same as machine $T$, but halts within $f(n)$ steps; If $T$ terminates within $f(n)$, Then $T_{f(n)}$ produces the same output; Otherwise rejects. Note $T_{f(n)}$ is multi-tab, whereby at each step simulated of $T$, a counter on a specific tab is increased by one.&lt;/p&gt;
&lt;h3 id=&#34;a&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;For any polynomial time machine $T$, We know it runs in time at most $kn^k$. $T_{kn^k}$ simulates $T$ upto $kn^k$ steps which suffices to ensure it produces the same output.&lt;/p&gt;
&lt;h3 id=&#34;b&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;Since $T$ is polynomial, and at each step, counter increase is polynomial, The total resulting complexity is polynomial.&lt;/p&gt;
&lt;h3 id=&#34;c&#34;&gt;c&lt;/h3&gt;
&lt;p&gt;Observe to construct $T_{f(n)}$, We would need to integrate a sub-routine that increases counter by one, where every state points to it after completing its one-step operation. For every state $q_i$, we create a new state $q_{i-counter}$ such that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$q_i$ transitions to $q_{i-counter}$, instead of $q_r$ as in $T$, exactly after one-step.&lt;/li&gt;
&lt;li&gt;$q_{i-counter}$ transitions to $q_r$, what $q_i$ transitions to in $T$, after completing all steps required for increasing counter by one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clearly the transformation is linear in time.&lt;/p&gt;
&lt;h3 id=&#34;d&#34;&gt;d&lt;/h3&gt;
&lt;p&gt;Alice can basically check for the sub-routine that increases counter by one, and check for the state that terminates the machine, upon the counter reaching $f(n)$.&lt;/p&gt;
&lt;p&gt;The algorithm of checking polynomiality is clear, if the reader is convinced by the procedure of transformation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 03</title>
      <link>https://mostafatouny.github.io/mit-analysis1c-post/pset03/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/mit-analysis1c-post/pset03/</guid>
      <description>&lt;h2 id=&#34;problem.-1&#34; class=&#34;unnumbered&#34;&gt;Problem. 1&lt;/h2&gt;
&lt;p&gt;The required conditions follow naturally as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$d&amp;rsquo;(x,x) = \sqrt{d(x,x)} = \sqrt{0} = 0$.&lt;/li&gt;
&lt;li&gt;If $d(x,y) &amp;gt; 0$ then $d&amp;rsquo;(x,y) &amp;gt; 0$ as the square root of non-zero is non-zero. Otherwise $0^2 = 0$ contradicting the fact $d&amp;rsquo;(x,y) &amp;gt; 0$.&lt;/li&gt;
&lt;li&gt;$d&amp;rsquo;(x,y) = \sqrt{d(x,y)} = \sqrt{d(y,x)} = d&amp;rsquo;(y,x)$.&lt;/li&gt;
&lt;li&gt;$d&amp;rsquo;(x,y) = \sqrt{d(x,y)} \leq \sqrt{d(x,r) + d(r,y)} \leq \sqrt{d(x,r)} + \sqrt{d(r,y)} = d&amp;rsquo;(x,r) + d&amp;rsquo;(r,y)$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For an arbitrary open-set of $d$, $\set{ y | d(x,y) &amp;lt; r }$ there is an equivalent open-set of $d&amp;rsquo;$, $\set{ y | d&amp;rsquo;(x,y) &amp;lt; \sqrt{r} }$. For an arbitrary open-set of $d&amp;rsquo;$, $\set{ y | d&amp;rsquo;(x,y) &amp;lt; r }$, there is an equivalent open-set of $d$, $\set{ y | d(x,y) &amp;lt; r^2 }$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note.&lt;/strong&gt; Some good friends assisted in solving this problem.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./3.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;problem.-2&#34; class=&#34;unnumbered&#34;&gt;Problem. 2&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   For any point $p$ in $R$, There exists a smallest element in the set $\set{ q \in E | q &amp;gt; p }$&lt;br&gt;
Assume to the contrary that no smallest element exists. Then as the set is bounded below, the &lt;em&gt;infimum&lt;/em&gt; exists, and is a limit point. That contradicts our hypothesis of no limit points in $E$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollary.&lt;/strong&gt;   $E \cap R^+ = E^+$ has a smallest element&lt;br&gt;
By the above lemma set $p = 0$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollarly.&lt;/strong&gt;   Given $x_i \in E^+$ there exists a smallest element among $E^+ \cap \set{y | y &amp;gt; x_i}$&lt;br&gt;
By the above lemma set $p = x_i$.&lt;/p&gt;
&lt;p&gt;Now we have a counting scheme on $E^+$. What is remaining now is to prove every element in $E$ will be hit eventually. The following lemma suffices.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   there are finitely many elements in $E \cap [- |a| , |a|]$&lt;br&gt;
Assuming the contrary for the sake of contradiction, We get infinite elements in $E \cap [ -|a|, |a| ]$. Those are present in both $E$ and $[ -|a|, |a| ]$ by definition. Since $[ -|a|, |a| ]$ is compact we know any infinite subset has a limit point (&lt;em&gt;Theorem 2.41, p. 40&lt;/em&gt; in &lt;em&gt;baby-rudin&lt;/em&gt;). But then we get a limit point in E. Contradiction.&lt;/p&gt;
&lt;p&gt;Similarly we can prove $E \cap R^- = E^-$ is countable, and hence $E$ is countable also.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note. 1&lt;/strong&gt; Professor Peng Zhou hinted the solution approach&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./4.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note. 2&lt;/strong&gt; Through chatting with good friends a cleaner alternative proof can be made as, &amp;quot;Because E has no limit points it is closed.
Assume E is uncountable. Then there is an integer n such that intersection with [n,n+1] is also uncountable. This intersection is closed and bounded, thus compact. So we can take a sequence inside this intersection and it will have a convergent subsequence contradicting the assumption on limit points&amp;quot;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./0.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./1.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./2.jpg&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;problem.-3&#34; class=&#34;unnumbered&#34;&gt;Problem. 3&lt;/h2&gt;
&lt;p&gt;Assume for the sake of contradiction that the process does not stop after a finite number of steps. Then the sequence $x_i$ is infinite. Consider the infinite subset $\set{x_i} = S_\delta$; By hypothesis it has a limit point in $X$, Call it $p$. So for neighbourhood $N_{\delta/4}(p)$, some point $q_1 \neq p$ is in that neighbourhood. Let $r_1 = d(p, q_1)$. Consider neighbourhood $N_{r_1/2}(p)$; Clearly $q_1$ is not in it. So there is a point $q_2 \neq q_1$ in it. We have now distinct points $q_1,q_2 \in S$ such that $d(p,q_1) \leq \delta/4$ and $d(p,q_2) \leq \delta/4$. It follows $d(q_1,q_2) \leq d(q_1,p) + d(p,q_2) \leq \delta/4 + \delta/4 = \delta/2$. But the construction of sequence $x_i$ stipulates every pair of points is of distance at least $\delta$. Contradiction.&lt;/p&gt;
&lt;p&gt;It follows by the above lemma, that for any point $p$ in $X$, the distance between it and some $x_i$ of $S$ is strictly less than $\delta$. Therefore $p$ is covered by $N_\delta{x_i}$.&lt;/p&gt;
&lt;p&gt;Now we prove $X$ is separable. We know for each $\delta = 1/n$, The corresponding subset $S_{1/n}$ is finite. Clearly $\cup_n S_{1/n} = S$ is countably infinite. It suffices to show, For a point $p \in X - S$, it can get arbitrarily close to points of $S$. Consider arbitrary $\delta &amp;gt; 0$ and its corresponding neighbourhood $N_\delta(p)$.&lt;/p&gt;
&lt;p&gt;Take $\delta&amp;rsquo; = \delta/2$, and $n&amp;rsquo; &amp;gt; 0$ such that $1/n&amp;rsquo; &amp;lt; \delta&amp;rsquo;$. Consider $N_{\delta&amp;rsquo;}(p)$. There are two cases.&lt;br&gt;
Case 1: A point $q \in S_{1/n&amp;rsquo;}$ is in $N_{\delta&amp;rsquo;}(p)$, Then it is also in $N_{\delta}(p)$.&lt;br&gt;
Case 2: No point $q \in S_{1/n&amp;rsquo;}$ is in $N_{\delta&amp;rsquo;}(p)$. Then for any $z \in N_{\delta&amp;rsquo;}(p)$ some point $q \in S_{1/n&amp;rsquo;}$ exists such that $d(z,q) &amp;lt; 1/n&amp;rsquo;$. It follows $\delta = \delta/2 + \delta/2 &amp;gt; \delta&amp;rsquo; + 1/n&amp;rsquo; &amp;gt; d(p,z) + d(z,q) \geq d(p,q)$. In other words, $q \in N_{\delta}(p)$.&lt;/p&gt;
&lt;h2 id=&#34;problem.-4&#34; class=&#34;unnumbered&#34;&gt;Problem. 4&lt;/h2&gt;
&lt;p&gt;Failed to solve.&lt;/p&gt;
&lt;p&gt;Partial idea: Establish a sequence $x, f^1(x), f^2(x), f^3(x), \dots$. If I proved it is finite then I am done, as it is necessarily the case $f^k(x) = f^{k+1}(x)$. If it is infinite then a limit point of it exists as $X$ is a compact set.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 02</title>
      <link>https://mostafatouny.github.io/erik-alg-post/pset02/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/erik-alg-post/pset02/</guid>
      <description>&lt;h2 id=&#34;ex-2-1&#34;&gt;Ex. 2-1&lt;/h2&gt;
&lt;p&gt;done&lt;/p&gt;
&lt;h2 id=&#34;ex-2-2&#34;&gt;Ex. 2-2&lt;/h2&gt;
&lt;p&gt;For our own convenience of avoiding tedious computations, we multiply $A(x) = -10 + x$ with $B(x) = 3 - 6x$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Double-degree form&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$A(x) = -10 + x + 0x^2 + 0x^3$&lt;/p&gt;
&lt;p&gt;$B(x) = 3 - 6x + 0x^2 + 0x^3$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Computing A(x) on sample&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Recursive-FFT(-10, 1, 0, 0)
  n = 4
  w_4 = e^{2 pi i / 4}
  w = w_4^0 = 1
  a[even] = (-10, 0)
  a[odd] = (1, 0)
  y[even] = Recursive-FFT(-10, 0) = (-10, -10)
  y[odd] = Recursive-FFT(1, 0) = (1, 1)
  for k=0 to 1
    k=0
	  y_0 = (-10) + (1)(1) = -9
	  y_2 = (-10) - (1)(1) = -11
	  w = w_4^1
	k=1
	  y_1 = (-10) + (e^{1 2 pi i / 4})(1) = -10+i
	  y_3 = (-10) - (e^{1 2 pi i / 4})(1) = -10-i
	  w = w_4^2
  return (-9, -10+i, -11, -10-i)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Recursive-FFT(-10, 0)
  n = 2
  w_2 = e^{2 pi i / 2}
  w = w_2^0 = 1
  a[even] = (-10)
  a[odd] = (0)
  y[even] = Recursive-FFT(-10) = (-10)  // base case
  y[odd] = Recursive-FFT(0) = (0)
  for k=0 to 0
    k=0
	  y_0 = (-10) + w (0) = -10
	  y_1 = (-10) - w (0) = -10
	  w = w_2^1
  return (-10, -10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Recursive-FFT(1, 0)
  n = 2
  w_2 = e^{2 pi i / 2}
  w = w_2^0 = 1
  a[even] = (1)
  a[odd] = (0)
  y[even] = Recursive-FFT(1) = (1) // base case
  y[odd] = Recursive-FFT(0) = (0)
  for k=0 to 0
    k=0
	  y_0 = 1 + w(0) = 1
	  y_1 = 1 - w(0) = 1
	  w = w_2^1
  return (1, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Computing B(x) on sample&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Similarly, we get $y=(-3, 3-6i, 9, 3+6i)$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Computing C(x) on sample, By multiplying corresponding sample points of A and B&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$y = ((-9)(-3), (-10+i)(3-6i), (-11)(9), (-10-i)(3+6i)) = (27, -24+63i, -99, -24-63i)$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interpolating C(x) coefficients&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Recursive-IFFT(27, -24+63i, -99, -24-63i)
  n = 4
  w_4^-1 = e^{-1 i 2 pi / 4}
  w = w_4^0 = 1
  y[even] = (27, -99)
  y[odd] = (-24+63i, -24-63i)
  a[even] = Recursive-IFFT(27, -99) = (-72, 126)
  a[odd] = Recursive-IFFT(-24+63i, -24-63i) = (-48, 126i)
  for k=0 to 1
    k=0
	  y_0 = (-72) + (1)(-48) = -120
	  y_2 = (-72) - (1)(-48) = -24
	  w = w_4^-1
	
	k=1
	  y_1 = (126) + (e^{-1 i 2 pi / 4})(126i) = 252
	  y_3 = (126) - (e^{-1 i 2 pi / 4})(126i) = 0
	  w = w_4^-2
  return (-120, 252, -24, 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Recursive-IFFT(27, -99)
  n = 2
  w_2^-1 = e^{-1 i 2 pi / 2}
  w = w_2^0 = 1
  y[even] = (27)
  y[odd] (-99)
  a[even] = Recursive-IFFT(27) = (27)  // base case
  a[odd] = Recursive-IFFT(-99) = (-99)
  for k=0 to 0
    k=0
	  y_0 = 27 + (1)(-99) = -72
	  y_1 = 27 - (1)(-99) = 126
	  w = w_2^-1
  return (-72, 126)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Recursive-IFFT(-24+63i, -24-63i)
  n = 2
  w_2^-1 = e^{-1 i 2 pi /2}
  w = w_2^0 = 1
  y[even] = (-24+63i)
  y[odd] = (-24-63i)
  a[even] = Recursive-IFFT(-24+63i) = (-24+63i)
  a[odd] = Recursive-IFFT(-24-63i) = (-24-63i)
  for k=0 to 0
    k=0
	  y_0 = (-24+63i) + (1)(-24-63i) = -48
	  y_1 = (-24+63i) - (1)(-24-63i) = 126i
  return (-48, 126i)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hence, Final answer is (-120, 252, -24, 0)/4 = (-30, 63, -6, 0), and resulting polynomial is $C(x) = -30 + 63x - 6x^2$.&lt;/p&gt;
&lt;h2 id=&#34;ex-2-3&#34;&gt;Ex. 2-3&lt;/h2&gt;
&lt;p&gt;Modifying &lt;code&gt;Recursive-FFT&lt;/code&gt;, by switching $a$ and $y$, replacing $w_n$ by $w_n^{-1}$. Finally, result vector is divided by $n$.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Recursive-IFFT(y)
  n = y.length
  if n == 1
    return y
  w_n^-1 = e^{-1 2 pi i / n}
  w = 1
  y[even] = (y_0, y_2, ..., y_n-2})
  y[odd] = (y_1, y_3, ..., y_n-1)
  a[even] = Recursive-IFFT(y[even])
  a[odd] = Recursive-IFFT(y[odd])
  for k=0 to n/2 - 1
    a_k = a[even]_k + w a[odd]_k
	a_k+(n/2) = a[even]_k - w a[odd]_k
	w = w w_n^-1
  return a
  
a = a/n
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ex-2-4&#34;&gt;Ex. 2-4&lt;/h2&gt;
&lt;p&gt;done&lt;/p&gt;
&lt;h2 id=&#34;ex-2-5&#34;&gt;Ex. 2-5&lt;/h2&gt;
&lt;p&gt;Create operation accounts for number of pointers filled. Insert operations are modified to allow up to $2t-1$ keys in case of internal node, and up to $(2t-1) + (2t) = 4t-1$ keys in case of leaf node. That, by basically modifying the if condition. Also, insertion in place of pointers happens by checking whether a leaf have $2t-1$ keys.&lt;/p&gt;
&lt;p&gt;Note we haven&amp;rsquo;t rigorously proven our modification is correct; We rely on our intuition to write main parts of new the operations.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;B-TREE-CREATE(T)
  x = ALLOCATE-NODE()
  x.leaf = TRUE
  x.n = 0
  x.n&#39; = 0  // number of pointers to children filled
  DISK-WRITE(x)
  T.root = x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;B-TREE-INSERT(T,k)
  r = T.root
  if (r.n == 2t-1 and not r.leaf) or (r.n == 4t-1 and r.leaf)  // different cases for internal and leaf nodes
    s = ALLOCATE-NODE()
	T.root = s
	s.leaf = FALSE
	s.n = 0
	s.c1 = r
	B-TREE-SPLIT-CHILD(s,1)
	B-TREE-INSERT-NONFULL(s,k)
  else
    B-TREE-INSERT-NONFULL(r,k)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;B-TREE-INSERT-NONFULL(x,k)
  if x.leaf
    i = x.n + x.n&#39;  // sum of both keys and pointers

    while i &amp;gt;= x.n + 1 and k &amp;lt; x.c_(i-x.n)
	  x.c_(i-x.n+1) = x.c_(i-x.n)
	  i = i-1
    while i &amp;gt;= 1 and k &amp;lt; x.key_i
	  x.key_i+1 = x.key_i
	  i = i-1
	
	if i &amp;gt;= x.n + 1
	  x.c_i+1 = k
	  x.n&#39; = x.n&#39; + 1
	else
	  x.key_i+1 = k
	  x.n = x.n + 1
	
	DISK-WRITE(x)

  else
    i = x.n
  
    while i&amp;gt;=1 and k&amp;lt;x.key_i
	  i = i-1
	i = i+1
	
	DISK-READ(x,c_i)
	
	if (x.c_i).n == 2t-1  // note this is an internal node
	  B-TREE-SPLIT-CHILD(x,i)
	  if k &amp;gt; x.key_i
	    i = i+1
	
	B-TREE-INSERT-NONFULL(x.c_i, k)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ex-3-2&#34;&gt;Ex. 3-2&lt;/h2&gt;
&lt;p&gt;We implement the prescription described in p.500.&lt;/p&gt;
&lt;p&gt;Note we haven&amp;rsquo;t rigorously proven our modification is correct; We rely on our intuition to write main parts of new the operations.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;B-TREE-DELETE(x, k)
  // check if k is in node x
  i = x.n
  while i&amp;gt;=1 and x.key_i != k
    i = i-1

  // k is found
  if i&amp;gt;=1

    // x is a leaf node
    if x.leaf
      key_i = NULL
      x.n = x.n - 1
      x.shiftKeysAndPointers()  // for brevity we ignore implementing this subroutine

    // x is an internal node
    else
	  y = x.c_i  // child preceeding k
	  z = x.c_i+1  // child following k
	  
	  // number of keys in child preceeding k is at least t
	  if y.n &amp;gt;= t
	    k&#39; = y.lastKey()  // implementation is ignored
		B-TREE-DELETE(y, k&#39;)
        key_i = k = k&#39;
	
	  // number of keys in child following k is at least t
	  else if z.n &amp;gt;= t
		// symmetrically replace k by k&#39;

      // number of keys in both child following and preceeding k, is less than t
      else 
        mergeInto([y, k, z])  // merge k and z into y. implementation is ignored
		x.c_i+1 = NULL
		B-TREE-DELETE(k)


  // k isn&#39;t found in x
  else
    // find k in children
	i = x.n
    while i &amp;gt;= 1 and k &amp;lt; x.key_i
	  i = i-1
    y = x.c_(i+1) // subtree y containing k

    // guarantee we descend to a node containing at least t keys
	if y.n == t-1
	
   	  if i+2 &amp;lt;= x.n
	    z = x.c_(i+2)  // immediate forward sibling of y
	  if i &amp;gt;= 1
	    r = x.c_(i)  // immediate preceeding sibling of y
	
	  // some sibling contains at least t keys
      if z and z.n &amp;gt;= t
	    B-TREE-INSERT(y, key_i)
	    B-TREE-DELETE(key_i)
	    B-TREE-INSERT(x, z.firstKey())
	    B-TREE-DELETE(z, z.firstKey())
	    // don&#39;t get why a pointer from sibling should be moved to y
	  else if r and r.n &amp;gt;= t
	    // symmetrically
	
	  // both immediate siblings have t-1 keys
	  else
	    mergeInto([r, key_i, y])
		x.c_(i+1) = NULL
        B-TREE-DELETE(x, key_i)
    
	// remove k from child y
    B-TREE-DELETE(y, k)  
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;problem-2-1&#34;&gt;Problem 2-1&lt;/h2&gt;
&lt;h3 id=&#34;a&#34;&gt;a&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Match(S, P)
  n = S.length
  m = P.length
  
  M = []
  
  for i = 0..n-m+1
    flag = true
    for j = 0..m
	  if P[j] != S[i+j] flag = false
	if flag M.append(i)

  return M
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;b&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;Source string $S$ gets encoded as $S(x) = s_0x^0 + s_1x^1 + \dots + s_{n-1}x^{n-1}$, and pattern string $P$ as $P(x) = p_0x^{m-1} + p_1x^{m-2} + \dots + p_{m-1}x^0$, where $s_i$ and $p_i$ are, $1$ or $-1$, if characters $S[i]$ and $P[i]$, are $a$ or $b$, respectively. If $P[i] = *$, Then $p_i = 0$.&lt;/p&gt;
&lt;p&gt;Observe $s_jp_k = 1$ if $S[j] = P[k]$, $s_jp_k = -1$ if $S[j] \neq P[k]$, and $s_jp_k = 0$ if $P[k] = *$. Observe for resulting polynomial $(s \cdot p)(x) = r_0x^0 + r_1x^1 + \cdots + r_{m+n-2}x^{m+n-2}$, Coefficient $r_i = \sum_{j+k=i} s_jp_k$, Exactly matches the sum of multiplying $s_{i-m+1}$, $s_{i-m+2}$, $\dots$, $s_{i-1}$, $s_i$ with $p_0$, $p_1$, $\dots$, $p_{m-1}$, respectively, for $i = m-1, m, \dots, n-1$. If and only if, All corresponding alphabetic characters are equal, Then each contributes to the sum by $+1$. Asterik $*$ always contributes nothing to the sum. Therefore, if $k$ is the number of alphabetic character in $P$ (non asterik characters), Then $r_i = k$ if and only if $P$ matches substring $S[i-m+1..i]$.&lt;/p&gt;
&lt;p&gt;Now we can set output $M$ to be the ordered list of $i$ such that $r_i = k$, Then subtract each entry by $m-1$, so that $i$ matches the position of the first character of the substring.&lt;/p&gt;
&lt;p&gt;Note coefficients $r_0$, $r_1$, $\dots$, $r_{m-2}$ are irrelevant to our consideration, Since they do not consider a matching with the whole characters of pattern string $P$.&lt;/p&gt;
&lt;p&gt;For the example, $S = ababbab$ and $P = ab*$,
\begin{align*}
S(x) &amp;amp;= (1)x^0 + (-1)x^1 + (1)x^2 + (-1)x^3 + (-1)x^4 + (1)x^5 + (-1)x^6 \\
P(x) &amp;amp;= (1)x^2 + (-1)x^1 + (0)x^0 \\
(S \cdot P)(x) &amp;amp;= (-1)x^1 + (x)x^2 + (-2)x^3 + (2)x^4 + (1)x^7 + (-1)x^8 \\
M &amp;amp;= [2, 4] \\
M &amp;amp;= [2 - (m-1), 4 - (m-1)] = [2 - (3-1), 4 - (3-1)] \\
M &amp;amp;= [0, 2]
\end{align*}&lt;/p&gt;
&lt;h3 id=&#34;c&#34;&gt;c&lt;/h3&gt;
&lt;p&gt;$\mathcal{O}(n \lg n)$, Since each operation of my algorithm requires at most a linear scan of complexity $\mathcal{O}(n)$&lt;/p&gt;
&lt;h3 id=&#34;d&#34;&gt;d&lt;/h3&gt;
&lt;p&gt;Exactly as $b$, but characters are encoded as&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;G&lt;/th&gt;
&lt;th&gt;T&lt;/th&gt;
&lt;th&gt;*&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;-i&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;-i&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note if characters are matching, Then as before, each contributes to the sum by $+1$. In case of non-matching, A number less than $+1$ or an imaginary number is contributed.&lt;/p&gt;
&lt;h2 id=&#34;problem-2-2&#34;&gt;Problem 2-2&lt;/h2&gt;
&lt;h3 id=&#34;a-1&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;Merge roots of $T_1$ and $T_2$, placing $k$ in between them. If new root&amp;rsquo;s keys are greater than $2t-1$, Apply the standard operation of split and push median up.&lt;/p&gt;
&lt;p&gt;Note roots of $T_1$ and $T_2$, each has at most $2t-1$ keys. When merging the new root is at most $(2t-1) + (2t-1) + 1 = 4t-1$. If we spllitted, We get a new root of key size exactly 1 and two childs, Each is of size at most $2t-1$.&lt;/p&gt;
&lt;h3 id=&#34;b-1&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;Modify $T_1$ to decrease its height by one, Then apply the same procedure of &lt;em&gt;a&lt;/em&gt;. That, by merging all of $T_1$&amp;rsquo;s children into its root. In other words, $Merge(x.c_0, key_0, x.c_1, key_1, \dots, x.c_{n-1}, key_{n-1}, x.c_{n})$. Note new root of $T_1$ has at most $(2t-1) + (2t)(2t-1) = (2t+1)(2t-1) = 4t^2 - 1$ keys.&lt;/p&gt;
&lt;p&gt;As in &lt;em&gt;a&lt;/em&gt;, Merge $T_1$, $k$, and $T_2$. The new root has at most $(4t^2 - 1) + (2t-1) + 1 = (2t+2)(2t-1) + 1 = 4t^2 + 2t - 1$ keys. Hence we are going to split around $\mathcal{O}(\lg t^2) = \mathcal{O}(\lg t)$ times. Note that shall result in many one-key nodes. So, at most $\mathcal{O}(\lg t)$ merge of one-key nodes, to finally fix the tree. But since $t$ is assumed to be a constant, the total complexity is $\mathcal{O}(1)$.&lt;/p&gt;
&lt;h3 id=&#34;c-1&#34;&gt;c&lt;/h3&gt;
&lt;p&gt;The tree&amp;rsquo;s height is increased only when the root has a full capacity of keys, and a new root is allocated.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;B-TREE-INSERT(T,k)
r = T.root
if r.n == 2t-1
  s = ALLOCATE-NODE()
  T.root = s
  s.leaf = FALSE
  s.n = 0
  s.c1 = r
  s.height = r.height+1  // new root is of height +1 than the previous one
  B-TREE-SPLIT-CHILD(s,1)
  B-TREE-INSERT-NONFULL(s,k)
else
  B-TREE-INSERT-NONFULL(r,k)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tree shrinks only when a merge happens with the root alongside its children. If we assumed the new root is updated to point to one of the children, Then no height variable needs to be updated.&lt;/p&gt;
&lt;h3 id=&#34;d-1&#34;&gt;d&lt;/h3&gt;
&lt;p&gt;Without the loss of generality assume $h_1 \geq h_2$. Then the procedure of $b$ is applied $h_1 - h_2$ times so $T_1$ and $T_2$ have the same weight. Then the procedure of &lt;em&gt;a&lt;/em&gt; is applied to combine them. Each operation costs a constant time, Hence a complexity upperbounded by $\mathcal{O}((h_1 - h_2) + 1)$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 02</title>
      <link>https://mostafatouny.github.io/odonnell-undergrad-post/pset02/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/odonnell-undergrad-post/pset02/</guid>
      <description>&lt;h2 id=&#34;ex-1&#34;&gt;Ex. 1&lt;/h2&gt;
&lt;p&gt;The set of all unary languages is uncountably infinite but the set of all Turing machines is countably infinite, Hence some unary language isn&amp;rsquo;t recognizable by any turing machine.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s prove uncountability of unary languages. Observe the set $\Sigma^*$ equals
\begin{align*}
&amp;amp;\epsilon \quad &amp;amp;s_1\\
&amp;amp;1 \quad &amp;amp;s_2\\
&amp;amp;11 \quad &amp;amp;s_3\\
&amp;amp;111 \quad &amp;amp;s_4\\
&amp;amp;.. \quad &amp;amp;..\\
\end{align*}
Any unary language is a subset of $\Sigma^*$, and can be re-interpreted as an infinite binary sequence, where string $s_i$ is in the language if and only if sequence bit $b_i$ is 1. Clearly, there is bijective map from unary languages to infinite binary sequences. But the set of infinite binary sequences is uncountably infinite.&lt;/p&gt;
&lt;h2 id=&#34;ex-2&#34;&gt;Ex. 2&lt;/h2&gt;
&lt;h3 id=&#34;a&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;Assume the input is conveniently given as *w#, and machine&amp;rsquo;s tape-1 is on first character of w (or on # if $w$ is $\epsilon$). Assume also tape-2 is given with * character at its beginning, and tape-2 head is one-step right to it. For brevity we ignore such implementation details.&lt;/p&gt;
&lt;p&gt;Initial state is $q_{\text{rightDouble1}}$. We assume characters of the alphabet have corresponding other marked characters. e.g 1 has 1&amp;rsquo;. We indicate by saying marking a character, replacing it with its corresponding marked one.&lt;/p&gt;
&lt;p&gt;$q_{\text{leftUntill*}}:$ move tape-1 left untill * is read, Then move right and $q_{\text{rightDouble1}}$.&lt;/p&gt;
&lt;p&gt;$q_{\text{rightDouble1}}:$ sequentially, move tape-1 right once, write 1 in tape-2 twice in two sequential slots, untill # is read by tape-1 then move left and $q_{\text{isAllMarked}}$.&lt;/p&gt;
&lt;p&gt;$q_{\text{isAllMarked}}:$ if a marked character or * is read by tape-1, then $q_{\text{unmarkInput}}$. if a non-marked character is read, then $q_{\text{leftUntill*}}$.&lt;/p&gt;
&lt;p&gt;$q_{\text{unmarkInput}}:$ move tape-1 left replacing marked characters by their unmarked counterparts untill * is read, then move right and $q_{\text{lefttape2}}$.&lt;/p&gt;
&lt;p&gt;$q_{\text{lefttape2}}:$ move tape-2 left untill * is read, then move right.&lt;/p&gt;
&lt;p&gt;It is easy to transform tape-1 to be exactly w and tape-2 to be popped out of * at its left-most. We ignore these implementation details.&lt;/p&gt;
&lt;h3 id=&#34;b&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;From &lt;em&gt;a&lt;/em&gt;, We know there&amp;rsquo;s a 2-tape turing machine $T$ that can prepare tape-2 with string $1^{2|w|^2}$. We wish to think of this string as a counter of number of steps taken by the machine. It is possible for it to be augmented, to simulate machine $M$, while ticking tape-2, Accepting if $M$ accepts and tape-2 isn&amp;rsquo;t completely ticked, and rejecting otherwise. The 1-tape turing machine $M$ can be constructed by simulating $T$.&lt;/p&gt;
&lt;p&gt;$T$ runs in polynomial time, since preparing tape-2 is upperbounded by $n^2$, and ticking tape-2 while simulating $M$ doesn&amp;rsquo;t cost any more steps. The simulation of $T$ by $M&amp;rsquo;$ is polynomially overheaded by $T$, and hence $M&amp;rsquo;$ is polynomially upperbounded.&lt;/p&gt;
&lt;h2 id=&#34;ex-3&#34;&gt;Ex. 3&lt;/h2&gt;
&lt;h3 id=&#34;a-1&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;Let $T$ be the turing machine recognizing $L$. It is possible to construct another turing machine $T&amp;rsquo;$ whose &lt;em&gt;accept&lt;/em&gt; and &lt;em&gt;reject&lt;/em&gt; states are swapped. So, $w \in L$ iff $T$ accepts $w$ iff $T&amp;rsquo;$ rejects $w$ iff $w \not\in L^c$.&lt;/p&gt;
&lt;p&gt;The number of steps made by $T&amp;rsquo;$ is exactly the same as $T$, and hence of a polynomial complexity.&lt;/p&gt;
&lt;h3 id=&#34;b-1&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;Let $T_1$ and $T_2$ be two turing machines recognizing $L_1$ and $L_2$ respectively. It is possible to construct a new turing machine $T$ that simulates $T_1$ and memorizes its result, Then instead of termination, simulates $T_2$ on the same input and memorizes its result also. It is easy for $T$ to be designed such that it accepts input $w$ if and only if either the simulation of $T_1$ or $T_1$ accepted.&lt;/p&gt;
&lt;p&gt;The complexity of $T$ is $\mathcal{O}(poly(n)) + \mathcal{O}(poly(n)) + C = \mathcal{O}(poly(n))$&lt;/p&gt;
&lt;h3 id=&#34;c&#34;&gt;c&lt;/h3&gt;
&lt;p&gt;Similarly to &lt;em&gt;b&lt;/em&gt;, but $T$ accepts input $w$ if and only if both the simulations of $T_1$ and $T_2$ are accepted.&lt;/p&gt;
&lt;h3 id=&#34;d&#34;&gt;d&lt;/h3&gt;
&lt;p&gt;Similarly to &lt;em&gt;b&lt;/em&gt;, but $T$ accepts input $w$ if and only if at least two out of the three simulations of $T_1$, $T_2$, and $T_3$ accepts.&lt;/p&gt;
&lt;h3 id=&#34;e&#34;&gt;e&lt;/h3&gt;
&lt;p&gt;Let $T$ be the turing machine recognizing $L$. For any $m \in \mathcal{N}$, It is possible to construct a m-tape turing machine $T_m$, that simulates $T$ on $w_i$ on the ith tape. Hence, complexity of $T_m$ is $\sum_{i=0}^m \mathcal{O}(poly(|w_i|)) = \mathcal{O}(poly(|w|))$. Clearly the processing required to copy substrings $w_i$ on ith tapes is polynomial also, Hence $T_m$&amp;rsquo;s established upperbound remains the same.&lt;/p&gt;
&lt;h2 id=&#34;ex-4&#34;&gt;Ex. 4&lt;/h2&gt;
&lt;p&gt;Any turing machine needs at least a linear scan of cost $n$, to behave in number of steps, as a function of $n$. In other words, number of steps $T$, must be $T(n) \geq n$, so that $T = f(n)$ for some function $f$. Since $T$ is upperbounded by $\sqrt{n} = \mathcal{o}(n)$, $T(n) \neq f(n)$ for any $f$. In other words, $T$ isn&amp;rsquo;t based on input size $n$. Therefore, must be a constant.&lt;/p&gt;
&lt;p&gt;The intuition is very strong that a turing machine cannot behave in relation to $n$ if its memory doesn&amp;rsquo;t contain $n$&amp;rsquo;s value; I am not aware of a more rigorous proof.&lt;/p&gt;
&lt;p&gt;As final note, For any constant $C$, we can always find some $n$, such that $C \sqrt{n} &amp;lt; n$. Hence, always guaranteeing the turing machine can&amp;rsquo;t read its whole input.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 02</title>
      <link>https://mostafatouny.github.io/mit-analysis1c-post/pset02/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/mit-analysis1c-post/pset02/</guid>
      <description>&lt;h2 id=&#34;problem.-1&#34; class=&#34;unnumbered&#34;&gt;Problem. 1&lt;/h2&gt;
&lt;p&gt;We prove each axiom as listed by &lt;em&gt;Rudin&lt;/em&gt; in page 5.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A1&lt;/strong&gt; $(a_0+a_1) + \sqrt{2} (b_0+b_1) \in \mathcal{Q}(\sqrt{2})$, As $(a_0+a_1), (b_0+b_1) \in \mathcal{Q}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A2&lt;/strong&gt; Follows immediately by properties of $\mathcal{Q}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A3&lt;/strong&gt; Follows immediately by properties of $\mathcal{Q}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A4&lt;/strong&gt; $0_{\mathcal{Q}(2)}$ here is the number $0 + \sqrt{2} ; 0 = 0_{\mathcal{R}}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A5&lt;/strong&gt; For an $x_{\mathcal{Q}(2)}$, $-x_{\mathcal{Q}(2)} = -a + \sqrt{2} (-b)$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;M1&lt;/strong&gt; The product is $(a_0a_1 + 2b_0 b_1) + \sqrt{2} (a_0 b_1 + a_1 b_0)$, Where the formed $a$ and $b$ are in $\mathcal{Q}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;M2&lt;/strong&gt; Following properties of $\mathcal{Q}$, The product we formed in &lt;em&gt;M1&lt;/em&gt; is the same in cases of $xy$ and $yx$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;M3&lt;/strong&gt; Following properties of $\mathcal{Q}$, The product we formed in &lt;em&gt;M1&lt;/em&gt; is the same in cases of $(xy)z$ and $x(yz)$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;M4&lt;/strong&gt; $1_{\mathcal{Q}(\sqrt{2})}$ here is $1_{\mathcal{R}} \neq 0_{\mathcal{R}} = 0_{\mathcal{Q}(2)}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;M5&lt;/strong&gt; If $x_{\mathcal{Q}(\sqrt{2})} \neq 0_{\mathcal{Q}(2)} = 0 + \sqrt{2} \cdot 0$, Then we know either $a \neq 0$ or $b \neq 0$, and hence $x_{\mathcal{Q}(\sqrt{2})} = a + b \sqrt{2} \neq 0$. Define $x_{\mathcal{Q}(\sqrt{2})}^{-1} = \frac{\displaystyle{1}}{\displaystyle{a + b \sqrt{2}}}$. What is remaining is to show $\frac{\displaystyle{1}}{\displaystyle{a + b \sqrt{2}}} \in \mathcal{Q}(2)$ by a multiplication by its conjugate. Observe:
$$
\begin{aligned}
&amp;amp;\frac{\displaystyle{1}}{\displaystyle{a + b \sqrt{2}}} \\
= &amp;amp;\frac{\displaystyle{1}}{\displaystyle{a + b \sqrt{2}}} \cdot \frac{\displaystyle{a - b \sqrt{2}}}{\displaystyle{a - b \sqrt{2}}} \\
= &amp;amp;\frac{\displaystyle{a - b \sqrt{2}}}{\displaystyle{a^2 + 2 b^2}} = (\frac{\displaystyle{a}}{\displaystyle{a^2 + 2b^2}}) + (\frac{\displaystyle{-b}}{\displaystyle{a^2 + 2b^2}}) \sqrt{2}
\end{aligned}
$$
And clearly
$(\frac{\displaystyle{a}}{\displaystyle{a^2 + 2b^2}}), (\frac{\displaystyle{-b}}{\displaystyle{a^2 + 2b^2}}) \in \mathcal{Q}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;D&lt;/strong&gt; Follows by a trivial algebra.&lt;/p&gt;
&lt;h2 id=&#34;problem.-2&#34; class=&#34;unnumbered&#34;&gt;Problem. 2&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s look at the special case of $z = (x, 0)$. Then for any $r &amp;gt; 0$, there exists a complex number $w = (x/r, 0)$, such that $rw = z$.&lt;/p&gt;
&lt;p&gt;From now on we focus on $z = (x, y)$ assuming $y \neq 0$. Before proceeding, we develop a central lemma.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   For any complex number $w = (a, b)$, $|w| = 1 \leftrightarrow a^2 + b^2 = 1$.&lt;br&gt;
Follows immediately by setting $w \cdot \overline{w} = 1$ and multiplying.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   Given any $x$ and $y \neq 0$, Finding reals $r, a, b$ such that $r \cdot a = x$, $r \cdot b = y$ satisfies $z = (x, y) = r \cdot (a, b) = rw$&lt;br&gt;
Follows immediately by a trivial algebra.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt;   Main Problem&lt;br&gt;
Now we combine &lt;em&gt;Lemma 1&lt;/em&gt; and &lt;em&gt;Lemma 2&lt;/em&gt; to satisfy both requirements by forming a combined system of equations, Given any $z = (x, y)$ where $y \neq 0$.
$$
\begin{aligned}
r \cdot a &amp;amp;= x \\
r \cdot b &amp;amp;= y \\
a^2 + b^2 &amp;amp;= 1
\end{aligned}
$$
It can be solved by substitution where:
$$
\begin{aligned}
a &amp;amp;= \sqrt{1 - b^2} \\
r &amp;amp;= y/b ;;; \text{valid as b isn&amp;rsquo;t zero} \\
3/b \cdot \sqrt{1-b^2} &amp;amp;= x
\end{aligned}
$$
Note $b \neq 0$ lest $r \cdot b = r \cdot 0 = 0 = y$, Contradicting our assumption.&lt;/p&gt;
&lt;p&gt;The system uniquely determines the values
$$
\begin{aligned}
b &amp;amp;= \frac{\displaystyle{3}}{\displaystyle{\sqrt{x^2 + 9}}} \\
r &amp;amp;= \frac{\displaystyle{y}}{\displaystyle{3}} \cdot \sqrt{x^2 + 9} \\
a &amp;amp;= \sqrt{1 - \frac{\displaystyle{9}}{\displaystyle{x^2+9}}}
\end{aligned}
$$&lt;/p&gt;
&lt;h2 id=&#34;problem.-3&#34; class=&#34;unnumbered&#34;&gt;Problem. 3&lt;/h2&gt;
&lt;h3 id=&#34;a&#34; class=&#34;unnumbered&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /mit-analysis1c-post/pset02/3-a_hu64169e4c6d656f26e9e0a6cc018c06a0_102106_b150fdabdd10ce70b925c8bb6fdf4c2e.webp 400w,
               /mit-analysis1c-post/pset02/3-a_hu64169e4c6d656f26e9e0a6cc018c06a0_102106_974e1a94ea5fdf5c722df50cbd713b20.webp 760w,
               /mit-analysis1c-post/pset02/3-a_hu64169e4c6d656f26e9e0a6cc018c06a0_102106_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/mit-analysis1c-post/pset02/3-a_hu64169e4c6d656f26e9e0a6cc018c06a0_102106_b150fdabdd10ce70b925c8bb6fdf4c2e.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We show if arbitrary $p \in E^o$ then $p$ is an interior of $E^o$. By definition $p$ is an interior of $E$. So $N_{r_0}(p) \subset E$ for some $r_0 &amp;gt; 0$. Let $r_1 = r_0/2$ and $h = r_0 - r_1$. It suffices to show $N_{r_1}(p) \subset E^o$.&lt;/p&gt;
&lt;p&gt;Consider $N_h(p&amp;rsquo;)$ for any $p&amp;rsquo; \in N_{r_1}(p)$. Through the picture it is clear this new neighbourhood shall be bounded by $N_{r_0}(p)$ and hence falls completely within $E$. That shows $p&amp;rsquo; \in E^o$ and in turn completes our proof.&lt;/p&gt;
&lt;p&gt;In greater details, Observe $\forall q \in N_h(p&amp;rsquo;)$, $d(q, p) \leq d(q, p&amp;rsquo;) + d(p&amp;rsquo;, p) &amp;lt; h + r_1 = (r_0 - r_1) + r_1 = r_0$, and hence $q \in N_{r_0}(p) \subset E$.&lt;/p&gt;
&lt;h3 id=&#34;b&#34; class=&#34;unnumbered&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;$(\leftarrow)$ Trivial by &lt;em&gt;a&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;$(\rightarrow)$ Trivially $E^o \subset E$. By hypothesis, The definition of open $E$ immediately concludes $E \subset E^o$.&lt;/p&gt;
&lt;h3 id=&#34;c&#34; class=&#34;unnumbered&#34;&gt;c&lt;/h3&gt;
&lt;p&gt;Any $p \in G$ is an interior point of $G$ by definition. So there is a neighbourhood $N_{r_0}(p) \subset G$ for some $r_0 &amp;gt; 0$. But we know $G \subset E$, So $N_{r_0}(p) \subset E$, $p$ is an interior point of $E$.&lt;/p&gt;
&lt;h3 id=&#34;e&#34; class=&#34;unnumbered&#34;&gt;e&lt;/h3&gt;
&lt;p&gt;I guess Yes. We struggled with a formal proof though.&lt;/p&gt;
&lt;h2 id=&#34;problem.-4&#34; class=&#34;unnumbered&#34;&gt;Problem. 4&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt;   Given a point $p \in X$, Define $V_p = { x &amp;gt; p ; | ; [p,x] \subset X } \cup { x &amp;lt; p ; | ; [x, p] \subset X }$.\&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remark.&lt;/strong&gt;   $V_p$ constitutes a largest segment $(a,b)$, Given $X$ is an open-set.&lt;br&gt;
Assuming $V_p = (a, b]$ derives an immediate contradiction as $b$ won&amp;rsquo;t be an interior point of $X$.&lt;/p&gt;
&lt;p&gt;A more rigorous argument for showing $V_p$ is a segment can be made by constructing a segment $(inf , V_p, sup , V_p)$ but for brevity we ignore it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   Given an open-set $X$ and some $V_p \subset X$, For any $q \neq p$, Either $V_p = V_q$ or $V_p \cap V_q = \phi$.&lt;br&gt;
Easily proven by considering the equivalent logical form of $V_p \cap V_q \neq \phi \rightarrow V_p = V_q$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   Given a non-empty open-set $X$ and some $V_p \subset X$, $X_1 = X - V_p$ is either empty or a non-empty open-set.&lt;br&gt;
If $V_p = X$ then $X_1$ is empty. Consider $V_p$ as a strict or proper subset of $X$. Then $X_1$ is non-empty.&lt;/p&gt;
&lt;p&gt;We show now $X_1$ is an open-set. Let $q$ be an arbitrary point of $X_1$, Then also $q \in X$. Since $X$ is an open-set we know there&amp;rsquo;s some neighbour $N_{r0}(q) \subset X$. Clearly $N_{r0}(q) \subset V_q$. By &lt;em&gt;Lemma 3&lt;/em&gt; and since $q \not\in V_p$, It follows $N_{r0}(q) \cap V_p = \phi$. So $N_{r0}(q) \subset X_1$ and $q$ is an interior point of $X_1$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollary.&lt;/strong&gt;   Countable ${V_i}$&lt;br&gt;
Follow the same procedure of &lt;em&gt;Lemma 4&lt;/em&gt; but let the taken point $p_i$ to be a rational number. Take some real number $z_i$ in non-empty $X_i$; As it is interior there is a neighbour such that for any $q$ where $d(z_i, q) &amp;lt; r_0$ for some $r_0 &amp;gt; 0$, $q \in X$. By the density of rational numbers, there is a rational $p_i$ which satisfies $d(z_i, p_i) &amp;lt; r_0$. Hence $p_i \in X_i$.&lt;/p&gt;
&lt;p&gt;We now know every distinct $V_{p_i}$ corresponds to a distinct rational number $p_i$. So the cardinality of ${V_{p_i}}$ is &lt;em&gt;at most countable&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt;   Main Problem&lt;br&gt;
Following the procedure of &lt;em&gt;Lemma 4&lt;/em&gt; and by &lt;em&gt;Corollary 5&lt;/em&gt; we can keep constructing $V_{p_1}$, $V_{p_2}$, ..etc, which in turn are &lt;em&gt;at most countable&lt;/em&gt;. There are two cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(i) We reach some empty $X_i$, So ${V_i}$ is finite. Or&lt;/li&gt;
&lt;li&gt;(ii) We do not ever reach an empty $X_i$, and ${ V_i }$ is &lt;em&gt;countable&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note.&lt;/strong&gt; I received the following support before being able to solve the problem. I admit it was totally unlikely to think of the formulation $(q-\delta, q+\epsilon) \subset X$ on my own. I admit the problem is completely spoiled.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /mit-analysis1c-post/pset02/0_hu681eda5354df090828ddf495fb3b0c20_56400_a45c15516f000e4e9fe4946979fd4e30.webp 400w,
               /mit-analysis1c-post/pset02/0_hu681eda5354df090828ddf495fb3b0c20_56400_0771aee05ef79f7c8d862167bb8c7963.webp 760w,
               /mit-analysis1c-post/pset02/0_hu681eda5354df090828ddf495fb3b0c20_56400_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/mit-analysis1c-post/pset02/0_hu681eda5354df090828ddf495fb3b0c20_56400_a45c15516f000e4e9fe4946979fd4e30.webp&#34;
               width=&#34;760&#34;
               height=&#34;508&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /mit-analysis1c-post/pset02/1_hu5bef43f7d65d019f4d4dc9a883a74271_24190_7a58dbbd2591ed76f8e5ac0d9a9a9f4e.webp 400w,
               /mit-analysis1c-post/pset02/1_hu5bef43f7d65d019f4d4dc9a883a74271_24190_9a8cf061e52e0f7cf7b150931bf65767.webp 760w,
               /mit-analysis1c-post/pset02/1_hu5bef43f7d65d019f4d4dc9a883a74271_24190_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/mit-analysis1c-post/pset02/1_hu5bef43f7d65d019f4d4dc9a883a74271_24190_7a58dbbd2591ed76f8e5ac0d9a9a9f4e.webp&#34;
               width=&#34;760&#34;
               height=&#34;302&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /mit-analysis1c-post/pset02/2_hu9d7c6766c2e6bf7d8fd5ea595f84fdbd_21610_11de46398cbb2b1499163b88a1bd0376.webp 400w,
               /mit-analysis1c-post/pset02/2_hu9d7c6766c2e6bf7d8fd5ea595f84fdbd_21610_10f7618915dd013f7c337406276bd7a8.webp 760w,
               /mit-analysis1c-post/pset02/2_hu9d7c6766c2e6bf7d8fd5ea595f84fdbd_21610_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/mit-analysis1c-post/pset02/2_hu9d7c6766c2e6bf7d8fd5ea595f84fdbd_21610_11de46398cbb2b1499163b88a1bd0376.webp&#34;
               width=&#34;760&#34;
               height=&#34;252&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 01</title>
      <link>https://mostafatouny.github.io/erik-alg-post/pset01/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/erik-alg-post/pset01/</guid>
      <description>&lt;h2 id=&#34;problem-1&#34;&gt;Problem 1&lt;/h2&gt;
&lt;h3 id=&#34;a&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;Consider a graph of vertices $v_1, v_2, v_3$, whose weights are correspondingly $10, 6, 6$, and connected by edges ${v_1,v_2}, {v_2, v_3}$.&lt;/p&gt;
&lt;p&gt;The optimal subset is $v_2, v_3$ of profit sum equal to $6 + 6 = 12$, But the algorithm picks subset $v_1$ with profit $10$.&lt;/p&gt;
&lt;h3 id=&#34;b&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;Since the graph is given to be acyclic, Each neighbour of the graph&amp;rsquo;s root, Constitutes a root of a subtree of its own, with no vertex being shared among any two subtrees.&lt;/p&gt;
&lt;p&gt;We design a divide and conquer algorithm where solutions to smaller subtrees can be merged for a larger subtree.&lt;/p&gt;
&lt;p&gt;The base case is when the tree has only one vertex, where optimal subset contains only that vertex.&lt;/p&gt;
&lt;p&gt;Assuming we know solutions of subtrees, How can we merge? Observe the optimal subset of the whole tree either&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) Contains the root&lt;/li&gt;
&lt;li&gt;(2) Does not contain the root&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For (2), The optimal solution of the whole tree is the sum of all subtrees&amp;rsquo; optimal profits. Assume for the sake of contradiction that is not the case. Then there are different selections of vertices with overall greater profit. Since by definition we are assuming whole tree&amp;rsquo;s root to be excluded, We know the different selection is in one of the subtrees. We know also that subtree&amp;rsquo;s new total profit is greater, But that contradicts the fact subtree is given optimal in the first place to us.&lt;/p&gt;
&lt;p&gt;For (1), The tricky part comes into play. If we restricted our scope only on a subtree, Then It is possible to choose a non-optimal subset, As it shall be better integrated with the bigger subtree, Yielding a greater profit for the bigger subtree. Particularly, That happens if we had to include the new root in the subset and exclude the subtree&amp;rsquo;s root.&lt;/p&gt;
&lt;p&gt;The key is to have this information given to us by the main algorithm. So we let it compute also optimal possible profit under the assumption root is excluded. With that in our pocket we can compute the whole big tree&amp;rsquo;s optimal subset profit assuming it contains the root.&lt;/p&gt;
&lt;p&gt;Specifically, we loop on each given subtree and check whether root is included in optimal solution. If not, we add subtree&amp;rsquo;s optimal profit. If yes we add subtree&amp;rsquo;s optimal profit under the assumption subtree&amp;rsquo;s root is excluded.&lt;/p&gt;
&lt;p&gt;Finally we select the maximum of case (1) and case (2) and return it as the optimal solution.&lt;/p&gt;
&lt;p&gt;Observe we have covered all possible cases by such a simple trick!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Black number indicates profit of a single vertex, and red is the optimal profit of the vertice&amp;rsquo;s subtree.&lt;/p&gt;
&lt;p&gt;For the first tree, Case (1) is maximum, and for the second tree, Case (2) is maximum.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./screen_0.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./screen_1.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Psuedo Code&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;optimalSubsetProfit(tree G, tree root v_r)
  if (verticesNumber(G) == 1)
    return (True, profit(v_r), profit(v_r))

  subtreesOptimalData = ()

  for v_neig in neighbours(v_r)
    out = (optimalProfit, isRootIncluded, profitRootExcluded) = optimalSubsetProfit(subtree(v_neig), v_neih)
    subtreesOptimalData.append(out)
  
  
  profitRootExcluded = 0
  for subtree in subtreesOptimalData
    profitRootExluded += subtree.optimalProfit
  
  profitRootIncluded = 0
  for subtree in subtreesOptimalData
	if subtree.isRootIncluded == False
	  profitRootIncluded += subtree.optimalProfit
	else
	  profitRootIncluded += subtree.profitRootExcluded
  
  optimalProfit = max{profitRootExcluded, profitRootIncluded}
  if optimalProfit == profitRootExcluded
	isRootIncluded = False
  else
    isRootIncluded = True
  
  return optimalProfit, isRootIncluded, profitRootExcluded
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;c&#34;&gt;c&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Remark&lt;/strong&gt; Stacks&amp;rsquo; Vertices Number&lt;/p&gt;
&lt;p&gt;Think of the given graph as levels of stacks from bottom to top as shown below&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /erik-alg-post/pset01/screen_2_huf8dc601f61acd8c1fefbc6dd90a3b6c8_52873_8b830f7c4bc637a81a70a1da709718e1.webp 400w,
               /erik-alg-post/pset01/screen_2_huf8dc601f61acd8c1fefbc6dd90a3b6c8_52873_254a463b4eb41d3bd927dce09dd9b125.webp 760w,
               /erik-alg-post/pset01/screen_2_huf8dc601f61acd8c1fefbc6dd90a3b6c8_52873_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/erik-alg-post/pset01/screen_2_huf8dc601f61acd8c1fefbc6dd90a3b6c8_52873_8b830f7c4bc637a81a70a1da709718e1.webp&#34;
               width=&#34;760&#34;
               height=&#34;560&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Observe the number of vertices in a stack must be equal or greater than the number of its preceeding stack. So, final stack of leafs is the greatest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Algorithm Description&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Include the bottom most stack in solution subset.&lt;/li&gt;
&lt;li&gt;Ignore the preceeding stack, As every vertex in it is adjacent to some selected vertex.&lt;/li&gt;
&lt;li&gt;Include the preceeding stack in solution subset.&lt;/li&gt;
&lt;li&gt;Continue similarly untill the whole graph is covered&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By alternatively toggling between stacks, We ensure no adjacent vertices are selected, and we greedily select stacks of greatest number of vertices.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Psuedo-code&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;optimalProfit(tree G, tree&#39;s root v_r)

  if G contains one vertex
	return (True, 1)


  someChildIncluded = False
  count = 0

  for each child v_chi of root v_r
    (isChildIncluded, childCount) =  optimalProfit(G, v_chi)
    
	if isChildIncluded == True
	  someChildIncluded = True
	increase count by childCount


  if someChildIncluded == True
    return (False, count)
  else
    return (True, count+1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Complexity&lt;/strong&gt; $\log(n)$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proof&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem. 1&lt;/strong&gt; If the given graph contains only vertices with at most 1 child branch, Then the algorithm selects maximum number of valid vertices.&lt;/p&gt;
&lt;p&gt;Note the graph in this case is basically a linear path of vertices. Note also the number of vertices selected by our algorithm is $\lceil \frac{n}{2} \rceil$, where $n$ is the number of graph&amp;rsquo;s vertices.&lt;/p&gt;
&lt;p&gt;It sufficies to show if there is any selection subset $U$ whose number of vertices is more than $\lceil \frac{n}{2} \rceil$, Then $U$ contains two adjacent vertices. The proof is by induction on $n$.&lt;/p&gt;
&lt;p&gt;The base case of $n = 2$ is trivial. Assume the statement holds for $k \geq 2$, and consider an arbitrary graph $G$ where $n = k+1$.&lt;/p&gt;
&lt;p&gt;Consider an arbitrary $X \subseteq G(V)$ with vertices number at least $\lceil \frac{k+1}{2} \rceil + 1$. Our goal now is to prove the existince of two adjacent vertices in $X$. By removing a leaf from $G$ we obtain a graph $G&amp;rsquo;$ whose number of vertices is $n&amp;rsquo; = n - 1 = k + 1 - 1 = k$. Define $X&amp;rsquo;$ to be $X \cap G&amp;rsquo;(V)$. Observe $X&amp;rsquo;$ contains at least $\lceil \frac{k+1}{2} \rceil + 1 - 1 = \lceil \frac{k+1}{2} \rceil = \lceil \frac{k}{2} \rceil + 1$ vertices. By the induction hypothesis it follows $X&amp;rsquo;$ contains two adjacent vertices, And so does $X$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition. 1&lt;/strong&gt; &lt;em&gt;multiLinearLeafsParent&lt;/em&gt; and &lt;em&gt;branchPath&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For any vertex v, If all its child generations have degree at most 2, Then we call it &lt;em&gt;multiLinearLeafsParent&lt;/em&gt;. Note on any branch l, Vertices constiute a linear path from v and upto the leaf. We call that path &lt;em&gt;branchPath(v, l)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma. 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If a vertex &lt;em&gt;v&lt;/em&gt; contains more than one branch for children, and it is &lt;em&gt;multiLinearLeafsParent&lt;/em&gt;, Then&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1.1&lt;/strong&gt; If for any branches &lt;em&gt;l&lt;/em&gt;, The length of &lt;em&gt;branchPath(v, l)&lt;/em&gt; is odd, Then &lt;em&gt;v&lt;/em&gt; is selected by the algorithm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1.2&lt;/strong&gt; If for some branch &lt;em&gt;l&lt;/em&gt;, The length of &lt;em&gt;branchPath(v, l)&lt;/em&gt; is even, Then &lt;em&gt;v&lt;/em&gt; is ignored by the algorithm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Lemma. 2&lt;/strong&gt; If the given graph contains a vertex with more than 2 child branches, and a new graph $G&amp;rsquo;$ is constructed by removing either&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(1)$ Two bottom most vertices from odd length &lt;em&gt;branchPath&lt;/em&gt; $l_0$, or&lt;/li&gt;
&lt;li&gt;$(2)$ One leaf from an even length &lt;em&gt;branchPath&lt;/em&gt;,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From some vertex $v_0$ which has at least two branches, Then the algorithm&amp;rsquo;s selections on $G&amp;rsquo;$, are also selected on $G$.&lt;/p&gt;
&lt;p&gt;Select that given vertex which has more than 2 child branches, and call it $v_0$. Call its branches $l_1, l_2, \dots, l_m$.&lt;/p&gt;
&lt;p&gt;For case $(1)$, The new pruned branch is still of odd length. It is fine if the branch is completely removed also. Since parity of branches are reserved, By &lt;em&gt;Lemma. 1&lt;/em&gt;, the algorithm makes the same choice on $v_0$ for both $G$ and $G&amp;rsquo;$ graphs.&lt;/p&gt;
&lt;p&gt;Note in case the branch is completely removed, Then the choice on $v_0$ is totally dependent on other branches. If there is another even length branch then ignoring $v_0$ is reserved on $G&amp;rsquo;$; If all branches are of odd length then selecting $v_0$ is reserved also. All these cases follow by &lt;em&gt;Lemma. 1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For case $(2)$, We know there is another even length branch in $G&amp;rsquo;$, and by &lt;em&gt;Lemma. 1&lt;/em&gt;, the algorithm ignores $v_0$ on both $G$ and $G&amp;rsquo;$ graphs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem. 2&lt;/strong&gt; If the given graph contains a vertex with more than 2 child branches, Then the algorithm selects maximum number of valid vertices.&lt;/p&gt;
&lt;p&gt;The proof is by strong induction. The base case of $n = 3$ vertices is trivial (if you are super nerd, for $n$ less than $3$, It is vacuously true). Assume the statement holds for $k \leq p$ where $p \geq 3$, and consider arbitrary graph where number of vertices $n$ is $k+1$.&lt;/p&gt;
&lt;p&gt;Call the count the algorithm produces $p$. Assume for the sake of contradiction there is a valid selection $X$ of vertices with count at least $p + 1$.&lt;/p&gt;
&lt;p&gt;Select that given vertex which has more than 2 child branches promised by the theorem&amp;rsquo;s hypothesis, and call it $v_0$. Call its branches $l_1, l_2, \dots, l_m$.&lt;/p&gt;
&lt;p&gt;We are ahead of two cases&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(1)$ For some branch $l_0$, length of $branchPath(v_0, l_0)$ is odd&lt;/li&gt;
&lt;li&gt;$(2)$ For any branch $l_i$, length of $branchPath(v_0, l_i)$ is even&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For $(1)$, Construct a new graph $G&amp;rsquo;$ where the two bottom most vertices are removed from $l_0$.&lt;/p&gt;
&lt;p&gt;Note existince of at least 2 vertices along the branch is ensured by the definition of branch&amp;rsquo;s existince; There is no odd branch of path length equal to 1.&lt;/p&gt;
&lt;p&gt;Note also exactly one vertex of the selected two vertices is in $X$, The optimal selection of $G$, As the two vertices are adjacent.&lt;/p&gt;
&lt;p&gt;By &lt;em&gt;Lemma. 2&lt;/em&gt;, Selections made on $G&amp;rsquo;$ are exactly the same as selections made on $G$ by the algorithm, Except on $G$ there is an additional leaf selected. So selections number $p=p&amp;rsquo;+1$.&lt;/p&gt;
&lt;p&gt;Define $X&amp;rsquo; = X \cap G&amp;rsquo;(V)$. At most one vertex selected by the algorithm on $G$ is in $X$ but not in $X&amp;rsquo;$. So $X&amp;rsquo;$ has at least $p+1-1=p$ vertices. But we have just established $p=p&amp;rsquo;+1$, Thus $X&amp;rsquo;$ has at least $p&amp;rsquo;+1$ vertices.&lt;/p&gt;
&lt;p&gt;Number of vertices in $G&amp;rsquo;$ is $n-2 = k+1-2 = k-1$. By the induction hypothesis, $p&amp;rsquo;$, The number of selections made by the algorithm, is the greatest valid solution for $G&amp;rsquo;$.&lt;/p&gt;
&lt;p&gt;Contradiction, as $X&amp;rsquo;$ is a valid solution for $G&amp;rsquo;$.&lt;/p&gt;
&lt;p&gt;For $(2)$, We fix some branch $l_0$ and construct a new graph $G&amp;rsquo;$ where leaf of $l_0$ is removed.&lt;/p&gt;
&lt;p&gt;By a very similar reasoning a contradiction is reached.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollary. 1&lt;/strong&gt; The algorithm produces a the maximum number of selections, Generally&lt;/p&gt;
&lt;p&gt;Follows immediately by &lt;em&gt;theorem 1&lt;/em&gt; and &lt;em&gt;theorem 2&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;d&#34;&gt;d&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Remark&lt;/strong&gt; Redundant Subproblem&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./screen_3.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;If considered the subset marked by a red rectangle, We notice we are left with exploring remaining search space of $v_1, v_2$. We see two different subsets with the same search subspace, Which is redundant. Moreover, The left subset&amp;rsquo;s profit is $9$ while the right subset&amp;rsquo;s profit is $10$. So we can safely assure the right subset is yielding a better solution.&lt;/p&gt;
&lt;p&gt;This observation clearly suggests an algorithm based on dynamic programming. It also suggests a subproblem defined in terms of profit and remaining graph vertices.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./screen_4.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Our algorithm is initialized on row = 0 and maxRowProfit = 0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Algorithm Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For each row, we loop on all remaining graph subsets alongside their memoized profits. Then for the remaining graph selected, and for each vertex of it, We sum its profit to previous total profit and remove the vertex from remaining graph, to generate a new solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Psuedo-code&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;optimalProfit(row, maxRowProfit)
  if row == n
    return maxRowProfit

  maxNextRowProfit = -1
  
  for each ith profit of table[row, ]
    for each vertex v of ith graph subset
	  totalProfit = profit + v.profit
	  remGra = removeAdj(ith graph subset, v)
	  	  
	  if table[row+1, remGra] &amp;lt; totalProfit
	    table[row+1, remGra] = totalProfit

	  if table[row+1, remGra] &amp;gt; maxNextRowProfit
	    maxNextRowProfit = totalProfit

  if maxNextRowProfit == -1
    return maxRowProfit
  
  optimalProfit(row+1, maxNextRowProfit)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the algorithm can be trivially extended to output the solution subset by outputting $G(V)$ - $remGra$, where $remGra$ is the last remaining graph found by the algorithm.&lt;/p&gt;
&lt;h2 id=&#34;problem-2&#34;&gt;Problem 2&lt;/h2&gt;
&lt;h3 id=&#34;a-1&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;Maximum distance between two requests $r_i$ and $r_j$ is $\sqrt{(1/2)^2 + (1/2)^2} = \sqrt{1/4 + 1/4} = 1\sqrt{2} \leq 1$&lt;/p&gt;
&lt;h3 id=&#34;b-1&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Algorithm Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./screen_5.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Recursively the algorithm divides requests into nine sub problems. The first four calls cover all requests, but we also need to check a subproblem between each pair of those four. The base case is when the square length is $1/2$, and if two requests are within the square, Then the algorithm terminates as given requests are not valid.&lt;/p&gt;
&lt;p&gt;It is not hard to see why those calls between each pair of the first four are necessary and sufficient to merge.&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t see a need for specifying a psuedo-code (and my time is limited to write all details).&lt;/p&gt;
&lt;h3 id=&#34;c-1&#34;&gt;c&lt;/h3&gt;
&lt;p&gt;Exactly the same as &lt;strong&gt;b&lt;/strong&gt; but on the base case, The algorithm checks whether there are three requests within the square.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 01</title>
      <link>https://mostafatouny.github.io/odonnell-undergrad-post/pset01/</link>
      <pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/odonnell-undergrad-post/pset01/</guid>
      <description>&lt;h2 id=&#34;ex-1&#34;&gt;Ex. 1&lt;/h2&gt;
&lt;p&gt;skipped&lt;/p&gt;
&lt;h2 id=&#34;ex-2&#34;&gt;Ex. 2&lt;/h2&gt;
&lt;h3 id=&#34;a&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;As the recipe is deterministic, i.e generates only one output given the same input, The assignment is valid and the function is well-defined.&lt;/p&gt;
&lt;p&gt;For injectivity, we prove the contrapositive; Namely, if $x_0 \neq x_1 \rightarrow f(x_0) \neq f(x_1)$. Since, $x_0 + 1 \neq x_1 + 1$, Their binary representation differs in either the number of bits or in some bit not matching. That unmatching bit cannot be the most significant bit as it&amp;rsquo;s always 1. Therefore, resulting strings, $f(x_0)$ and $f(x_1)$ are not the same.&lt;/p&gt;
&lt;p&gt;For surjectivity, Pick-up any string $w \in {0, 1}^*$ and reverse the recipe to obtain natural number $x$. Namely, add 1 as the most significant bit, interpret string as a binary number, convert to base 10, and finally subtract 1. Clearly $f(x) = w$.&lt;/p&gt;
&lt;h3 id=&#34;b&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s a very illustrative example that achieves an encoding in $\lg a + \lg b$.&lt;/p&gt;
&lt;p&gt;(2, 5), converted to binary, (10, 101); add leading zeros so both have the same number of bits, (010, 101). Finally, Concatenate bit by bit, i.e add the first bit of the first number then first bit of the second then second bit of the first, ..etc, Yielding 011001.&lt;/p&gt;
&lt;p&gt;The recipe can easily be rolled back.&lt;/p&gt;
&lt;h2 id=&#34;ex-3&#34;&gt;Ex. 3&lt;/h2&gt;
&lt;h3 id=&#34;a-1&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;Binary search on range (a, a+1, .., b-1, b), where at each step algorithm $D$ is queries on both the first and second halves of the array, Then recursively call the binary search on both halves.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;primeFactor( X = array(a, a+1, .., b-1, b) )

  if X.length == 1
    if D(x)
	  return X[0]
	return FALSE
  
  if X.length == 0
    return FALSE
	
  halfIndex = floor(X.length/2)
  firstHalf = X[: halfIndex]
  secondHalf = X[halfIndex+1 :]
  
  if D(firstHalf)
    return primeFactor(firstHalf)
  if D(secondHalf)
    return primeFactor(secondHalf)
  return FALSE
  
main( X = array (a, a+1, .., b-1, b) )
  res = primeFactor(X)
  if res == FALSE
    print &#39;no&#39;
  else
    print &#39;yes&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since $m \geq$ length of $X$, Complexity is $O(\lg m)$.&lt;/p&gt;
&lt;h3 id=&#34;b-1&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;Solving decision $D$ by $f$. Compute $f(x) = y$ and check whether $y_i = b$.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;y = f(x)
if y[i] == b
  return YES
return FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Computing $f$ by $D$. on each bit $x_i$ of $x$, Call $D$ on string x, bit 0, and position i. if result is YES, let $y_i = 0$; if result is NO, let $y_i = 1$. assign $f(x)$ to $y$.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;y = []
for i in x.length
  res = D(x, 0, i)
  if res == YES
    y[i] = 0
  else
    y[i] = 1
return y
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ex-4&#34;&gt;Ex. 4&lt;/h2&gt;
&lt;h3 id=&#34;a-2&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;Trivially we can transform the input to the form *input#.&lt;/p&gt;
&lt;p&gt;Initially the machine is on state $q_0$.&lt;/p&gt;
&lt;p&gt;$q_0:$ move right until # is reached, then $q_1$.&lt;/p&gt;
&lt;p&gt;$q_1:$ move left until a non-# is reached, then $q_2$.&lt;/p&gt;
&lt;p&gt;$q_2:$ if * halt; if 0 print # and $q_3$; if 1 print &lt;span&gt;$&lt;/span&gt; and $q_4$.&lt;/p&gt;
&lt;p&gt;$q_3:$ move right until a blank space is reached, then print 0 and $q_5$.&lt;/p&gt;
&lt;p&gt;$q_4:$ move right until a blank space is reached, then print 1 and $q_5$.&lt;/p&gt;
&lt;p&gt;$q_5:$ move left until # is reached, then $q_1$.&lt;/p&gt;
&lt;h3 id=&#34;b-2&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;skipped&lt;/p&gt;
&lt;h3 id=&#34;c&#34;&gt;c&lt;/h3&gt;
&lt;p&gt;Assume andrew id is ac12. f(ac12) = 10000110.&lt;/p&gt;
&lt;p&gt;*10000110# is our assumed input. on step 8, machine is on 0 and state $q_0$. On step 9, machine is on # and state $q_0$. On step 10, machine is on state $q_1$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem Set 01</title>
      <link>https://mostafatouny.github.io/mit-analysis1c-post/pset01/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/mit-analysis1c-post/pset01/</guid>
      <description>&lt;h2 id=&#34;problem-1&#34;&gt;Problem 1&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Definition.&lt;/strong&gt; &lt;em&gt;simplest-fraction&lt;/em&gt;&lt;br&gt;
We call $\frac{\displaystyle{x}}{\displaystyle{y}}$ a &lt;em&gt;simplest-fraction&lt;/em&gt; when it is in its simplest form. i.e cannot be reduced by eliminating a common fraction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact.&lt;/strong&gt; If there are no common factors between $x$ and $y$, Then $\frac{\displaystyle{x}}{\displaystyle{y}}$ is a &lt;em&gt;simplest-fraction&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt; If $\frac{\displaystyle{x}}{\displaystyle{y}}$ is a &lt;em&gt;simplest-fraction&lt;/em&gt;, Then so is
$\frac{\displaystyle{x^2}}{\displaystyle{y^2}}$&lt;br&gt;
Observe any common factor among the numerator and denominator is going to necessarily divide both $x$ and $y$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt; Main Problem&lt;br&gt;
It&amp;rsquo;s possible to set
$\sqrt{\frac{\displaystyle{m}}{\displaystyle{n}}} = \frac{\displaystyle{a}}{\displaystyle{b}}$
where $\frac{\displaystyle{a}}{\displaystyle{b}}$ is a &lt;em&gt;simplest-fraction&lt;/em&gt;. On $\frac{\displaystyle{m}}{\displaystyle{n}} = \frac{\displaystyle{a^2}}{\displaystyle{b^2}}$
It follows by &lt;em&gt;fact 2&lt;/em&gt; and &lt;em&gt;lemma 3&lt;/em&gt;, Both $\frac{\displaystyle{m}}{\displaystyle{n}}$ and $\frac{\displaystyle{a^2}}{\displaystyle{b^2}}$ are &lt;em&gt;simplest-fractions&lt;/em&gt;. By uniqueness of such forms, $m = a^2$ and $n = b^2$. QED&lt;/p&gt;
&lt;h2 id=&#34;problem-2&#34;&gt;Problem 2&lt;/h2&gt;
&lt;p&gt;Assume for the sake of contradiction, There&amp;rsquo;s an order &amp;lt; defined in the complex field, Which turns it into an ordered field.&lt;/p&gt;
&lt;p&gt;By definition, It&amp;rsquo;s an ordered set also, and hence the following fact applies to it: For any $s, r \in F$ exactly one of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(i) , s=r$,&lt;/li&gt;
&lt;li&gt;$(ii) , s&amp;lt;r$,&lt;/li&gt;
&lt;li&gt;$(iii) , s&amp;gt;r$ is true.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Particularly we have exactly one of the following cases to be true:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(i)&lt;/strong&gt; $\sqrt{-1} = 0$&lt;br&gt;
Then $-1 = \sqrt{-1} \sqrt{-1} = 0 \cdot 0 = 0$. A contradiction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(ii)&lt;/strong&gt; $\sqrt{-1} &amp;gt; 0$&lt;br&gt;
Then $-1 = \sqrt{-1} \sqrt{-1} &amp;gt; \sqrt{-1} \cdot 0 = 0$. Also $1 &amp;lt; 0$ and $\sqrt{-1} = \sqrt{-1} \cdot 1 &amp;lt; \sqrt{-1} \cdot 0 = 0$. A contradiction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(iii)&lt;/strong&gt; $\sqrt{-1} &amp;lt; 0$&lt;br&gt;
Then $-1 = \sqrt{-1} \sqrt{-1} &amp;gt; \sqrt{-1} \cdot 0 = 0$. Also $1 &amp;lt; 0$ and $\sqrt{-1} = \sqrt{-1} \cdot 1 &amp;gt; \sqrt{-1} \cdot 0 = 0$. A contradiction.&lt;/p&gt;
&lt;h2 id=&#34;problem-3&#34;&gt;Problem 3&lt;/h2&gt;
&lt;p&gt;The proof of complex numbers being an ordered set follows immediately by the obvious/natural properties of real numbers&amp;rsquo; order and enumerating cases.&lt;/p&gt;
&lt;p&gt;A counter-example is given to the claim, that the orderd-set of complex numbers have the least-upper-bound property. Let $E = \set {(1/x, y) \mid x&amp;gt;1}$, which is clearly bounded by any element of the set $B = \set {(1, y) \mid y \in \mathcal{R}}$. But set $B$ has no least element.&lt;/p&gt;
&lt;h2 id=&#34;problem-4&#34;&gt;Problem 4&lt;/h2&gt;
&lt;h3 id=&#34;a&#34;&gt;a&lt;/h3&gt;
&lt;p&gt;$f(0) = f(0+0) = f(0) + f(0)$. Then $f(0) - f(0) = f(0) + f(0) - f(0)$, implying $0 = f(0)$.&lt;/p&gt;
&lt;p&gt;$f(1) = f(1 \cdot 1) = f(1) \cdot f(1)$. Let $x = f(1)$, Then $x = x^2$ which implies $x(x-1) = 0$, and finally either $x = 0$ or $x = 1$.&lt;/p&gt;
&lt;h3 id=&#34;b&#34;&gt;b&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   $f(n) = n f(1)$&lt;br&gt;
$f(n) = f(n-1 + 1) = f(n-1) + f(1)$, implying $f(n) = f(0) + n \cdot f(1)$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   $f(n/m) = (n/m) f(1)$&lt;br&gt;
$f(n/m) = f(n \cdot 1/m) = n \cdot f(1/m) \cdot f(1)$. But $f(1) = f(1/m + 1/m \dots + 1/m) = f(1/m) + f(1/m) + \dots + f(1/m) = m \cdot f(1/m)$, which leads to $f(1/m) = f(1)/m$. Finally, Multiply both sides by $n$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollary.&lt;/strong&gt; Main Problem&lt;br&gt;
The final conclusion follows immediately by cases of $f(1)$ being equal to $0$ or $1$.&lt;/p&gt;
&lt;h3 id=&#34;c&#34;&gt;c&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Lemma.&lt;/strong&gt;   $f(x) \geq 0$ if $x \geq 0$&lt;br&gt;
Since $x$ is a non-negative, we know $\sqrt{n}$ exists. Observe $f(x) = f(\sqrt{x} \cdot \sqrt{x}) = f(\sqrt{x}) \cdot f(\sqrt{x})$. But any square cannot be a negative number.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt;   Main Problem&lt;br&gt;
If $x &amp;gt; y$, Then $x-y &amp;gt; 0$. By &lt;em&gt;Lemma. 1&lt;/em&gt;, $f(x-y) \geq 0$. But $f(x-y) = f(x) + f((-1) \cdot y) = f(x) - f(y)$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note.&lt;/strong&gt; This problem had been solved by the aid of good friends. My original flawed solution is below.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./2.png&#34; alt=&#34;2 png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;c-flawed&#34;&gt;c (Flawed)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note.&lt;/strong&gt; The flaw here is discovered by a good friend.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./1.png&#34; alt=&#34;1 png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;If $x &amp;gt; y$, Then the decimal expansion of&lt;/p&gt;
&lt;p&gt;$$x = \frac{x_0}{10^0} + \frac{x_1}{10^1} + \frac{x_2}{10^2} + \dots + \frac{x_k}{10^k}$$
$$y = \frac{y_0}{10^0} + \frac{y_1}{10^1} + \frac{y_2}{10^2} + \dots + \frac{y_k}{10^k}$$&lt;/p&gt;
&lt;p&gt;has some $x_i &amp;gt; y_i$. Assume $i$ is the least such index.&lt;/p&gt;
&lt;p&gt;It follows by &lt;em&gt;b&lt;/em&gt;
$$f(x) = f(1) \left [ f(\frac{x_0}{10^0}) + f(\frac{x_1}{10^1}) + f(\frac{x_2}{10^2}) + \dots + f(\frac{x_k}{10^k}) \right ] = f(1) \left [ \frac{x_0}{10^0} + \frac{x_1}{10^1} + \frac{x_2}{10^2} + \dots + \frac{x_k}{10^k} \right ]$$
$$f(y) = f(1) \left [ f(\frac{y_0}{10^0}) + f(\frac{y_1}{10^1}) + f(\frac{y_2}{10^2}) + \dots + f(\frac{y_k}{10^k}) \right ] = f(1) \left [ \frac{y_0}{10^0} + \frac{y_1}{10^1} + \frac{y_2}{10^2} + \dots + \frac{y_k}{10^k} \right ]$$&lt;/p&gt;
&lt;p&gt;Considering both cases of $f(1)$ from &lt;em&gt;a&lt;/em&gt;, The inequality $f(x) \geq f(y)$ follows.&lt;/p&gt;
&lt;p&gt;Note even if $x$ or $y$ were periodic, i.e the expansion does not end, some sufficiently large $k$ would still exist fulfilling our construction.&lt;/p&gt;
&lt;h3 id=&#34;d&#34;&gt;d&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Case.&lt;/strong&gt;   $f(1) = 0$&lt;br&gt;
For any real number $x$ we can pick-up two rational numbers $q_0$ and $q_1$ such that $q_0 \leq x \leq q_1$, But we know $f(q_0) = f(q_1) = 0$ from &lt;em&gt;b&lt;/em&gt;, and $f(q_0) \leq f(x) \leq f(q_1)$ from &lt;em&gt;c&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case.&lt;/strong&gt;   $f(1) = 1$&lt;br&gt;
For any real-number $x$, We know there are rational numbers $q_{1a}, q_{2a}, \dots$ which arbitrarily get closer to $x$ from above, and similarly we know there are rational numbers $q_{1b}, q_{2b}, \dots$ which arbitrarily get closer to $x$ from below. So we have $q_{ib} \leq x \leq q_{ia}$ for $i = 1, 2, \dots$.&lt;/p&gt;
&lt;p&gt;From &lt;em&gt;c&lt;/em&gt;, We get $f(q_{ib}) \leq f(x) \leq f(q_{ia})$, and by &lt;em&gt;b&lt;/em&gt;, $q_{ib} \leq f(x) \leq q_{ia}$, which suffices to prove $f(x) = x$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Hobbyist&#39;s Dialogue on Theoretical CS and Overview of Computational Complexity</title>
      <link>https://mostafatouny.github.io/post/hobbyist-talk/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/hobbyist-talk/</guid>
      <description>&lt;h2 id=&#34;playing-the-video&#34;&gt;Playing The Video&lt;/h2&gt;
&lt;p&gt;At the bottom right of the above picture, There is a hyperlinked caption. Click on it to play the video.&lt;/p&gt;
&lt;h2 id=&#34;talk-abstract&#34;&gt;Talk Abstract&lt;/h2&gt;
&lt;p&gt;If people thought of something fascinating about computers, Then it would usually be about some fancy practical application. In this talk we tackle computers, but their theory or pure-math perspective. A central goal is to show everyone that theory developments are no less exciting and fascinating than practical computing. We hope to expose attendees to wear different shoes for theoretical CS. Particularly, We give an overview of computational complexity theory, which deals with classes of computational problems as a whole, not concrete individual problems like algorithms. The talk assumes no technical background, and is composed mainly of historical developments. The speaker is an undergrad student, and he is in no way an expert or authorized in this field. Rather, We give more personal reflections and hope for the talk to be as interactive as possible.&lt;/p&gt;
&lt;p&gt;You can see the slides &lt;a href=&#34;https://cryptpad.fr/slide/#/2/slide/view/-Z&amp;#43;uoSIn9G&amp;#43;3Zrpqf&amp;#43;H39fkUaBs55djg68doVzEVOzU/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#talk-abstract&#34;&gt;Talk Abstract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-it-all-started&#34;&gt;How it All Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#good-shots&#34;&gt;Good Shots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;how-it-all-started&#34;&gt;How it All Started&lt;/h2&gt;
&lt;p&gt;It all started with a linkedin chat message I sent to &lt;a href=&#34;https://www.linkedin.com/in/laurence-bordowitz-053b573a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Larry&lt;/a&gt;, For making an online-based study group with other hobbyists from &lt;a href=&#34;https://www.reddit.com/r/compsci/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;compsci-subreddit&lt;/a&gt;. Unfortuantely, The study group did not sustain. While we were speaking together, I mentioned how cool &lt;a href=&#34;https://www.cs.stonybrook.edu/people/faculty/StevenSkiena&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;prof. Steven Skiena&lt;/a&gt; is. It turned out he was Larry&amp;rsquo;s professor back when Larry was an undergrad student at Stony Brook university!. It was very kind of Larry that he wanted to support me by joining me in Stony Brook&amp;rsquo;s Algorithms seminar.&lt;/p&gt;
&lt;p&gt;Then I sent an email to the seminar&amp;rsquo;s mailing list, Expressing my wish to give a talk on history of computational complexity, Inspired by &lt;a href=&#34;https://www.researchgate.net/profile/Lance-Fortnow/publication/220530495_A_Short_History_of_Computational_Complexity/links/0deec52bd7ab603fef000000/A-Short-History-of-Computational-Complexity.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fortnow&amp;rsquo;s and Homer&lt;/a&gt; brief historical survey. prof. Skiena emailed me (yaay!) informing that there is no space for me to give the talk and that even grad students who attend the seminar taking credit for it, Do not usually present anything.&lt;/p&gt;
&lt;p&gt;Luckly, My email sent to Stony Brook&amp;rsquo;s mailing list, Was received by &lt;a href=&#34;https://www4.comp.polyu.edu.hk/~bo2li/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bo Li&lt;/a&gt;, A previously PhD student at Stony Brook. Then I received an email from him, Where he expressed he wishes me to give the talk for him!. It was very kind and encouraging for me, That he allowed me to give the talk with all his PhD students.&lt;/p&gt;
&lt;h2 id=&#34;good-shots&#34;&gt;Good Shots&lt;/h2&gt;
&lt;h3 id=&#34;physicists-success-in-popular-science&#34;&gt;Physicists Success in Popular Science&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./sabine.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;why-not-an-engineer&#34;&gt;Why Not an Engineer?&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./expectation.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;theory-is-no-less-fascinating&#34;&gt;Theory is No Less Fascinating&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./theory-fascinating.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;the-usefulness-of-useless-knowledge&#34;&gt;The Usefulness of Useless Knowledge&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./featured.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;shafi-and-silvios-seminal-paper&#34;&gt;Shafi and Silvio&amp;rsquo;s Seminal Paper&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./shafi-silvio.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;interactive-proof-system&#34;&gt;Interactive Proof System&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./pcp-0.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;avis-abel-prize-2021-award&#34;&gt;Avi&amp;rsquo;s Abel Prize 2021 Award&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./avi.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Auditing Honors Linear Algebra at UCLA, A Gratitude and Retrospection.</title>
      <link>https://mostafatouny.github.io/post/math115ah/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/math115ah/</guid>
      <description>&lt;h2 id=&#34;playing-the-video&#34;&gt;Playing The Video&lt;/h2&gt;
&lt;p&gt;At the bottom right of the above picture, There is a hyperlinked caption. Click on it to play the video. (The record generated by zoom is corrupted beginning from 7:30, but luckly we catched a good part).&lt;/p&gt;
&lt;h2 id=&#34;in-brief&#34;&gt;In Brief&lt;/h2&gt;
&lt;p&gt;This is a very nice memory of my enrollment in &lt;a href=&#34;https://www.ucla.edu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UCLA&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://www.math.ucla.edu/ugrad/courses/math/115AH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Math115AH&lt;/a&gt; honors linear algebra course, taught by prof. &lt;a href=&#34;https://www.math.ucla.edu/~rse/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Richard Elman&lt;/a&gt;. It all started with &lt;a href=&#34;https://www.reddit.com/r/theoreticalcs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TCS&amp;rsquo;s subreddit&lt;/a&gt; where I was very fortunate to meet a wonderful student, Kyle Hess. I was consulting his advices for a while. He even recommended me to prof. R. Elman&amp;rsquo;s course, So that I get a chance of building up a community and meeting other math enthusiasts. Don&amp;rsquo;t miss the video, It contains really very kind words by him.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#playing-the-video&#34;&gt;Playing The Video&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#in-brief&#34;&gt;In Brief&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#quotes&#34;&gt;Quotes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#course-work&#34;&gt;Course Work&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;#personal-remarks-and-retrospections&#34;&gt;Personal Remarks and Retrospections&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Kyle Hess&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Over the years it became apparent to me that you, Mostafa, are very dedicated to learn mathematics and I found it tragic you have no resources like a community.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It was clear to me how hard you are trying but you don&amp;rsquo;t have the basic fundamentals, that you needed an extra support in a form of class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I was able to have these resources, so I wanted to share that with other people because is such a beautiful thing, and I am glad you were able to have this experience.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Richard Elman&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When we started this class I told you it would be a hard class. So, I did not fool you for sure. Mathematics is always difficult to learn and it takes alot of work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Learn things and follow what you like. Don&amp;rsquo;t let anybody say you should do this for any reason. If you find something you like, Follow it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;
&lt;h2 id=&#34;course-work&#34;&gt;Course Work&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Homework&lt;/th&gt;
&lt;th&gt;My Solution&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/dwwbHnnhHYRE2IdU-&amp;#43;lMcFjx/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HW-1&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/nKee1aTUAGMggRd6PoAvyFxl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sol-1&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/xts5dlYwyGSo6cxE3LAx2yS4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HW-2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/mNQ&amp;#43;ILVPleITbknvHQ06XCyV/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sol-2&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/0xtX7nC&amp;#43;EzJZxJ8ei0PUgNy1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HW-3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/ri&amp;#43;gx4znGS1SHNcfj2oo3Kcb/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sol-3&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/i4uwo3IvtQHVtaapVIzmR5zx/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HW-4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/yLcvbAzRVVescq6D3H3YssjK/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sol-4&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/Hveq3ZASMSl3qrvOsqa7anAV/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HW-5&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/OCS&amp;#43;4IGDW-0yfIIHEKcBRijd/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sol-5&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/BVjjAXI6&amp;#43;cp3-si0B1FoMNQR/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Midterm&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/-b2fXW3Y64qxe90DJg-QZQjs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sol-mid&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/abLFT66gBmVUF7gUmFMJZ&amp;#43;0Y/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HW-6&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/nGKBa2odaAJ5ymR0WIr5xXxq/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sol-6&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/w49K6VMKVjSDVE96WcjOdNAM/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HW-7&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/rxRyVD0adr4qph1jLKPxjbmt/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sol-7&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/8YxvfRX2fCfMjLMxpWNOPfqp/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HW-8&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/GvC-lK4Xip9YiZ0f2wqn2Hmz/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sol-8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/v-UaVdSx89i0Nu1BPftvSDef/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HW-9&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cryptpad.fr/file/#/2/file/aycyZYknap1qzk3dNOyuGq7G/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sol-9&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;personal-remarks-and-retrospections&#34;&gt;Personal Remarks and Retrospections&lt;/h2&gt;
&lt;p&gt;At the moment of writing these lines, Less than one week separates me from completing my 7th semester, out of a total of 8 semesters of my university&amp;rsquo;s program. I have been so ambitious to achieve something big during the past years. The conclusion I arrive at now is: I lack undergrad foundational basics, Usually mastered by an average student. I feel really bad.&lt;/p&gt;
&lt;p&gt;I will always be indebted to Kyle for alarming me by a great pitfall I had fallen into. Namely, Approaching inaccessible problems with no good foundational toolboxes.&lt;/p&gt;
&lt;p&gt;If there is a big lesson that, I learned before, and keep continually learn, It would be:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I will never be on the right pathway. At best scenarios I learn from mistakes to get nearer of doing things right, but I would never be right 100%. Being a skeptic and continually learning from mistakes is not a temporary phase of a young kid. It is a morale to be reserved for someone&amp;rsquo;s whole life.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Proving a Space Lower-bound on a Contrived Automata</title>
      <link>https://mostafatouny.github.io/post/automata-lower-bound/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/automata-lower-bound/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this post we contrive a new kind of Automata, Then prove a space lower-bound on it, for a contrived problem. We begin with an example which shall motivate our whole approach, Then we imagine a thought experiment which is the basis of the proof, Finally we present the formal proof itself. The most beautiful moment I have felt while working on this problem was when a pure deductive reasoning yielded a reasonable approach, which in turn yielded a logic-based established truth. This is why I wrote a separate section called &lt;em&gt;Thought Experiment&lt;/em&gt;. In addition, We strongly recommend the reader not to miss $appendix, fun facts$ section.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#motivating-example&#34;&gt;Motivating Example&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#usual-dfa&#34;&gt;Usual DFA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a-new-definition-for-a-new-problem&#34;&gt;A New Definition For A New Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#first-remark-on-solving-the-new-problem&#34;&gt;First Remark On Solving The New Problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#thought-experiment&#34;&gt;Thought Experiment&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#information-reserving-definition&#34;&gt;Information-reserving Definition?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#surprise-moment&#34;&gt;Surprise Moment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#interpreting-derived-proof&#34;&gt;Interpreting Derived Proof&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#informal-proof&#34;&gt;Informal Proof&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#formal-proof&#34;&gt;Formal Proof&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#definitions&#34;&gt;Definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#proof&#34;&gt;Proof&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#appendix&#34;&gt;Appendix&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#fun-facts&#34;&gt;Fun Facts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#paper-notes-of-surprise-moment&#34;&gt;Paper Notes of Surprise Moment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;motivating-example&#34;&gt;Motivating Example&lt;/h2&gt;
&lt;h3 id=&#34;usual-dfa&#34;&gt;Usual DFA&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./even-odd.jpg&#34; alt=&#34;even-odd&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The problem the above $\textit{deterministic finite automata}$ ($\textit{DFA})$ solves is finding whether the number of ones in the input binary string is even or odd. The $\textit{DFA}$ is defined in the usual straight-forward way.&lt;/p&gt;
&lt;h3 id=&#34;a-new-definition-for-a-new-problem&#34;&gt;A New Definition For A New Problem&lt;/h3&gt;
&lt;p&gt;Now, Let&amp;rsquo;s think of a different problem for the $\textit{DFA}$ which shall motivate a different definition. Namely, Finding the length of the longest 1-bit sequence. For instance, the string&amp;rsquo;s 0111011 longest 1-bit sequence is 3. But the usual $\textit{DFA}$ outputs either $\textit{accept}$ or $\textit{reject}$, So how could it accommodate outputting a number? We tune its construction/definition as follows: We define a labeled set of states $\textit{F}$ such that if the machine halted on any of them, The output is the label of the state the machine halted on. In our case, We designate a labeled state for each possible longest-length solution.&lt;/p&gt;
&lt;p&gt;For the above diagram of $\textit{usual DFA}$ section, We could ignore $q_{even}$ as an $\textit{acceptance state}$, and think of the labels $\textit{even}$ and $\textit{odd}$ as the output of the machine.&lt;/p&gt;
&lt;h3 id=&#34;first-remark-on-solving-the-new-problem&#34;&gt;First Remark On Solving The New Problem&lt;/h3&gt;
&lt;p&gt;Given $n$ is the length of the input string, An initial thought might be settling states $q_0, q_1, \dots, q_n$ where state $q_i$ transitions to $q_{i+1}$ if bit 1 is read, and stays the same if bit 0 is read.&lt;/p&gt;
&lt;p&gt;Accordingly, On $w = 10110$, and after reading $10$ the machine is supposed to be at $q_1$ indicating it counted a sequence of length one. But what about counting the other ones? If the machine started counting again, It forgets the sequence of length one it counted before. If it reserved saving the first sequence length, and did not count other sequences, Then certainly the machine fails.&lt;/p&gt;
&lt;p&gt;This discussion somehow suggests a state must reserve both the count of longest sequence length and the count of the sequence the machine is running on. This is the central key element our space lower-bound proof is based on.&lt;/p&gt;
&lt;h2 id=&#34;thought-experiment&#34;&gt;Thought Experiment&lt;/h2&gt;
&lt;h3 id=&#34;information-reserving-definition&#34;&gt;Information-reserving Definition?&lt;/h3&gt;
&lt;p&gt;Personally, My first reaction was: If I proved a state must reserve two these informations, Then a $\Omega(n^2)$ lower-bound straight-forwardly follows. That as you need $n+1$ states for each possible 1-bit sequence length, and for each of these states, You need $n+1$ states for counting a sequence the machine is running on. So, $(n+1)(n+1)$ states are needed.&lt;/p&gt;
&lt;p&gt;But how on earth I shall develop a definition of information reserving? No answer. Also, I did not explore $\textit{information theory}$ enough to figure a clue. At this point, I was skeptic whether the problem is going to solved at all.&lt;/p&gt;
&lt;p&gt;Surprisingly for me, Eventhough I did not define $\textit{information-reserving}$, Via the intuition captured from it, I formulated a conjecture which worked at the end!&lt;/p&gt;
&lt;h3 id=&#34;surprise-moment&#34;&gt;Surprise Moment&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;thought&#34; srcset=&#34;
               /post/automata-lower-bound/thought_hua11728bd0547ef08fb0aee96176b8fdc_74279_69807db2fc2ff288d12df35b3550c339.webp 400w,
               /post/automata-lower-bound/thought_hua11728bd0547ef08fb0aee96176b8fdc_74279_f808cd41138687f5eb803b68b90f9b67.webp 760w,
               /post/automata-lower-bound/thought_hua11728bd0547ef08fb0aee96176b8fdc_74279_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/post/automata-lower-bound/thought_hua11728bd0547ef08fb0aee96176b8fdc_74279_69807db2fc2ff288d12df35b3550c339.webp&#34;
               width=&#34;760&#34;
               height=&#34;358&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We desginate two strings and conjecture a counter-example yielded from each of both. Namely, Either the machine fails to remember previous counted sequences length, or fails to consider new sequences.&lt;/p&gt;
&lt;p&gt;For the sake of brevity and this post&amp;rsquo;s proof readability, We omit the left string 110111. After reading the other string 1101, The machine must yield $q_{2}&amp;rsquo;$, An output state whose label indicates the automata&amp;rsquo;s output is $2$, When the machine halts on it.&lt;/p&gt;
&lt;p&gt;But on the input string 110, The machine outputs also $q_{2}&amp;rsquo;$. So on input 1101, after reading 110 and while the machine is pointing on last 1 bit, it is on state $q_{2}&amp;rsquo;$.&lt;/p&gt;
&lt;p&gt;It is clear now before and after reading the last 1-bit of 1101, The machine is on state $q_{2}&amp;rsquo;$. As a result, We conclude the machine state&amp;rsquo;s stays the same if it is on $q_{2}&amp;rsquo;$ and read 1.&lt;/p&gt;
&lt;p&gt;Now, on string 110111, It is very easy to prove the automata outputs $q_{2}&amp;rsquo;$ after reading it, and a contradiction occurs as the machine outputs the false answer!&lt;/p&gt;
&lt;h3 id=&#34;interpreting-derived-proof&#34;&gt;Interpreting Derived Proof&lt;/h3&gt;
&lt;p&gt;I must admit, For the proof I have just outlined, It was not intuitive for me why does it work! In this section, I try to interpret the proof in terms of the remark I mentioned before in $\textit{Information-reserving Definition?}$ section.&lt;/p&gt;
&lt;p&gt;On input string 110, What the machine could learn is only the longest sequence of 1s is 2. As the machine halts on $q_{2}&amp;rsquo;$ upon reading it, We might like to think of the state&amp;rsquo;s information content as indicating only the longest sequence of 1s is 2.&lt;/p&gt;
&lt;p&gt;On input string 1101, The machine halts on $q_{2}&amp;rsquo;$. However, Reading this string should yield more information content than the one we specified and restricted $q_{2}&amp;rsquo;$ on. Namely, The $\textbf{last}$ counter of 1s sequence is one. As the machine ignores the information of counting 1s sequence it is running on, It failed!&lt;/p&gt;
&lt;h2 id=&#34;informal-proof&#34;&gt;Informal Proof&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./state-space.jpg&#34; alt=&#34;state-space&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We give informal proofs of concrete examples, Then we show how clear and easy is it to generalize them.&lt;/p&gt;
&lt;p&gt;The approach is as follows: We show the existince of n+1 $q_{i,0}$ states. For each state, the label $i$ indicates output $i$ in case the machine halted on its corresponding state. We pick-up each state of those $q_{i,0}$, and prove the existince of more states. That is proved by picking-up a designated string, Then show a contradiction occurs in case we had a less number of states $q_{i,j}.$ Finally, We show those states&amp;rsquo; uniqueness.&lt;/p&gt;
&lt;p&gt;On the following, We assume $M$ to be an arbitrary automata which solves longest 1s sequence problem.&lt;/p&gt;
&lt;h3 id=&#34;notations&#34;&gt;Notations&lt;/h3&gt;
&lt;p&gt;Special states $q_{i,j}$ also indicate output $i$ in case a machine halted on them, Even if $j \neq 0$. Also, For convenience, We just say $q_{i,j}$ outputs $i$. We say also machine $M$ output $q_{i,j}$ to mean it output $i$, halting on state $q_{i,j}$. We pinpoint configuration $w_0^&lt;em&gt;qw_1^&lt;/em&gt;$ if the machine read string $w_0^&lt;em&gt;$ and is pointing at the first bit of $w_1^&lt;/em&gt;$. if $w_1^*$ is null, Then implicitly the machine completed reading.&lt;/p&gt;
&lt;h3 id=&#34;n1-q_i0-states&#34;&gt;n+1 $q_{i,0}$ States&lt;/h3&gt;
&lt;p&gt;Clearly, We need n+1 distinct states for each possible solution of longest sequence of 1s. Given an input string $\textit{w}$ of size $\textit{n}$, It is clear there are $\textit{n+1}$ possible solutions. Namely, $0, 1, \dots, n$. Exemplary strings include $0^n, 10^{n-1}, 110^{n-2}, \dots, 1^n$, respectively. So, the automata must include n+1 distinct labeled states, Covering all possible solutions. We call them $q_{0,0}, q_{1,0}, \dots, q_{n,0}$.&lt;/p&gt;
&lt;h3 id=&#34;state-q_11&#34;&gt;State $q_{1,1}$&lt;/h3&gt;
&lt;p&gt;We already know there is a state $q_{1,0}$ which outputs $1$. Let&amp;rsquo;s assume for the sake of contradiction there is no state other than $q_{1,0}$ which outputs $1$. Consider the string $1011$. Clearly the machine reaches configuration $\textbf{(1)}$ $101q_{1,0}1$. That is attributed to the fact $M$ must output $q_{1,0}$ on reading input string $101$, By definition of $M$. Note also $q_{1,0}$ is the only state which outputs $1$. A similar reasoning leads to configuration $\textbf{(2)}$ $10q_{1,0}11$. From $\textbf{(1)}$ and $\textbf{(2)}$ we conclude $\delta(q_{1,0}, 1) = q_{1,0}$. As a result, $M$ outputs $1$ on string $1011$, which in turn is a contradiction. It contradicts our assumption, or $M$&amp;rsquo;s definition, That it solves longest 1s sequence problem correctly. Hence, there is a state other than $q_{1,0}$ which outputs $1$. We call it $q_{1,1}$.&lt;/p&gt;
&lt;h3 id=&#34;state-q_21&#34;&gt;State $q_{2,1}$&lt;/h3&gt;
&lt;p&gt;An exact reasoning to proof of state $q_{1,1}$, but on string $110111$, Concludes there is a state other than $q_{2,0}$ which outputs $1$. We call it $q_{2,1}$&lt;/p&gt;
&lt;h3 id=&#34;state-q_22&#34;&gt;State $q_{2,2}$&lt;/h3&gt;
&lt;p&gt;We already know there are two distinct states $q_{2,0}$ and $q_{2,1}$ which output $2$. Let&amp;rsquo;s assume for the sake of contradiction there is no state other than $q_{2,0}$ and $q_{2,1}$ which outputs $2$. On input string $110111$, It is clear after the discussion of State $q_{1,1}$, Machine $M$ reaches configuration $110q_{2,0}111$. state $q_{2,0}$ is selected here without the loss of generality. $M$ reaches also configuration $1101q_{2,1}11$. The state here must be different from $q_{2,0}$. Otherwise, A contradiction occurs. So, state $q_{2,1}$ is concluded. On configuration $11011q_{k}1$, It is clear the state $q_{k}$ must output $2$, i.e $q_{k} = q_{2,i}$ for some $i$, As $M$ outputs $2$ upon reading string 11011. As we assumed there are only two states which output $2$, Then $q_{k} = q_{2,0}$ or $q_{k} = q_{2,1}$. In either cases, A contradiction occurs, whereby $M$ outputs $2$ upon reading $110111$.&lt;/p&gt;
&lt;h3 id=&#34;other-states-in-same-manner&#34;&gt;Other States in Same Manner&lt;/h3&gt;
&lt;p&gt;It is clear we could continue in this manner untill state $q_{n,n}$ is proved to exist, in the arbitrary machine $M$. There is only one remaining caveat we must fulfill. It is proving the uniqueness of states $q_{i,j}$.&lt;/p&gt;
&lt;h3 id=&#34;uniqueness&#34;&gt;Uniqueness&lt;/h3&gt;
&lt;p&gt;Let $q_{i,j}$ and $q_{i&amp;rsquo;,j&amp;rsquo;}$ be any two arbitrary states, such that it is not the case $i=i&amp;rsquo; \wedge j=j&amp;rsquo;$. So, Either $i \neq i&amp;rsquo;$ or $j \neq j&amp;rsquo;$. For the former, It is obvious $q_{i,j} \neq q_{i&amp;rsquo;,j&amp;rsquo;}$. Otherwise, A sole state would output both $i$ and $i&amp;rsquo;$. That does not conform with our notion of a state outputting a unique label. Let&amp;rsquo;s consider the latter, $j \neq j&amp;rsquo;$. It is safe to assume $i = i&amp;rsquo;$ as we handled the case $i \neq i&amp;rsquo;$. If $q_{i,j} = q_{i,j&amp;rsquo;}$, Then the number of states which output $i$ is less than $i+1$. From the discussion above, It is clear that leads to a contradiction.&lt;/p&gt;
&lt;h3 id=&#34;space-bounds&#34;&gt;Space Bounds&lt;/h3&gt;
&lt;p&gt;At this point, We have shown there are $1+2+3+\dots+(n+1) = \frac{(n+2)(n+1)}{2} = \Omega(n^2)$ distinct states. It is easy to see that it is possible to construct a machine of $\frac{(n+2)(n+1)}{2} = \mathcal{O}(n^2)$ states, As shown in this section&amp;rsquo;s diagram, That solves finding longest 1s sequence problem. Hence, A space tight-bound $\Theta(n^2)$ is proved.&lt;/p&gt;
&lt;h2 id=&#34;formal-proof&#34;&gt;Formal Proof&lt;/h2&gt;
&lt;p&gt;Instead of proving concrete examples as we did before, We present here a general proof. But we do not prove states&amp;rsquo; uniqueness as we see the discussion of $\textit{informal proof}, {uniqueness}$ sufficies for that. Here we aim to provide a more mathematically matured illustration of states&amp;rsquo; existince proof.&lt;/p&gt;
&lt;p&gt;Before doing so, We give precise definitions of the finite automata and the problem we have been working through.&lt;/p&gt;
&lt;h3 id=&#34;definitions&#34;&gt;Definitions&lt;/h3&gt;
&lt;h4 id=&#34;state-output-deterministic-finite-automata&#34;&gt;State-Output Deterministic Finite Automata&lt;/h4&gt;
&lt;p&gt;$\textit{State-Output Deterministic Finite Automata}$ ($SODFA$) is a 6-tuple $(Q, \Sigma, \delta, q_0, F, L)$ where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$Q$ is a finite set called the states,&lt;/li&gt;
&lt;li&gt;$\Sigma = \set{0, 1}$ is a finite set called the alphabet,&lt;/li&gt;
&lt;li&gt;$\delta:Q \times \Sigma \rightarrow Q$ is the transition function,&lt;/li&gt;
&lt;li&gt;$q_{st} \in Q$ is the start state, and&lt;/li&gt;
&lt;li&gt;$F \subseteq Q$ is the set of accept states.&lt;/li&gt;
&lt;li&gt;$L: F \rightarrow \set{0, 1, \dots}$ is a function which maps accept states to natural number. This function formalizes our intuitive notion of a state $q_{i,j}$ to output i.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The $SODFA$ either accepts or rejects an input string $w$. In case of acceptance, It outputs $L(q&amp;rsquo;)$ where $q&amp;rsquo;$ is the state the machine has halted on.&lt;/p&gt;
&lt;h4 id=&#34;longest-1s-sequence-problem&#34;&gt;Longest 1s Sequence Problem&lt;/h4&gt;
&lt;p&gt;For an input binary string $w = \set{0, 1}^*$ of length $n \in \mathcal{N}$, It could be re-written as $0^{k_1}1^{k_2} \dots 0^{k_{n-1}}1^{k_{n}}0^{k_{n+1}}$, such that $\Sigma_i k_i = n$. $0^{k_{n+1}}$ is added so that this representation accommodates $w$ in case its first bit is 1.&lt;/p&gt;
&lt;p&gt;The $\textit{Longest 1s Sequence}$ problem asks for a $SODFA$ machine to halt on an accept state $q&amp;rsquo;$ such that $L(q&amp;rsquo;) = max \hspace{2mm} \set{\hspace{2mm} k_i \hspace{1mm} | \hspace{1mm} 1^{k_i} \hspace{0.5mm}\ \text{is a substring of} \hspace{2mm} w \hspace{2mm}}$.&lt;/p&gt;
&lt;h3 id=&#34;proof&#34;&gt;Proof&lt;/h3&gt;
&lt;p&gt;We show:&lt;/p&gt;
&lt;p&gt;For an arbitrary $SODFA$ machine $M$, if it solves $\textit{Longest 1s Sequence Problem}$ for inputs of size $n$, Then:
For any $0 \leq i \leq n$,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) $q_{i, j} \in M(Q)$ for $0 \leq j \leq i$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We solve (1) under the stated assumption.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Consider string $1^i01^{i+1}$. On configuration $1^i0q1^{i+1}$ for some $q$, $L(q)=i$. This conclusion is attributed to the fact that $M$ outputs $i$ upon reading $1^i0$. We call this $q_{i,0}$. If you are super math nerd, Then you might like to develop an $\textit{extended delta function}$ and solve this step more carefully by recursion.&lt;/p&gt;
&lt;p&gt;For configurations $1^i01q1^{i}$, $1^i011q1^{i-1}$, &amp;hellip;, $1^i01^{i}q1$, all states $q$ have the property that $L(q)=i$ for the exact same reason. We call them respectively $q_{i,1}, q_{i,2}, \dots, q_{i,i}$.&lt;/p&gt;
&lt;p&gt;Those $q_{i,j}$ are distinct. For the sake of contradiction assume the contrary. Then there are two $q_{i,j0}$ and $q_{i,j1}$ equal to each other. Without the loss of generality let $j0 &amp;lt; j1$. Now there is a sequence of states $q_{i,j0}, \dots, q_{i,j1}$ such that reading $1$ bit while the machine is on any of them reaches the next one. If the machine reached $q_{i,j1}$ then it is in fact returned back again to $q_{i,j0}$. As a result, no matter how much $1$ bits are read, The machine&amp;rsquo;s state is going to be within that sequence of states, and it would output $i$. So, Running $M$ on whole $1^i01^{i+1}$ string outputs $i$ which contradicts our definition of $M$ that it yields the correct answer.&lt;/p&gt;
&lt;p&gt;Again, If you are super math nerd, Pick-up $q_{i,j0}$ then show by a trivial induction on z that the machine always outputs $i$ after reading $1^z$.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[MS]&lt;/strong&gt; Michael Sipser. Introduction To The Theory of Computation. Cengage Learning.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;
&lt;h3 id=&#34;fun-facts&#34;&gt;Fun Facts&lt;/h3&gt;
&lt;p&gt;I came upon the $\textit{DFA}$ which finds whether the number of 1 bits in a string is even or odd in $\textbf{[MS]}$&amp;rsquo;s superb book. Then I thought of an obvious extension to it. A machine which finds the remainder of dividing on any number. Basically, For number $\textit{m}$, Designate $\textit{m}$ states, $q_0, q_1, \dots, q_{m-1}$ such that halting on $q_i$ indicates the remainder is $i$. This is where the new machine&amp;rsquo;s construction of output came from!&lt;/p&gt;
&lt;p&gt;Afterward, I tried to think of problems which are elegantly modeled on a $\textit{DFA}$ but lost hope due to the tedious work of encoding/decoding objects. Since automata works on binary bits, It seemed it is best to work on arithmetic problems. An obvious immediate one is finding the maximum number of an array. This is where the problem of finding the longest sequence of 1 came from!&lt;/p&gt;
&lt;p&gt;Even more notably, I did not pick-up $\textbf{[MS]}$&amp;rsquo;s book to find lower-bounds, As I know proving them is hard!&lt;/p&gt;
&lt;h3 id=&#34;paper-notes-of-surprise-moment&#34;&gt;Paper Notes of Surprise Moment&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;surprise-0.jpg&#34; srcset=&#34;
               /post/automata-lower-bound/surprise-0_huc1c6a3f0d5522c2b79d00975c7357228_80529_d740c93843418dfffdb4e82df66f289e.webp 400w,
               /post/automata-lower-bound/surprise-0_huc1c6a3f0d5522c2b79d00975c7357228_80529_a4a011e14d120aee3a01d5063f3b53c5.webp 760w,
               /post/automata-lower-bound/surprise-0_huc1c6a3f0d5522c2b79d00975c7357228_80529_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/post/automata-lower-bound/surprise-0_huc1c6a3f0d5522c2b79d00975c7357228_80529_d740c93843418dfffdb4e82df66f289e.webp&#34;
               width=&#34;540&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;surprise-1.jpg&#34; srcset=&#34;
               /post/automata-lower-bound/surprise-1_hu978d0fb745ed39ca5634fb7718d606a5_68011_086584a726f30e4f3dafad0629715782.webp 400w,
               /post/automata-lower-bound/surprise-1_hu978d0fb745ed39ca5634fb7718d606a5_68011_2a3521e6251fcd7b3a2b11f409ab8e21.webp 760w,
               /post/automata-lower-bound/surprise-1_hu978d0fb745ed39ca5634fb7718d606a5_68011_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://mostafatouny.github.io/post/automata-lower-bound/surprise-1_hu978d0fb745ed39ca5634fb7718d606a5_68011_086584a726f30e4f3dafad0629715782.webp&#34;
               width=&#34;540&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

$\require{textmacros}$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Competitive Programming</title>
      <link>https://mostafatouny.github.io/post/competitive-prog/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/competitive-prog/</guid>
      <description>&lt;h2 id=&#34;problems&#34;&gt;Problems&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Problem&lt;/th&gt;
&lt;th&gt;Source&lt;/th&gt;
&lt;th&gt;Solution&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;120004 UVa, Bubble Sort&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=3155&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://mostafatouny.github.io/competitive-prog-post/bubble-sort&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10940 UVa, Throwing cards away II&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1881&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://mostafatouny.github.io/competitive-prog-post/throwing-cards&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11683 UVa, Laser Sculpture&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=2730&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://mostafatouny.github.io/competitive-prog-post/laser-sclupture&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;573 UVa, The Snail&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://onlinejudge.org/index.php?option=onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=514&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://mostafatouny.github.io/competitive-prog-post/the-snail&#34;&gt;Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Proving Graphical Steiner Tree is NP-Complete</title>
      <link>https://mostafatouny.github.io/post/steiner-tree-np-complete/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:01 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/steiner-tree-np-complete/</guid>
      <description>&lt;h2 id=&#34;preface&#34;&gt;Preface&lt;/h2&gt;
&lt;p&gt;We prove the &lt;em&gt;graphical &lt;a href=&#34;https://en.wikipedia.org/wiki/Steiner_tree_problem&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;steiner tree&lt;/a&gt;&lt;/em&gt; problem is &lt;em&gt;NP-complete&lt;/em&gt; by reducing &lt;a href=&#34;https://en.wikipedia.org/wiki/Vertex_cover&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vertex cover&lt;/a&gt; to it. The version of it is taken from our favorite &lt;em&gt;Kleinberg and Tardos&amp;rsquo; Algorithm Design&lt;/em&gt; book&amp;rsquo;s exercises. We assume the reader is familiar with &lt;em&gt;vertex cover&lt;/em&gt;, what &lt;em&gt;NP-completeness&lt;/em&gt; is and the general approach for proving it by &lt;em&gt;reduction&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;graphical-steiner-tree-definition&#34;&gt;Graphical Steiner Tree Definition&lt;/h2&gt;
&lt;p&gt;Here is a clear definition of the problem we prove its NP-completeness, Taken from &lt;em&gt;klienberg and tardos&amp;rsquo; exercise 38&lt;/em&gt; of &lt;em&gt;chapter 8&lt;/em&gt;, &lt;em&gt;NP and computational intractability&lt;/em&gt;.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./ex.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;example-and-high-level-overview&#34;&gt;Example and High-Level Overview&lt;/h2&gt;
&lt;p&gt;Before showing a rigour proof, We present a simple example which demonstrates our approach. We begin with a &lt;em&gt;vertix cover&lt;/em&gt; example, then accordingly encode it into an instance of the &lt;em&gt;graphical steiner tree&lt;/em&gt; problem. We give some insights why finding a solution to the latter accounts for a solution to the former, and Hence argue our claimed proof is correct.&lt;/p&gt;
&lt;h3 id=&#34;vertex-cover&#34;&gt;Vertex Cover&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s consider a simple example of &lt;em&gt;vertex cover&lt;/em&gt; problem. A graph $G$ has vertices $G(V) = \set {1, 2, 3, 4}$ colored in red and purple, and edges $G(E) = \set {1, 2, 3, 4 }$ colored in &lt;em&gt;green&lt;/em&gt;. Finally, Let $k=2$
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./vertex.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Clearly, A subset $G(V)_{red} = \set {1, 2}$ has the minimum possible number of elements which enables covering all edges $G(E)$. Now let&amp;rsquo;s see how it is going to be encoded into an instance of a &lt;em&gt;graphical steiner tree&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;graphical-steiner-tree&#34;&gt;Graphical Steiner Tree&lt;/h3&gt;
&lt;p&gt;Construct a graph $G&amp;rsquo;$ whose vertices $G&amp;rsquo;(V)$ are the unions of,&lt;/p&gt;
&lt;p&gt;$\set {S}$ a special vertex, $\set {1, 2, 3, 4} = G&amp;rsquo;(V)_e$ colored in green corresponding to edges of the vertex cover $G(E)$, $\set {1&amp;rsquo;, 2&amp;rsquo;, 3&amp;rsquo;, 4&amp;rsquo;} = G&amp;rsquo;(V)_v$ colored in red and purple corresponding to vertices of the vertex cover $G(V)$, and $\set {1_0, 2_0, 3_0, 4_0} = G&amp;rsquo;(V)_o$ contains an additional vertex colored in white for each element of $G&amp;rsquo;(V)_v$. Note vertices in $G&amp;rsquo;(V)_o$ and vertex $S$ are not corresponded to anything in the &lt;em&gt;vertex cover&lt;/em&gt; instance.&lt;/p&gt;
&lt;p&gt;$G&amp;rsquo;$&amp;rsquo;s edges $G&amp;rsquo;(E)$ are the unions of,&lt;/p&gt;
&lt;p&gt;$G&amp;rsquo;(E)_c$ corresponding to edges which connect $G&amp;rsquo;(V)_v$ with $G&amp;rsquo;(V)_e$ in case an edge is covered by a vertex in the &lt;em&gt;vertex cover&lt;/em&gt; instance, and $G&amp;rsquo;(E)_S$ contains two edges for each element of $G&amp;rsquo;(V)_v$ connecting it to the special vertex $S$ via $G&amp;rsquo;(V)_o$. Note edges in $G&amp;rsquo;(E)_S$ are not corresponded to anything in the &lt;em&gt;vertex cover&lt;/em&gt; instance.&lt;/p&gt;
&lt;p&gt;Define $X&amp;rsquo; = \set{S} \cup G&amp;rsquo;(V)_v \cup G&amp;rsquo;(V)_e$&lt;/p&gt;
&lt;p&gt;Define $k&amp;rsquo; = ||G&amp;rsquo;(V)_e|| + 2(k) + (||G&amp;rsquo;(V)_v||-(k))$ $=$ $||G&amp;rsquo;(V)_e|| + 2(2) + (||G&amp;rsquo;(V)_v||-(2))$ where $k$ is taken from &lt;em&gt;vertex cover&lt;/em&gt; instance.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./graph.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;accounting-a-solution-for-vertex-cover&#34;&gt;Accounting a Solution for Vertex Cover&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s remark how a solution of encoded &lt;em&gt;Graphical Steiner Tree&lt;/em&gt; yields a solution to &lt;em&gt;Vertex Cover&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;By definition of &lt;em&gt;Graphical Steiner Tree&lt;/em&gt;, and definition of X, $G&amp;rsquo;(V)_v$ vertices must be connected to $S$. For each, There are two pathways, Either connecting backward via $G&amp;rsquo;(V)_o$ with cost of two edges, or connecting forward via $G&amp;rsquo;(V)_e$. So there is a penalty on connecting backward, and the algorithm is obliged to connect forward as much as possible to reduce the number of edges. In other words, We could reform the algorithm&amp;rsquo;s goal as, In order to connect $X$ in a single component with least possible edges, What is the minimum number of vertices of $G&amp;rsquo;(V)_v$ needs to be connected backward;y?&lt;/p&gt;
&lt;p&gt;The trick here as shown from the example is that we reduced vertices covering edges in &lt;em&gt;vertex cover&lt;/em&gt; to vertices connected to other vertices in &lt;em&gt;graphical steiner tree&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;more-rigour-remarks&#34;&gt;More Rigour Remarks&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s present some more rigour remarks of our reduction. For the sake of readability, We intentionally omit the definition of constructed encoded instance of &lt;em&gt;graphical steiner tree&lt;/em&gt;. We believe the above discussion suffices to convince the reader. In addition, We assume on behalf of the reader to see why both &lt;em&gt;theorem 1&lt;/em&gt; and &lt;em&gt;theorem 2&lt;/em&gt; suffices to prove intended NP-completeness.&lt;/p&gt;
&lt;h3 id=&#34;theorem-1&#34;&gt;Theorem 1&lt;/h3&gt;
&lt;p&gt;If a &lt;em&gt;vertex cover&lt;/em&gt; instance is &lt;em&gt;decided&lt;/em&gt; to be covered by at most $k$ vertices, Then the encoded &lt;em&gt;graphical steiner tree&lt;/em&gt; is decided to be solved by at most $k&amp;rsquo;$ edges.&lt;/p&gt;
&lt;p&gt;Note the definition of $k&amp;rsquo;$ is stated above.&lt;/p&gt;
&lt;h4 id=&#34;proof&#34;&gt;Proof&lt;/h4&gt;
&lt;p&gt;Let $X \subseteq G(V)$ be the chosen vertices in &lt;em&gt;vertex cover&lt;/em&gt; instance which cover all its edges. Let $G&amp;rsquo;(V)_X \subseteq G&amp;rsquo;(V)_v$ containing elements corresponding to $X$.&lt;/p&gt;
&lt;p&gt;Construct $F \subseteq G&amp;rsquo;(E)$ containing,&lt;/p&gt;
&lt;p&gt;One edge from each element of $G&amp;rsquo;(V)_e$ to some element in $G&amp;rsquo;(V)_X$, Two edges from each element of $G&amp;rsquo;(V)_X$ along the path to $S$, and one edge from each element of to $G&amp;rsquo;(V)_v - G&amp;rsquo;(V)_X$ to any remaining $G&amp;rsquo;(V)_e$.&lt;/p&gt;
&lt;p&gt;Clearly, Mentioned edges exist. Also, $X&amp;rsquo;$ (see its definition above) is a single component in the graph, As all needed vertices are connected to $S$.&lt;/p&gt;
&lt;p&gt;By definition, The number of elements in $X$ is at most $k$. Clearly, All mentioned edges of $X&amp;rsquo;$ are distinct from each other. Hence, The number of them is at most $k&amp;rsquo;$ following $F$&amp;rsquo;s construction.&lt;/p&gt;
&lt;h3 id=&#34;theorem-2&#34;&gt;Theorem 2&lt;/h3&gt;
&lt;p&gt;If the encoded &lt;em&gt;graphical steiner tree&lt;/em&gt; is decided to be solved by at most $k&amp;rsquo;$ edges, Then &lt;em&gt;vertex cover&lt;/em&gt; instance is &lt;em&gt;decided&lt;/em&gt; to be covered by at most $k$ vertices.&lt;/p&gt;
&lt;h4 id=&#34;proof-1&#34;&gt;Proof&lt;/h4&gt;
&lt;p&gt;Let $X&amp;rsquo;$ be the solution of encoded &lt;em&gt;graphical steiner tree&lt;/em&gt;. Since $X&amp;rsquo;$ is a single-component in the graph, All vertices must be connected to $S$ including $G&amp;rsquo;(V)_v$. Those are connected either &lt;em&gt;backward&lt;/em&gt; through $G&amp;rsquo;(V)_o$ or forward through $G&amp;rsquo;(V)_e$. Let $G&amp;rsquo;(V)_b$ be those which are connected backwardly. Let $k&amp;rsquo;_b$ be equal to its number of elements.&lt;/p&gt;
&lt;p&gt;Construct $X \subseteq G(V)$ containing vertices in &lt;em&gt;vertex cover&lt;/em&gt; instance corresponding to $G&amp;rsquo;(V)_b$ in $X&amp;rsquo;$. It is not hard to see those vertices cover all edges in &lt;em&gt;vertex cover&lt;/em&gt;. Clearly, In $X&amp;rsquo;$ each element of $G(V)_e$ is connected to some element in $G(V)_b$, Otherwise they won&amp;rsquo;t be connected to $S$ violating $X&amp;rsquo;$ definition. Hence, every edge in &lt;em&gt;vertex cover&lt;/em&gt; must be covered by $X$.&lt;/p&gt;
&lt;p&gt;What is remaining is to prove $X$&amp;rsquo;s cardinality is at most $k$. In other words, We need to show $k&amp;rsquo;_b$ is at most $k$. Assume for the sake of contradiction that $k&amp;rsquo;_b &amp;gt; k$. Then $||X&amp;rsquo;|| \geq ||G&amp;rsquo;(V)_e|| + 2(k&amp;rsquo;_b) + (||G&amp;rsquo;(V)_v||-(k&amp;rsquo;_b))$ $&amp;gt;$ $||G&amp;rsquo;(V)_e|| + 2(k) + (||G&amp;rsquo;(V)_v||-(k))$ $=$ $k&amp;rsquo;$ violating $X&amp;rsquo;$ to be at most $k&amp;rsquo;$ as defined.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I acknowledge that might not be a complete proof, However we believe it suffices for anyone with minimum familiarity of &lt;em&gt;computational complexity theory&lt;/em&gt; or &lt;em&gt;NP-completeness&lt;/em&gt;. We did really enjoy figuring the trick of reducing covering edges by vertices to connecting vertices to other vertices. After all, The literature is crammed with proved NP-complete problems. I guess a first-look in &lt;em&gt;Computers and Intractability: A Guide to the Theory of NP-completeness&lt;/em&gt; by &lt;em&gt;Garey&lt;/em&gt; and &lt;em&gt;Johnson&lt;/em&gt; delineates this blog post trivial. However, I am happy that I was able to think from a different perspective to figure this problem out by only the aid of &lt;em&gt;Kleinberg&lt;/em&gt; and &lt;em&gt;Tardos&lt;/em&gt;&amp;rsquo; book.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kleinberg and Tardos. Algorithm Design. Pearson&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Guarini&#39;s Puzzle, A Less Elegant Solution</title>
      <link>https://mostafatouny.github.io/post/guarini/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:01 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/guarini/</guid>
      <description>&lt;p&gt;Hold on your keyboard as a google search on &lt;em&gt;Guarini&amp;rsquo;s puzzle&lt;/em&gt; shall show you not only the problem but also its solution as well. In fact, The solution yielded by google is far more elegant than mine presented here. So, Don&amp;rsquo;t do it if you wish to appreciate this blog post. Nonethless, I am really proud that I solved the problem on my own. The sole prerequisite to reading this post is how to move a knight in a chess board.&lt;/p&gt;
&lt;h3 id=&#34;puzzle&#34;&gt;Puzzle&lt;/h3&gt;
&lt;p&gt;The puzzle basically asks you to interchange the two black knights with the two white knights in a 3x3 board as shown above.&lt;/p&gt;
&lt;p&gt;For the sake of my own convenience, I am going to illustrate it as 3x3 table where &lt;em&gt;x&lt;/em&gt; denotes black knights and &lt;em&gt;o&lt;/em&gt; denoted white knights as follows.&lt;/p&gt;
&lt;p&gt;From&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;simpler-version&#34;&gt;Simpler Version&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s consider a simpler problem than the one we are currently solving, Then see whether we could generalize it back to the original one. We have one black knight and wish to move it to the &lt;em&gt;bottom-left&lt;/em&gt; cell.&lt;/p&gt;
&lt;p&gt;From&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;remark-interchangeable-positions&#34;&gt;Remark: Interchangeable Positions&lt;/h3&gt;
&lt;p&gt;Wherever our knight&amp;rsquo;s position is or where it is heading, There are two areas of the board it is interchangeably moving between. Namely,&lt;/p&gt;
&lt;p&gt;plus shape&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;x shape&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note that the center cell is unreachable at all.&lt;/p&gt;
&lt;h3 id=&#34;remark-unique-path&#34;&gt;Remark: Unique Path&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s begin doing some trials. We begin from the initial position stated above. We have two alternative moves&lt;/p&gt;
&lt;p&gt;move 1&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;move 2&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let&amp;rsquo;s put &lt;em&gt;move 2&lt;/em&gt; aside now and proceed with &lt;em&gt;move 1&lt;/em&gt;. Then we have&lt;/p&gt;
&lt;p&gt;move 1-1&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;move 1-2&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;move 1-1&lt;/em&gt; returns us back to a state we already visited. All paths which stem from it are already considered and hence, redundant to us. So, we need to consider only &lt;em&gt;move 1-2&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;move 1-2-1&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;move 1-2-2&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Again, &lt;em&gt;move 1-2-1&lt;/em&gt; returns us to state we already visited. So, We drop it from our considerations. A similar justification shows the next move is&lt;/p&gt;
&lt;p&gt;move 1-2-2-2&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;which reaches us to our desired goal. This discussion clearly shows there is a unique path from &lt;em&gt;move 1&lt;/em&gt; to the goal.&lt;/p&gt;
&lt;p&gt;What about &lt;em&gt;move 2&lt;/em&gt;? Does it yield a different path than the one we just found? The answer is yes. Nonethless, We are going to drop it as well!&lt;/p&gt;
&lt;h3 id=&#34;remark-symmetry&#34;&gt;Remark: Symmetry&lt;/h3&gt;
&lt;p&gt;Here is the state we are in doubt of finding a new path from&lt;/p&gt;
&lt;p&gt;move 2&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We rotate the board 90 degrees to the right, Then flip it on its x-axis.&lt;/p&gt;
&lt;p&gt;rotation&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;flip&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Which is exactly &lt;em&gt;move 1&lt;/em&gt; we considered before! In fact, the whole path which stems from &lt;em&gt;move 2&lt;/em&gt; is exactly the same as &lt;em&gt;move 1&lt;/em&gt; but seen from a different perspective. At this point you might wish to do some trials on your own to see the two equivalent paths from two different perspectives.&lt;/p&gt;
&lt;h3 id=&#34;concluding-for-a-general-approach&#34;&gt;Concluding For a General Approach&lt;/h3&gt;
&lt;p&gt;We focus our attention on the one unique path we found regardless of its different representations/perspectives due to board&amp;rsquo;s symmetry. Could we move all knights on this path? Could board&amp;rsquo;s symmetry allow us to re-interpret each knight&amp;rsquo;s path as the unique path we discussed earlier?&lt;/p&gt;
&lt;p&gt;For the top-left black knight. If we rotated the board 90 degrees to the right, We could re-interpret it as a top-right black knight which wishes to reach bottom-left cell.&lt;/p&gt;
&lt;p&gt;For the bottom-left white knight. If we rotated the board 180 degrees to the right, We could re-interpret it as a top-right black knight which wishes to reach bottom-left cell.&lt;/p&gt;
&lt;p&gt;For the bottom-right white knight. If we rotated the board 270 degrees to the right, Similarly, We could re-interpret it as following the unique path we found.&lt;/p&gt;
&lt;p&gt;Note that for an interation, If we moved each knight one step as we just illustrated, We see the two areas we highlighted in &lt;em&gt;remark: interchangeable positions&lt;/em&gt; are fully covered interchangeably.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;As we just noted, Let&amp;rsquo;s just move each knight one step in the unique path we found for an iteration.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Iteration: 1&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;o&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;o&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;o&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;o&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Iteration: 2&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;o&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;o&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;o&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;o&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Iteration: 3&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;o&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;o&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;o&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;o&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Iteration: 4&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;o&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;o&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;o&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;o&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;tdaa !!&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now I think it is time to google &lt;em&gt;Guarini&amp;rsquo;s puzzle&lt;/em&gt; to see a more elegant solution than the one presented here. By the way, I am not jealous if you liked it more than mine.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UVa 10940, Throwing Cards Away II</title>
      <link>https://mostafatouny.github.io/competitive-prog-post/throwing-cards-away/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:01 +0000</pubDate>
      <guid>https://mostafatouny.github.io/competitive-prog-post/throwing-cards-away/</guid>
      <description>&lt;h3 id=&#34;first-trial&#34;&gt;First Trial&lt;/h3&gt;
&lt;p&gt;At each step we discard a card away, and move the new card at the top to the bottom of the deck. That suggests we eliminate half of the deck for one iteration. Consider the following deck&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here, We have a deck of eight cards whereby card number one is at the top of the deck. &lt;em&gt;x&lt;/em&gt; indicates the card is to be thrown away, while &lt;em&gt;-&amp;gt;&lt;/em&gt; indicates the card to be moved to the bottom. Note that in this case, None of the &lt;em&gt;-&amp;gt;&lt;/em&gt; cards are going to be thrown away due to later &lt;em&gt;x&lt;/em&gt;. It is easy to see that the result is as follows&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Similarly to the first iteration, the second one would be&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;yielding&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Finally, Getting &lt;em&gt;card eight&lt;/em&gt; as the answer.&lt;/p&gt;
&lt;p&gt;So, On each iteration, we divided the dick by half and still got an even number of cards. It is clear that is attributed to the fact that &lt;em&gt;eight&lt;/em&gt; is a power of two. Otherwise, On some iteration we would end-up with an odd number of cards. That iteration is not the last one in which we have the last remaining card. You could see if we have a deck whose cards number is some power of two, Then the answer would be the last card at the bottom. In other words, if our cards number is $n = 2^k$ for some &lt;em&gt;k&lt;/em&gt;, Then the correct answer of the problem, i.e the last remaining card after discarding cards and moving them to the bottom, is $2^k$.&lt;/p&gt;
&lt;h3 id=&#34;more-justification-of-first-trials-observation&#34;&gt;More Justification of First Trial&amp;rsquo;s Observation&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s try to take a deeper look at why do we always obtain the last bottom card as the remaining one in case the deck is some power of two, As illustrated earlier. Consider our $2^3 = 8$ deck but represented differently&lt;/p&gt;
&lt;p&gt;On &lt;strong&gt;First Iteration&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$2^0 \times 1$&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$2^0 \times 2$&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$2^0 \times 3$&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$2^0 \times 4$&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$2^0 \times 5$&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$2^0 \times 6$&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$2^0 \times 7$&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$2^0 \times 8$&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;On &lt;strong&gt;Second Iteration&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$2^1 \times 1$&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$2^1 \times 2$&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$2^1 \times 3$&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$2^1 \times 4$&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;On &lt;strong&gt;Third Iteration&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$2^2 \times 1$&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$2^2 \times 2$&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Remarkably, Cards multiplied by an odd number gets thrown away, while cards multiplied by an even number gets moved to the bottom and survives to the next iteration. You could also see that $2^{k_0} \times (2k_1) = 2^{k_0+1}$. The even number increases the power of two by one. That correspoinds with our observation that each iteration&amp;rsquo;s power is increased by one than its predocessor&amp;rsquo;s power. Clearly, Continuing in this way ends us up with the greatest power of two in the whole deck, which is also the last bottom card.&lt;/p&gt;
&lt;h3 id=&#34;generalizing-for-none-power-of-two&#34;&gt;Generalizing for None Power of Two&lt;/h3&gt;
&lt;p&gt;Our solution for the generalized case is in fact an extension of the special case of deck&amp;rsquo;s whose number is a power of two. Let&amp;rsquo;s begin from where we ended up.&lt;/p&gt;
&lt;h4 id=&#34;a-deck-of-seven-cards&#34;&gt;A Deck of Seven Cards&lt;/h4&gt;
&lt;p&gt;On &lt;strong&gt;First Iteration&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note that I intentionally did not mark &lt;em&gt;card seven&lt;/em&gt;. Otherwise, The second iteration would have the first card marked as &lt;em&gt;-&amp;gt;&lt;/em&gt;, violating consistency of marking among iterations. In case cards number is odd, as in this case, We prefer to avoid marking the last card, and get the second iteration as&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We have got here cards of some power of two. Following our illustrated observation in the previous section, We could conclude the last remaining card is &lt;em&gt;card six&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For eight cards deck, The second iteration was &lt;em&gt;&amp;lt;2, 4, 6, 8&amp;gt;&lt;/em&gt;. Removing &lt;em&gt;card eight&lt;/em&gt; from the deck resulted in having &lt;em&gt;card seven&lt;/em&gt; as a remainder from the first iteration, and shifting &lt;em&gt;&amp;lt;2, 4, 6, 8&amp;gt;&lt;/em&gt; one position to the right. As a result, We have &lt;em&gt;card six&lt;/em&gt; as the last one in &lt;em&gt;second iteration&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For eight cards deck, The last remaining card was &lt;em&gt;eight&lt;/em&gt;. For seven cards deck, the last remaining card is &lt;em&gt;six&lt;/em&gt;. Removing one card from the &lt;em&gt;eight cards deck&lt;/em&gt; yielded the same remaining card but subtracted by two. In other words, $8 - 1$ cards deck yields the last remaining card &lt;em&gt;sevenCardsAnswer&lt;/em&gt; = &lt;em&gt;eightCardsAnswer&lt;/em&gt; - (2 * removedCards) = 8 - (2 * 1) = 6. Let&amp;rsquo;s try more trials and see how they relate with the case of &lt;em&gt;eight cards deck&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;a-deck-of-six-cards&#34;&gt;A Deck of Six Cards&lt;/h4&gt;
&lt;p&gt;On &lt;strong&gt;First Iteration&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;On &lt;strong&gt;Second Iteration&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So, we end-up with &lt;em&gt;card four&lt;/em&gt;. Again, $8 - 2$ cards deck yields the last remaining card &lt;em&gt;sixCardsAnswer&lt;/em&gt; = &lt;em&gt;eightCardsAnswer&lt;/em&gt; - (2 * removedCards) = 8 - (2 * 2) = 4. Here, unlike the case of &lt;em&gt;seven cards deck&lt;/em&gt;, There is no remainder from the first iteration so that we end up with four cards in the second iteration. As two cards are removed from &lt;em&gt;eight cards deck&lt;/em&gt;, we have three cards in second iteration rather than four. &lt;em&gt;card six&lt;/em&gt; here is in an odd position, so it gets thrown away. The last remaining card is &lt;em&gt;card four&lt;/em&gt;. In other words, It seems removing two cards from &lt;em&gt;eight cards deck&lt;/em&gt; shifted our &lt;em&gt;&amp;lt;2, 4, 6, 8&amp;gt;&lt;/em&gt; a position to the right in addition to removing the last card.&lt;/p&gt;
&lt;h4 id=&#34;a-deck-of-five-cards&#34;&gt;A Deck of Five Cards&lt;/h4&gt;
&lt;p&gt;On &lt;strong&gt;First Iteration&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As in the case of &lt;em&gt;seven cards deck&lt;/em&gt;, We do not mark &lt;em&gt;card five&lt;/em&gt; in the first iteration. Recall the the last card is not marked whenever we have an odd number of cards in an interation.&lt;/p&gt;
&lt;p&gt;On &lt;strong&gt;Second Iteration&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Again, $8 - 3$ cards deck yields the last remaining card &lt;em&gt;fiveCardsAnswer&lt;/em&gt; = &lt;em&gt;eightCardsAnswer&lt;/em&gt; - (2 * removedCards) = 8 - (2 * 3) = 2. It seems removing two cards shifted &lt;em&gt;&amp;lt;2, 4, 6, 8&amp;gt;&lt;/em&gt; on position to the right, and removing an additional card shifted it another position to the right but with a remainder, namely &lt;em&gt;card five&lt;/em&gt;. So, we get &lt;em&gt;card two&lt;/em&gt; as the answer.&lt;/p&gt;
&lt;h3 id=&#34;magical-formula&#34;&gt;Magical Formula&lt;/h3&gt;
&lt;p&gt;The illustrated reasoning &lt;strong&gt;SEEMS&lt;/strong&gt; to work on not just $2^3 = 8$ but any power of two. For an arbitrary number of deck cards $n$, We find the power of two greater than or equal to $n$, Then compute the answer for $n$ by &lt;em&gt;nCardsAnswer&lt;/em&gt; = &lt;em&gt;Power2CardsAnswer&lt;/em&gt; - (2 * (Power2Cards - nCards)). So, How do find the power of two equal or greater than $n$? Here is a trick: $2^{ceil(log_2(n))}$. So, The final formula would be&lt;/p&gt;
&lt;p&gt;$$2^{ceil(log_2(n))} - (2 \times (2^{ceil(log_2(n))} - n)) = 2 \times (n-2^{ceil(log_2(n))-1})$$&lt;/p&gt;
&lt;h3 id=&#34;accepted-source-code-on-uva&#34;&gt;Accepted Source Code on UVa&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;amp;lt;cstdio&amp;amp;gt;
#include &amp;amp;lt;math.h&amp;amp;gt;

using namespace std;

int main() {
  int n, res;

  scanf(&amp;quot;%d&amp;quot;, &amp;amp;amp;n);

  res = 2*(n-pow(2, (ceil(log2(n))-1)));
  
  if (n == 1) printf(&amp;quot;1\n&amp;quot;);
  else printf(&amp;quot;%d\n&amp;quot;, res);
  
  return 0;
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>UVa 120004, Bubble Sort</title>
      <link>https://mostafatouny.github.io/competitive-prog-post/bubble-sort/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:01 +0000</pubDate>
      <guid>https://mostafatouny.github.io/competitive-prog-post/bubble-sort/</guid>
      <description>&lt;h3 id=&#34;restructuring-the-problem-more-conveniently&#34;&gt;Restructuring The Problem, More Conveniently&lt;/h3&gt;
&lt;p&gt;Before tackling a solution, We need to reformulate the given problem. You might consider this a reduction to a form which is more convenient to solve. The problem states We are given an array of size &lt;em&gt;n&lt;/em&gt; whose elements are {1, 2, .., n} and are distinct. That concludes the given array &lt;em&gt;a&lt;/em&gt; is a permutation of {1, 2, .., n}. If we listed all these permuations and computed &lt;em&gt;bubbleCounts&lt;/em&gt; on each, Then taken their average, That would be the answer to UVa&amp;rsquo;s problem. &lt;em&gt;Running findSwaps() infinitely&lt;/em&gt; is just a fancy way of describing our&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Average &lt;em&gt;bubble counts&lt;/em&gt; of all permutations.&lt;/p&gt;
&lt;h3 id=&#34;observations&#34;&gt;Observations&lt;/h3&gt;
&lt;p&gt;On &lt;strong&gt;n = 2&lt;/strong&gt;,&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;bubbleCount&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;average = $\frac{0+1}{2}$ = $\frac{1}{2}$&lt;/p&gt;
&lt;p&gt;On &lt;strong&gt;n = 3&lt;/strong&gt;,&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;bubbleCount&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;average = $\frac{0+1+1+2+2+6}{6}$ = 2&lt;/p&gt;
&lt;p&gt;On &lt;strong&gt;n = 4&lt;/strong&gt;,&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;bubbleCount&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;average = $\frac{0+1+1+2+2+3+1+2+2+3+3+4+2+3+3+4+4+5+3+4+4+5+5+6}{24}$ = 3&lt;/p&gt;
&lt;h3 id=&#34;symmetry&#34;&gt;Symmetry&lt;/h3&gt;
&lt;p&gt;Consider the case of $n=3$. Notice that the least &lt;em&gt;bubbleCount&lt;/em&gt; is the first one accounting for zero, and the greatest &lt;em&gt;bubbleCount&lt;/em&gt; is the last one accounting for 3. You could see that for each permutation of &lt;em&gt;bubbleCount&lt;/em&gt; 1, There is a corresponding permutation of &lt;em&gt;bubbleCount&lt;/em&gt; 2. The sum of 1 and 2 is also 3 !&lt;/p&gt;
&lt;p&gt;Note also that the corresponding permutation is exactly like the other one but inversed. For instance permutation &lt;em&gt;&amp;lt;3, 1, 2&amp;gt;&lt;/em&gt; is the inversed in order of &lt;em&gt;&amp;lt;2, 1, 3&amp;gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, we could divide our list of permutations into two halves such that a pair&amp;rsquo;s sum equals $min(bubbleCount) + max(bubbleCount)$. Clearly, There are a total of $n!$ permutations. The number of those pairs is half of total permutations. Hence, total sum of bubble counts is $\frac{n!}{2} \times (min(bubbleCount) + max(bubbleCount))$. Now we divide that total sum on total number of permutations to get the average of all &lt;em&gt;bubbleCounts&lt;/em&gt;. So, The formula is now $\frac{(min(bubbleCount) + max(bubbleCount))}{2}$.  Clearly, least &lt;em&gt;bubbleCount&lt;/em&gt; is always zero, As we have the permutation which is already sorted. What about the greatest one? The worst case is the permutation sorted inversely. In such case, The first iteration, i.e outer loop, accounts for $(n-1)$ bubbles. The second itertaion accounts for $(n-2)$, and so on untill an iteration accounts for exactly one bubble. So, $max(bubbleCount)$ = (n-1) + (n-2) + .. + 1 = $\frac{n \times (n-1)}{2}$. Hence, Our &lt;strong&gt;conjectured&lt;/strong&gt; formula is&lt;/p&gt;
&lt;p&gt;$$\frac{0 + \frac{n(n-1)}{2} }{2} = \frac{n(n-1)}{4}$$&lt;/p&gt;
&lt;p&gt;Check &lt;a href=&#34;https://en.wikipedia.org/wiki/Carl_Friedrich_Gauss#Anecdotes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; for more information about gaussian&amp;rsquo;s famous equation.&lt;/p&gt;
&lt;h3 id=&#34;more-justification-on-symmetry&#34;&gt;More Justification on Symmetry&lt;/h3&gt;
&lt;p&gt;We have shown that least &lt;em&gt;bubbleCount&lt;/em&gt; and greatest &lt;em&gt;bubbleCount&lt;/em&gt; among all permutations are equal to zero and (n-1) + (n-2) + .. + 1, respectively. Let&amp;rsquo;s take a deeper and more general look on why we could divide our permutations list into two halfs whereby each pair&amp;rsquo;s sum is equal to greatest &lt;em&gt;bubbleCount&lt;/em&gt;. That pair&amp;rsquo;s permutations are also inverse of each other.&lt;/p&gt;
&lt;p&gt;For the case of $n=3$, Pick up two permutations which are inverse of each other and try to run &lt;em&gt;bubbleSort&lt;/em&gt; algorithm on both of them. You shall find for a permutation, The bubble counted on some pair of numbers, is not counted in the other corresponding permutation. For instance, permutation &lt;em&gt;&amp;lt;1, 3, 2&amp;gt;&lt;/em&gt; needs one &lt;em&gt;bubble swap&lt;/em&gt; in &lt;em&gt;&amp;lt;3, 2&amp;gt;&lt;/em&gt; pair. For the permutation&amp;rsquo;s inverse &lt;em&gt;&amp;lt;2, 3, 1&amp;gt;&lt;/em&gt;, There&amp;rsquo;s no need to bubble swap &lt;em&gt;&amp;lt;2, 3&amp;gt;&lt;/em&gt; pair. That saves us one bubble swap out of three which is the maximum &lt;em&gt;bubbleCount&lt;/em&gt;. 3 - 1 = 2, The bubbleCount of &lt;em&gt;&amp;lt;2, 3, 1&amp;gt;&lt;/em&gt;. The same applies for any two pairs of permutations which are inverse of each other.&lt;/p&gt;
&lt;h3 id=&#34;accepted-source-code-on-uva&#34;&gt;Accepted Source Code on UVa&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;amp;lt;cstdio&amp;amp;gt;

#define ll long long
#define ull unsigned ll

using namespace std;

bool checkIthBit (int n, int i) {
  if( n &amp;amp;amp; (1 &amp;amp;lt;&amp;amp;lt; i) )
    return true;
  return false;
}


int main() {
  int t, cou = 1;

  scanf(&amp;quot;%d&amp;quot;, &amp;amp;amp;t);

  while (cou &amp;amp;lt;= t) {
    int n;
    ull numerator; int denominator;

    scanf(&amp;quot;%d&amp;quot;, &amp;amp;amp;n);

    numerator = ((ull)n*(ull)(n-1));
    denominator = 4;

    // check if nume is div by 2, and simplify rational form
    for (int i=0; i&amp;amp;lt;2; ++i) {
      if (!checkIthBit(numerator, 0)) {
	numerator = numerator/2;
	denominator = denominator/2;
      }
    }

    if (denominator == 1) printf(&amp;quot;Case %d: %llu\n&amp;quot;, cou, numerator);
    else printf(&amp;quot;Case %d: %llu/%d\n&amp;quot;, cou, numerator, denominator);

    cou++;
  }
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Many of those who do not appreciate math, think of it as a routine where you just follow a systematic order of operations on numbers. If you are one those, I hope this article changed, at least doubted, how you perceive it. There are a whole deep and elegant adventures still awaiting you if you delved more deeply.
&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>11683 UVa, Laser Sculpture</title>
      <link>https://mostafatouny.github.io/competitive-prog-post/laser-sclupture/</link>
      <pubDate>Fri, 01 May 2020 00:00:01 +0000</pubDate>
      <guid>https://mostafatouny.github.io/competitive-prog-post/laser-sclupture/</guid>
      <description>&lt;h2 id=&#34;proposed-solution-intuitively&#34;&gt;Proposed Solution, Intuitively&lt;/h2&gt;
&lt;p&gt;Before delving into mathematical rigour details, Let me give you an intuitive description of the solution and why it works.&lt;/p&gt;
&lt;p&gt;Note that the laser only sculpts a layer of height equal to one while it is still on. If we wish to sculpts a layer of height 2, Then the laser must be toggled on and off twice. That suggests each layer intended to be sculpted counts on the laser to be turned on after being on off state. What if there are more than one sculpture on the same layer, but separated by couple of unsculpted units? then each sculpture on this layer counts per se.&lt;/p&gt;
&lt;p&gt;Think of the following, where &lt;em&gt;b&lt;/em&gt; indicates a sculpted unit and &lt;em&gt;x&lt;/em&gt; indicates an unsculpted unit. A height equal to three is made here for a simple illustration.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;X_i&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;X_i+1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;if $X_i$ here is $X_1$, then certainly the blank unit counts as a laser is turned on. What about $X_1$, Would the two blank units count each on laser? Considering the fact that a laser could move horizontally while it is still being turned on allows two blanks crossing $X_0$ and $X_1$ to be sculpted on one count. What about the second blank of $X_1$? Clearly, The laser must sculp the blank above it first, So the second blank would be an additional count. Seemingly, We came across a condition here. if a blank in $X_i+1$ came after a blank in $X_i$, Then it should not count but if it came after an unsculpted unit, Then it counts.&lt;/p&gt;
&lt;p&gt;The observation suggests the following. A column which tracks counts on each layer, and the state of the last scanned unit, i.e whether it is sculpted or not. Initially, It would be&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;count&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;unit&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;x&lt;/em&gt; units initialized here are on behalf of the left most outer border. We proceed as follows, For a given &lt;em&gt;X_i&lt;/em&gt; determine units &lt;em&gt;b&lt;/em&gt; sculpted and units &lt;em&gt;x&lt;/em&gt; unsculpted. If a unit is &lt;em&gt;x&lt;/em&gt;, Then leave count as it is. If a unit is &lt;em&gt;b&lt;/em&gt;, Then check the unit before it, If it is &lt;em&gt;b&lt;/em&gt; leave count but if it is &lt;em&gt;x&lt;/em&gt; increment count by one. Afterward, Update unit column with the new unit. Do these steps on all vertical units. Repeat the procedure on each $X_i$. The correct result is the sum of all counts.&lt;/p&gt;
&lt;p&gt;We could furtherly improve. Why do we need to track each layer on a separated &lt;em&gt;count&lt;/em&gt; for it? Instead, We could define only one variable which gets incremented whenever any layer detects a new laser sculpture. In addition, For the unit column, We do not need to check every unit and compare it with the previous one in order to find blank units preceeded by unsculpted x units. max(0, $X_i$ - $X_{i+1}$) would do the trick of finding blank units b in $X_{i+1}$ preceeded by x unit.&lt;/p&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#define usi unsigned short int

int main() {
  usi h, w;
  int X_bef, X_cur, cou;

  while(true) {
    scanf(&amp;quot;%hu %hu&amp;quot;, &amp;amp;h, &amp;amp;w);

    if (h == 0)
      break;

    cou = 0;
    X_bef = h;
    
    for (usi i=0; i&amp;lt;w; ++i) {
      scanf(&amp;quot;%d&amp;quot;, &amp;amp;X_cur);
      cou = cou + std::max(0, X_bef-X_cur);
      X_bef = X_cur;
    }

    printf(&amp;quot;%d\n&amp;quot;, cou);
  }
  
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;formal-logic&#34;&gt;Formal Logic&lt;/h2&gt;
&lt;p&gt;Here comes the formal-logic based proof of our algorithm&amp;rsquo;s correctness. Kindly, note that it might still be flawed. However, If it is not, Then we guarantee the algorithm to yield the correct answer without any bugs or errors. Anyway, Before getting into the proof, We need to rigoursly model the problem of &lt;em&gt;Laser Sculpture - 11683&lt;/em&gt;. Those rigor definitions and constraints are derived from our understanding of the problem.&lt;/p&gt;
&lt;h3 id=&#34;definitions&#34;&gt;Definitions&lt;/h3&gt;
&lt;p&gt;For the following, We assume $h$, $w$ $\in \mathcal{N}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Board&lt;/strong&gt;: A 2d-array-alike corresponding to overall units. board is $b = (h \times w)$, units $u_{i,j}$ indexed (labeled) by a cartesian product of board&amp;rsquo;s height and width.&lt;/p&gt;
&lt;p&gt;$X_0$: We define an imaginary height equal to $h$ of a given board. It serves on behalf the left most outer border for the first iteration of our algorithm.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sculpture set on board&lt;/strong&gt;: A family of sets where each set is the set of units sculpted by the laser while it is still on. The sculpture set is $S = ${$ S_1, S_2, .., S_k$} such that $\cup S \subseteq b$, $S_i \cap S_j = \phi$ for any distinct i and j, $S_i \neq \phi$ for any i. That says sculptures are subset of the original board units, no two sculptures are intersecting, and there&amp;rsquo;s no empty sculpture. That conforms with our understanding that a unit cannot be shot twice by a laser, and a laser is not going to be turned on without sculpting some unit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Top-first&lt;/strong&gt;: That is a condition which ensures no sculpture occurs on some layer before the layer above it is sculptured. For any $S_q \in S$, $\forall u_{i,j} \in S_q( ${$ u_{x,j} \in b | x &amp;lt; i $}$ \subseteq S_{q-1} \cup S_{q-2} \cup .. \cup S_{1} )$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One-row&lt;/strong&gt;: That is a condition which ensures a continuous row of units are sculptured at once, not sculptured on multiple times in which the laser is turned on and off multiple times as well. For any two distinct $S_k$ and $S_q$, $\neg( \exists j_0  \exists j_1, u_{i_0,j_0} \in S_q \wedge u_{i_1,j_1} \in S_k \wedge j_1=j_0+1)$ for some $u_{i_0,j_0}$ and $u_{i_1,j_1}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Uniqueness&lt;/strong&gt;: It is assumed that there is a unique number of times for the laser to be toggled on and off regardless of of the &lt;em&gt;sculpture set&lt;/em&gt;. In other words, Even if there are two possible different sculptures which achieve the desired X&amp;rsquo;s, The number of times the laser needs to be toggled on and off is the same.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Existince of a Solution&lt;/strong&gt;: It is assumed that given height $h$, and width $w$ of the whole board $b$, and given heights $X_1$, $X_2$, .., $X_w$ of position $i$ in the board, There exists a &lt;em&gt;sculpture set&lt;/em&gt; $S$ &lt;em&gt;on board&lt;/em&gt; $b$ such that $b - S = \cup_{p \in 1, 2, .., w }$ {$ u_{i,p} \in b $} whereby each set {$ u_{i,p_0} \in b $} has a cardinality of $X_{p_0}$. In other words, The set yielded from subtracting the board from sculpture set is composed of units conforming to desired $X$&amp;rsquo;s heights.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Principal Problem Statement&lt;/strong&gt; (finally): Given a board $b_{h \times w}$ of height $h$ and width $w \in \mathcal{Z}^+$, and given heights $X_1$, $X_2$, .., $X_w$, The cardinality of $\textit{sculpture set on board}$ $b$ is equal to $\Sigma_{i=0}^{w-1}min(0, X_i-X_{i+1})$&lt;/p&gt;
&lt;h3 id=&#34;proof&#34;&gt;Proof&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Lemma&lt;/strong&gt;: For $b-S$, where $b$ is a board of height $h$ and width $w \geq 2$ and $S$ is a &lt;em&gt;sculpture set on&lt;/em&gt; $b$ conforming to given heights of unsculpted units of last two board columns $X_{w-1}$ and $X_w$,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; if $X_{w} &amp;lt; i \leq X_{w-1}$, a unit $u_{i, w}$ is contained in some $S_k$ and no other unit is in $S_k$. That is, for some $S_k \in S$, $S_k = ${$ u_{i, w} $}.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; if $X_{w} \leq X_{w-1} &amp;lt; i$, a unit $u_{i, w}$ is contained in some $S_k$ which is per se contains an element of $\textit{board}$ $b^{&amp;rsquo;} = b_{h \times w-1}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1) Solution&lt;/strong&gt;: Assume $X_{w} &amp;lt; i \leq X_{w-1}$. Clearly, unit $u_{i, w} \in \cup S$, As it is above height of column $X_w$. So, $u_{i, w} \in S_k$ for some $S_k \in S$. $S_k$ does not contain other units  which are above, below, or diagonal to $u_{i, w}$. Otherwise, $\textit{top first}$ or $\textit{one row}$ conditions shall be violated. Also, no other units are left to $u_{i, w}$ in $S_k$, As $i \leq X_{w-1}$. Hence, $S_k = ${$ u_{i, w} $}.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2) Solution&lt;/strong&gt;: Assume $X_{w} \leq X_{w-1} &amp;lt; i$. Similar to $\textbf{(1) solution}$, unit $u_{i, w} \in \cup S$, As it is above height of column $X_w$. So, $u_{i, w} \in S_k$ for some $S_k \in S$. $S_k$ does not contain other units  which are above, below, or diagonal to $u_{i, w}$. Otherwise, $\textit{top first}$ or $\textit{one row}$ conditions shall be violated. However, unlike $\textbf{(1) solution}$, Nothing precludes a unit left to $u_{i, w}$ to be contained in $S_k$, As $X_{w-1} &amp;lt; i$. On the contrary, if $S_k = ${$ u_{i, w} $} then $\textit{one row}$ condition shall be violated as two sculptures are going to be on the same row without any non-blank separator between them. Through $\textit{proof by contradiction}$, $S_k \neq ${$ u_{i, w} $}. Hence, there are some units $u \in S_k$. Since units from all directions are excluded, except only the left direction, $u_{i, w-1} \in S_k$, which is clearly a unit of $\textit{board}$ $b^{&amp;rsquo;} = b_{h \times w-1}$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollary&lt;/strong&gt;: From &lt;strong&gt;Lemma (1)&lt;/strong&gt;, Obviously, $S_k$ is not an element of $\textit{sculpture set on board}$ $b^{&amp;rsquo;} = b_{h \times w-1}$ due to the fact that $S_k \not\subseteq b^{&amp;rsquo;}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem Statement&lt;/strong&gt; (main proof): First we re-write the statement defined above in a more convenient form for induction proof.&lt;/p&gt;
&lt;p&gt;for $w \in \mathcal{Z}^+$, &lt;br&gt;
Given $h \in \mathcal{N}$, and heights $X_1$, $X_2$, .., $X_w$, sculpture set on board $b_{h \times w}$ has a cardinality of $\Sigma_{i=0}^{w-1}min(0, X_i-X_{i+1})$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: &lt;br&gt;
base, for $w = 1$, &lt;br&gt;
Assume we are given $h \in \mathcal{N}$, and heights $X_1$, $X_2$, .., $X_w$. A board $b_{h \times w}$ has a sculpture set on it, by assumption.
Assume $X_{1} &amp;lt; i$. By definition $X_0 = h$. So, $X_1 &amp;lt; i &amp;lt; X_0$. via $\textbf{Lemma (1)}$, each unit $u_{i, 1}$ is contained in some $S_k$ and no other unit is in $S_k$. In other words, cardinality of {$ u_{i, 1} | X_1 &amp;lt; i $} is equal to $S$, the sculpture set on board $b$. clearly, it is also equal to ($X_0$ - $X_1$). since $X_0 \geq X_1$, ($X_0$ - $X_1$) = min(0, $X_0$ - $X_1$) which justifies our problem statement.&lt;/p&gt;
&lt;p&gt;induction hypothesis, for $w^{&amp;rsquo;} \in \mathcal{Z}^+$ we assume problem statement&amp;rsquo;s validity.&lt;/p&gt;
&lt;p&gt;induction step, for $w = w^{&amp;rsquo;}+1$, &lt;br&gt;
Assume we are given $h \in \mathcal{N}$, and heights $X_1$, $X_2$, .., $X_w$. A board $b_{h \times w}$ has a sculpture set on it, by assumption.
Assume $X_{w} &amp;lt; i$. &lt;br&gt;
$\textbf{case 1}$: if it is the case the $i \leq X_{w-1}$, then similarly to base case, each unit $u_{i, w}$ counts a new element in $S$, the sculpture set on board $b$. Recall from $\textbf{corollary}$ that those are not in $S^{&amp;rsquo;}$, sculpture set on board $b^{&amp;rsquo;}&lt;em&gt;{h \times w-1}$. cardinality of units $u&lt;/em&gt;{i, w}$ are clearly equal to $X_{w-1} - X_{w}$. Also, It is clear that $X_{w-1} &amp;gt; X_{w}$, Hence, $X_{w-1} - X_{w}$ = $min(0, X_{w-1} - X_{w})$.&lt;/p&gt;
&lt;p&gt;$\textbf{case 2}$: But if $i &amp;gt; X_{w-1}$, then by $\textbf{lemma (1)}$ each unit $u_{i, w}$ is contained in some $S_k$ which is per se an element of $S^{&amp;rsquo;}$, the sculpture set on board $b^{&amp;rsquo;}&lt;em&gt;{h \times w-1}$. Hence, Those units do not contribute new counts to $S$, the sculpture set on board $b&lt;/em&gt;{h \times w}$ than counted in $S^{&amp;rsquo;}$. On the other hand, It is clear that $X_{w-1} \leq X_{w}$, So $X_{w-1} - X_{w} \leq 0$. So, $min(0, X_{w-1} - X_{w}) = 0$ which conforms with what we just proved that no new sculptures are added than those in board $b^{&amp;rsquo;}$.&lt;/p&gt;
&lt;p&gt;From &lt;strong&gt;case 1&lt;/strong&gt; and &lt;strong&gt;case 2&lt;/strong&gt;, $min(0, X_{w-1} - X_{w})$ is equal to new sculptures not in sculpture set $S^{&amp;rsquo;}$ on board $b^{&amp;rsquo;}&lt;em&gt;{h \times w-1}$. Therefore, cardinality of set $S$ is equal to cardinality set $S^{&amp;rsquo;}$ plus $min(0, X&lt;/em&gt;{w-1} - X_{w})$. via induction hypothesis, cardinality of $S^{&amp;rsquo;} = \Sigma_{i=0}^{w^{&amp;rsquo;}-1}min(0, X_i-X_{i+1})$. So, cardinality of $S = \Sigma_{i=0}^{w-2}min(0, X_i-X_{i+1}) + min(0, X_{w-1}-X_{w}) = \Sigma_{i=0}^{w-1}min(0, X_i-X_{i+1})$
QED&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>573 UVa, The Snail</title>
      <link>https://mostafatouny.github.io/competitive-prog-post/the-snail/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:01 +0000</pubDate>
      <guid>https://mostafatouny.github.io/competitive-prog-post/the-snail/</guid>
      <description>&lt;h3 id=&#34;my-proposed-solution&#34;&gt;My Proposed Solution&lt;/h3&gt;
&lt;p&gt;Probably, You thought of the straight forward solution of just simulating the height reached by the snail day by day till some condition applies. So, your computation would look like
$$ (u_1 - fatigue_1 - d_1) + (u_2 - fatigue_2 - d_2) + .. + (u_n - fatigue_n - d_n) $$&lt;/p&gt;
&lt;p&gt;In this solution I claim determining whether the snail succeeded or failed could be done in $O(1)$ !! (that discovery was a surprise for me, as well). In a nutshell, We shall derive a formula which computes the snail&amp;rsquo;s height on any given day. Then we find the day in which the snail&amp;rsquo;s height is at its peak. By plugging in that day in the formula, we compute the height peak of the snail. if that height peak is greater than $h$, the weight of the well, then we conclude the snail at some point exceeds the well. If the height peak is equal or less than $h$, Then we conclude the snail shall not exceed the well.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s begin by finding the formula. I noticed a pattern. That computation you probably first thought of is exactly like
$$ (u_1 + u_2 + .. + u_n) - (d_1 + d_2 + .. + d_n) - (fatigue_1 + fatigue_2 + .. + fatigue_n) $$
$$ = (u \times i) - (d \times i) - (\text{total fatigue up to day i})$$
So, instead of looping in a complexity of $\omega(n)$, One equation could achieve the same result in a complexity of $O(1)$. The first and second parts are obvious, but how do we find the third one? First, Assume $f=1$, then $$fatigue_1=0.01 * u * 1, fatigue_2=0.01 * u * 2 , .. , fatigue_n=0.01 * u * i$$
As each day we increase fatigue by $f$, day number $i$ should be equal to $i$ times $f$. $0.01$ and $u$ are common factors, so we could re-write this as
$$(0.01*u)(1 + 2 + .. + i)$$
the right part of the equation is where the magic happens. Friedrich Gauss, The legendary mathematician discovered that it is equal to
$$\frac{n(n+1)}{2}$$
He made it when he was a kid as his teacher tried to preoccupy his time with tedious math calculation! read his story &lt;a href=&#34;https://en.wikipedia.org/wiki/Carl_Friedrich_Gauss#Anecdotes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.
So, the final pattern looks like this
$$ (u_1 + u_2 + .. + u_n) - (d_1 + d_2 + .. + d_n) - \frac{n(n+1)}{2} $$
So far, that equation applies when $f=1$ but the The &lt;em&gt;Snail - 573&lt;/em&gt; problem asks for a general value of $f$. Let me get you through the proof of Guassian&amp;rsquo;s equation briefly, and see how could we generalize it to a general value of $f$. Assume we wish to calculate $2 \times (1+2+ .. + n)$. That could be re-written as
$$ 1 + 2 + .. + n $$
$$ + $$
$$ n + (n-1) + .. + 1 $$
Try to interpret both of these equations as $n$ columns of two rows. The first column is $1+n$, second is $2+(n-1)$, .. , nth day is $n+1$. All of the $n$ columns are equal to $n+1$. Therefore
$$2 \times (1+2+ .. + n) = n(n+1)$$
Divide both sides by two, and the proof of Guassian&amp;rsquo;s equation is done. QED. Now, instead of incrementing by one, the value of %f%, assume %f=x% where x is an arbitrary value. Let&amp;rsquo;s try to re-apply the proof again. This is time we calculate $2 \times (x+2x+ .. + nx)$. We re-write it as
$$ x + 2x + .. + nx $$
$$ + $$
$$ nx + (n-1)x + .. + x $$
Similarly, $(x+nx) + (2x+(n-1)x) + .. + (nx+x) = n(nx+x)$, As each term of the n terms is equal to $(x+nx)$. Dividing by two yields us the final magical equation as follows
$$ (u \times n) - (d \times n) - \frac{n(nx+x)}{2} $$
That justifies &lt;em&gt;totalHeight&lt;/em&gt; and &lt;em&gt;fOnDay&lt;/em&gt; functions in my source code (see them below). So now, we could find the height of the snail at any day by just plugging-in a formula in a complexity of $O(1)$.&lt;/p&gt;
&lt;p&gt;How are we going to use the formula we just derived? Are we going to loop on each day, applying the formula then checking for some conditions? That would account for complexity of $\omega(n)$ which saves us nearly nothing. As I promised you before, We find the day in which the snail reaches its peak. Then we plug-in that day in the formula we just derived to find the greatest possible height the snail ever reached. Finally, we compare that with $h$ to reach our conclusion of whether the snail succeeded.&lt;/p&gt;
&lt;p&gt;Take a look at the following equation. Recall that $u$, $d$ and $f$ are given in &lt;em&gt;The Snail - 573&lt;/em&gt; problem.
$$ (i*f)*u = (u-d) $$
So, The only unknown is $i$ which could be easily computed. What we are trying to find out here is the day $i$ for which &lt;em&gt;fatigue&lt;/em&gt; is equal to the total increment the snail achieves. in other words, we are looking for the day in which fatigue totally cancels out any upwards increment. The upwards increase of $u-d$ keeps decaying due to fatigue till no possible upwards increment is possible. Hence, day $i$ in the above equation is the day in which the snail reaches its peak! That justifies my function &lt;em&gt;dayOfNonIncrease&lt;/em&gt; in the source code below. Now, we could find out the maximum possible height reached by the snail.&lt;/p&gt;
&lt;p&gt;At this point, I delivered my promise that we could find out whether the snail failed or succeeded in $O(1)$. &lt;em&gt;The Snail&lt;/em&gt; problem asks for more than that, namely, the day in which the snail succeeded or failed.&lt;/p&gt;
&lt;p&gt;There is a catch in our approach. According to &lt;em&gt;The Snail - 573&lt;/em&gt; problem, the fatigue cannot result in negative upwards increment, As stated &lt;em&gt;The snail never climbs a negative distance&lt;/em&gt;. Our formula does not take into its account that the max possible fatigue is 100%. Nonetheless, That would not disrupt we could find out whether the snail succeeded or failed in $O(1)$ as illustrated above. That could be clearly seen as we do not need to compute up to days in which fatigue exceeds 100%.&lt;/p&gt;
&lt;p&gt;However, We are going to rectify that limitation in order to complete solving &lt;em&gt;The Snail&lt;/em&gt; problem. We divide the computation of total height in a given day by two parts. The first part is computed exactly as mentioned before and applies on a day $i$ which is equal or less than the day &lt;em&gt;maxFatDay&lt;/em&gt; in which fatigue is 100%. the second part handles days in which fatigue exceeds 100%. For the second part, total height could be clearly found by $(i-maxFatDay) \times d$, As fatigue would totally cancel out upwards climb. In other words, In these days, the snail would just be dropping down without any climb. By summing both of these parts we could find out the height of any given day, Even if that day is beyond maxFatDay in which fatigue reached its maximum. Note that &lt;em&gt;maxFatDay&lt;/em&gt; might not be exactly 100% as $f$ might not divides 100. In this case, It would be the maximum fatigue equal or less than 100%. That justifies my function &lt;em&gt;totalHeightAnyDay&lt;/em&gt; in source code below.&lt;/p&gt;
&lt;p&gt;So far, We are still computing in a complexity of $O(1)$ !! The last scene is finding the day the snail first exceeded $h$ or dropped to a negative height. Unfortunately, I could not find a way but to keep looping, beginning from the day of snail reaching its peak, till its height is either below $h$ or negative. That is the last part of my source code below. Could you improve upon this solution to maintain a complexity of $\omega(1)$?&lt;/p&gt;
&lt;h3 id=&#34;source-code&#34;&gt;Source Code&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;algorithm&amp;gt;

// total u&#39;s from day 1 to day i
int uOnDay(int u, int i) {
  return u*i;
}

// total d&#39;s from day 1 to day i
int dOnDay(int d, int i) {
  return d*i;
}

// total fatigue percentage from day 1 to day i
// it is a generalization of gaussian&#39;s famous equation n(n+1)/2 = 1 + 2 + .. + n
float fOnDay(float f, int i) {
  return (i*((i*f)+f))/2;
}

// we find day i such that
// i * (fPercent*u) = u - d
int dayOfNonIncrease(int u, int d, float fPercent) {
  float res = (float)(u-d)/(float)(fPercent*u);
  return std::max(int(res), 0);
}

// we find day i such that
// i * fPercent = 1
int findDayOfMaxF(float fPercent) {
  int res = (float)1/fPercent;
  return res;
}

// height at day i, in case no fatigue is more than 100% from day 1 up to day i
// totalF is total fatigue percentage from day 1 up to i
float totalHeight(int u, int d, int i, float totalF) {
  return (float)uOnDay(u, i) - (float)dOnDay(d, i) - totalF;
}

// height at day i. no constraints here
float totalHeightAnyDay(int u, int d, float fPercent, int peakHeightDay, int dayOfMaxFat, int i) {
  float totalF, tot;
  
  if (i &amp;lt;= dayOfMaxFat) {
    totalF = (float)u*fOnDay(fPercent, i-1);
    tot = totalHeight(u, d, i, totalF);
    return tot;
  }
  else {
    totalF = (float)u*fOnDay(fPercent, dayOfMaxFat-1);
    tot = totalHeight(u, d, dayOfMaxFat, totalF);
    int daysRng = i - dayOfMaxFat;

    // after dayOfMaxFat, fatigue would be more than 100% if same function is applied
    // max fatigue possible is 100%
    totalF = ((float)u*1)*daysRng;
    tot += totalHeight(u, d, daysRng, totalF);
    
    return tot;
  }
}

int main() {
  int h, u, d, f;
  
  while(true) {

    scanf(&amp;quot;%d %d %d %d&amp;quot;, &amp;amp;h, &amp;amp;u, &amp;amp;d, &amp;amp;f);
    if (h==0)
      break;

    // f as a percentage
    float fPercent = (float)f/(float)100;
    // day in which snail reached its peak
    int peakHeightDay = dayOfNonIncrease(u, d, fPercent);
    peakHeightDay += 1;
    // day in which snail fatigue reached its highest possible value
    int dayOfMaxFat = findDayOfMaxF(fPercent);
    dayOfMaxFat += 1;

    // calculate height at day of maximum possible height
    float peakHeight =  totalHeightAnyDay(u, d, fPercent, peakHeightDay, dayOfMaxFat, peakHeightDay) + d;


    // if peak is greater than h, then the snail succeeded
    // if not, then the snail shall never exceed h
    
    float tot;
    if (peakHeight &amp;gt; h) {
      int i=peakHeightDay;
      // keep moving days backwards till the snail&#39;s height is less than h
      do {
	i--;
	if (i&amp;lt;1)
	  break;
	tot = totalHeightAnyDay(u, d, fPercent, peakHeightDay, dayOfMaxFat, i) + d;
      }
      while(tot &amp;gt; h);

      // the day after catched day above, is the one in which snail first exceeded h
      printf(&amp;quot;success on day %d\n&amp;quot;, i+1);
    }
    else {
      int i = peakHeightDay;
      // keep moving days upwards till the snail&#39;s height is negative
      do {
	tot = totalHeightAnyDay(u, d, fPercent, peakHeightDay, dayOfMaxFat, i);
	i++;
      }
      while(tot &amp;gt;= 0);

      // the day catched above is greater than the day in which snail&#39;s height became negative by one
      printf(&amp;quot;failure on day %d\n&amp;quot;, i-1);
    }
    
  }
  
  return 0;
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Analyzing Disparity Between Users and Journalists Ratings</title>
      <link>https://mostafatouny.github.io/post/permutation-test/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/permutation-test/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;In this post we analyze and compare &lt;a href=&#34;https://www.metacritic.com/browse/games/score/metascore/year/ps4/filtered?year_selected=2019&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;metacritic ratings of best 2019 games&lt;/a&gt;, Given by both the gaming community and professional journalism. It is divided into three sections, namely, &lt;em&gt;data preprocessing&lt;/em&gt;, &lt;em&gt;exploratory analysis&lt;/em&gt;, and &lt;em&gt;systematic test&lt;/em&gt;. I launched a similar post upto &lt;em&gt;exploratory analysis&lt;/em&gt; on &lt;a href=&#34;https://www.reddit.com/r/truegaming/comments/ez7oc2/analysing_top_praised_games_by_the_community_not/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this Reddit post&lt;/a&gt;. Surprisingly, The community shared with me great insights and feedbacks. If you have already seen my notebook on &lt;em&gt;reddit&amp;rsquo;s post&lt;/em&gt;, Then skip to &lt;em&gt;systematic test&lt;/em&gt;. There is a summary of each section if you&amp;rsquo;re lazy to read the whole kernel. Check summaries out in &lt;em&gt;table of contents&lt;/em&gt; below. On the other extreme, If you are willing to read every detail of the kernel, I provided for you the full sourcecode used in this blog post &lt;a href=&#34;https://github.com/mostafatouny/disparity-blog-post&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a nutshell, The goal of this blog post is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analyzing top games got high ratings from professional critics but not from community of users.&lt;/li&gt;
&lt;li&gt;Analyzing top games got high ratings from community of users but not from progessional critics.&lt;/li&gt;
&lt;li&gt;Graph of percentage of games whose disparity between critics and users are low, moderate, or high.&lt;/li&gt;
&lt;li&gt;Do above steps on four platforms, namely, PS4, Xbox One, Switch, and PC. Then we compare them.&lt;/li&gt;
&lt;li&gt;Apply permutation and p-values systematic test on each platforms pairs distributions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-i-have-learned-from-reddit-community&#34;&gt;What I Have Learned From Reddit Community&lt;/h2&gt;
&lt;p&gt;In this paragraph I shall highlight and review reddit&amp;rsquo;s community comments which I found most useful. I am going to just quote the user&amp;rsquo;s name, and summarize his comment. To see his full comment, just &lt;code&gt;CTRL+F&lt;/code&gt; his name on reddit&amp;rsquo;s page. After each summary, I spot what I learned, and how analysis could be furtherly improved according to it. However, None of these spots are implemented here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ArtKorvalay&lt;/strong&gt;
A gamer who dislikes a game but finds no outrage from the community does not add up his voice. A gamer who moderates a game but finds an outrage from the community adds up a negative voice&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We could consider ratings along whether the game is hyped or outraged from the community. In that way, we might reach more accurate analysis.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ArtKorvalay&lt;/strong&gt;
Some games like &lt;em&gt;disco elsiym&lt;/em&gt; gets played by only those who like such genre of games. A humble 2d-graphics like this shall not be played by any casual gamer who gets attracted by marketing and high graphics. So, a gamer who chooses to play it must be a fan of that style. As a result, the game got rated only by those who like it. Hence, ratings are biased.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We could consider ratings along whether a game&amp;rsquo;s marketing budget is high or low. In that way, we might reach more accurate analysis.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;EoceneMiacid&lt;/strong&gt;
&lt;em&gt;Terminator Resistance&lt;/em&gt; case study is typical for disparity between users and critics. Have a look &lt;a href=&#34;https://www.youtube.com/watch?v=H5wi-c0v2wk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; how the problem was highlighted by media.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Exploring this case study might reveal new insights as it is typical of the problem of disparity between users and professional critics. We might test our new techniques on this case study and see how our techniques perform up against it. Testing analysis techniques on a case we already know about emphatically shall help us on detecting mistakes in our analysis.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;p&gt;Preface&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#preface&#34;&gt;Preface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-i-have-learned-from-reddit-community&#34;&gt;What I Have Learned From Reddit Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Data Preprocessing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#import-libraries-and-local-files&#34;&gt;Import Libraries and Local Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#read-data&#34;&gt;Read Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-cleansing&#34;&gt;Data Cleansing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-preprocessing-summary&#34;&gt;Data Preprocessing Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exploratory Analysis&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#compute-disparity-difference-between-users-and-critics&#34;&gt;Compute Disparity (Difference) Between Users and Critics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#discretize-disparity-computed-earlier-into-categories&#34;&gt;Discretize Disparity Computed Earlier Into Categories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sort-according-to-disparity-between-users-and-critics&#34;&gt;Sort According to Disparity Between Users and Critics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#basic-stats-on-disparity-between-users-and-critics&#34;&gt;Basic Stats on Disparity Between Users and Critics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#graphing-disparity-between-users-and-critics&#34;&gt;Graphing Disparity Between Users and Critics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#maximum-disparity-between-users-and-critics-ratings&#34;&gt;Maximum Disparity Between Users and Critics Ratings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#minimum-disparity-between-users-and-critics&#34;&gt;Minimum Disparity Between Users and Critics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#games-which-got-higher-ratings-from-users-than-from-critics&#34;&gt;Games Which Got Higher Ratings From Users Than From Critics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exploratoy-analysis-summary&#34;&gt;Exploratoy Analysis Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Systematic Test&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#a-single-permutation-shuffle-based-trial-with-histogram-probability-density-function&#34;&gt;A Single Permutation Shuffle Based Trial With Histogram &amp;amp; Probability Density Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#permutation-test-and-p-value-based-statistical-significance&#34;&gt;Permutation Test and P-Value Based Statistical Significance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#systematic-test-summary&#34;&gt;Systematic Test Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;import-libraries-and-local-files&#34;&gt;Import Libraries and Local Files&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 3rd-party libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# local-files
import jsonRW as jsRW
import graphs.pie as pieGraph
import graphs.categoricalHeatmap as categoricalHeatmapGraph
import graphs.groupedBars as groupedBarsGraph
import graphs.histogramPdf as histogramPdfGraph
import transformations.transformations as transform
import transformations.discretizeIntoCategories as discIntCat
import statTests.permutationTest as permTest
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;read-data&#34;&gt;Read Data&lt;/h2&gt;
&lt;h3 id=&#34;read-local-json-data-into-a-pandas-dataframe&#34;&gt;Read Local JSON Data Into a Pandas Dataframe&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# a map from each platform to its corresponding dataframe
platform_df = {}
# platform names and their corresonding data file names
platformsNames = [&#39;ps4&#39;, &#39;xbox&#39;, &#39;switch&#39;, &#39;pc&#39;]
filesNames = [&#39;ps4.csv&#39;, &#39;xbox.csv&#39;, &#39;switch.csv&#39;, &#39;pc.csv&#39;]

# for each platform, then 
for name in platformsNames:
    # read its local json file
    metacritic_list = jsRW.readJson(name)
    # parse it as pandas dataframe, then map platform name to it
    platform_df[name] = pd.DataFrame(metacritic_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# take a look at a dataframe
platform_df[&#39;ps4&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;critic_rating&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;release_date&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;user_rating&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;91&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Jul  2, 2019&lt;/td&gt;
      &lt;td&gt;final fantasy xiv: shadowbringers&lt;/td&gt;
      &lt;td&gt;8.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;91&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Feb 26, 2019&lt;/td&gt;
      &lt;td&gt;nier: automata - game of the yorha edition&lt;/td&gt;
      &lt;td&gt;8.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;91&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Jan 25, 2019&lt;/td&gt;
      &lt;td&gt;resident evil 2&lt;/td&gt;
      &lt;td&gt;8.8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;90&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Mar 22, 2019&lt;/td&gt;
      &lt;td&gt;sekiro: shadows die twice&lt;/td&gt;
      &lt;td&gt;7.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;89&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Sep  6, 2019&lt;/td&gt;
      &lt;td&gt;monster hunter: world - iceborne&lt;/td&gt;
      &lt;td&gt;8.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;335&lt;/th&gt;
      &lt;td&gt;39&lt;/td&gt;
      &lt;td&gt;336&lt;/td&gt;
      &lt;td&gt;Oct 15, 2019&lt;/td&gt;
      &lt;td&gt;zombieland: double tap - road trip&lt;/td&gt;
      &lt;td&gt;4.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;336&lt;/th&gt;
      &lt;td&gt;37&lt;/td&gt;
      &lt;td&gt;337&lt;/td&gt;
      &lt;td&gt;Mar  5, 2019&lt;/td&gt;
      &lt;td&gt;left alive&lt;/td&gt;
      &lt;td&gt;8.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;337&lt;/th&gt;
      &lt;td&gt;36&lt;/td&gt;
      &lt;td&gt;338&lt;/td&gt;
      &lt;td&gt;Mar  5, 2019&lt;/td&gt;
      &lt;td&gt;eternity: the last unicorn&lt;/td&gt;
      &lt;td&gt;3.8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;338&lt;/th&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;339&lt;/td&gt;
      &lt;td&gt;May 30, 2019&lt;/td&gt;
      &lt;td&gt;dayz&lt;/td&gt;
      &lt;td&gt;2.8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;339&lt;/th&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;340&lt;/td&gt;
      &lt;td&gt;Mar 29, 2019&lt;/td&gt;
      &lt;td&gt;where the bees make honey&lt;/td&gt;
      &lt;td&gt;3.2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;340 rows × 5 columns&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;data-cleansing&#34;&gt;Data Cleansing&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# drop unneeded columns and re-organize them 
for name in platformsNames:
    platform_df[name] = platform_df[name][[&#39;title&#39;, &#39;user_rating&#39;, &#39;critic_rating&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# take a look at a dataframe, again
platform_df[&#39;ps4&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;user_rating&lt;/th&gt;
      &lt;th&gt;critic_rating&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;final fantasy xiv: shadowbringers&lt;/td&gt;
      &lt;td&gt;8.3&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;nier: automata - game of the yorha edition&lt;/td&gt;
      &lt;td&gt;8.5&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;resident evil 2&lt;/td&gt;
      &lt;td&gt;8.8&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;sekiro: shadows die twice&lt;/td&gt;
      &lt;td&gt;7.9&lt;/td&gt;
      &lt;td&gt;90&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;monster hunter: world - iceborne&lt;/td&gt;
      &lt;td&gt;8.4&lt;/td&gt;
      &lt;td&gt;89&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;335&lt;/th&gt;
      &lt;td&gt;zombieland: double tap - road trip&lt;/td&gt;
      &lt;td&gt;4.6&lt;/td&gt;
      &lt;td&gt;39&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;336&lt;/th&gt;
      &lt;td&gt;left alive&lt;/td&gt;
      &lt;td&gt;8.3&lt;/td&gt;
      &lt;td&gt;37&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;337&lt;/th&gt;
      &lt;td&gt;eternity: the last unicorn&lt;/td&gt;
      &lt;td&gt;3.8&lt;/td&gt;
      &lt;td&gt;36&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;338&lt;/th&gt;
      &lt;td&gt;dayz&lt;/td&gt;
      &lt;td&gt;2.8&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;339&lt;/th&gt;
      &lt;td&gt;where the bees make honey&lt;/td&gt;
      &lt;td&gt;3.2&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;340 rows × 3 columns&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id=&#34;remarks&#34;&gt;remarks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;user_rating must be on the same scale as critic_rating&lt;/li&gt;
&lt;li&gt;data types need to be checked&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# check columns data types
platform_df[&#39;ps4&#39;].dtypes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;title            object
user_rating      object
critic_rating    object
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# convert ratings into a numeric value
#      error ahead!
#df[&#39;user_rating&#39;] = pd.to_numeric(df[&#39;user_rating&#39;])
#df[&#39;critic_rating&#39;] = pd.to_numeric(df[&#39;critic_rating&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# get rid of user_rating with value equal to &amp;quot;tbd&amp;quot;

# for each platform
for name in platformsNames:
    # get its dataframe
    df = platform_df[name]
    # get index set in which user_rating is tbd, a non-numeric value
    tbdIndex = df[df[&#39;user_rating&#39;]==&amp;quot;tbd&amp;quot;].index
    # drop rows specified by indices in which user_rating is tbd
    df = df.drop(labels=tbdIndex, axis=&#39;index&#39;)
    # set updated data to platform_df
    platform_df[name] = df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# convert ratings to a numeric type

# for each platform
for name in platformsNames:
    # get its dataframe
    df = platform_df[name]
    # convert to a numeric type
    df[&#39;user_rating&#39;] = pd.to_numeric(df[&#39;user_rating&#39;])
    df[&#39;critic_rating&#39;] = pd.to_numeric(df[&#39;critic_rating&#39;])
    # set updated data to platform_df
    platform_df[name] = df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# check data types
platform_df[&#39;ps4&#39;].dtypes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;title             object
user_rating      float64
critic_rating      int64
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# user ratings must be on the same scale as critics ratings, so we multiply them by 10

# for each platform
for platformName in platform_df:
    platform_df[platformName][&#39;user_rating&#39;] = platform_df[platformName][&#39;user_rating&#39;] * 10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;platform_df[&#39;ps4&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;user_rating&lt;/th&gt;
      &lt;th&gt;critic_rating&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;final fantasy xiv: shadowbringers&lt;/td&gt;
      &lt;td&gt;83.0&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;nier: automata - game of the yorha edition&lt;/td&gt;
      &lt;td&gt;85.0&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;resident evil 2&lt;/td&gt;
      &lt;td&gt;88.0&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;sekiro: shadows die twice&lt;/td&gt;
      &lt;td&gt;79.0&lt;/td&gt;
      &lt;td&gt;90&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;monster hunter: world - iceborne&lt;/td&gt;
      &lt;td&gt;84.0&lt;/td&gt;
      &lt;td&gt;89&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;335&lt;/th&gt;
      &lt;td&gt;zombieland: double tap - road trip&lt;/td&gt;
      &lt;td&gt;46.0&lt;/td&gt;
      &lt;td&gt;39&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;336&lt;/th&gt;
      &lt;td&gt;left alive&lt;/td&gt;
      &lt;td&gt;83.0&lt;/td&gt;
      &lt;td&gt;37&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;337&lt;/th&gt;
      &lt;td&gt;eternity: the last unicorn&lt;/td&gt;
      &lt;td&gt;38.0&lt;/td&gt;
      &lt;td&gt;36&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;338&lt;/th&gt;
      &lt;td&gt;dayz&lt;/td&gt;
      &lt;td&gt;28.0&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;339&lt;/th&gt;
      &lt;td&gt;where the bees make honey&lt;/td&gt;
      &lt;td&gt;32.0&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;310 rows × 3 columns&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;optional-store-cleaned-data-into-a-csv-file&#34;&gt;Optional: Store Cleaned Data Into a CSV File&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
# store data to a csv file

# for each platform
for platformName in platform_df:
    # save to a csv file
    platform_df[platformName].to_csv(str(platformName)+&#39;.csv&#39;)
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;\n# store data to a csv file\n\n# for each platform\nfor platformName in platform_df:\n    # save to a csv file\n    platform_df[platformName].to_csv(str(platformName)+&#39;.csv&#39;)\n&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;data-preprocessing-summary&#34;&gt;Data Preprocessing Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Data stored as JSON format are transformed into csv&lt;/li&gt;
&lt;li&gt;Unneded columns are dropped&lt;/li&gt;
&lt;li&gt;Suitable data types are recognized by &lt;em&gt;pandas&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;compute-disparity-difference-between-users-and-critics&#34;&gt;Compute Disparity (Difference) Between Users and Critics&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# for each platform
for name in platform_df:
    # get dataframe of the platform
    df = platform_df[name]
    # for each record, compute distance between user and critic ratings, then set result to a new column
    df[&#39;userCritic_difference&#39;] = df.apply(lambda x: abs(x[&#39;user_rating&#39;]-x[&#39;critic_rating&#39;]), axis=1)
    # assign updates back to our dataframe
    platform_df[name] = df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;platform_df[&#39;ps4&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;user_rating&lt;/th&gt;
      &lt;th&gt;critic_rating&lt;/th&gt;
      &lt;th&gt;userCritic_difference&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;final fantasy xiv: shadowbringers&lt;/td&gt;
      &lt;td&gt;83.0&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
      &lt;td&gt;8.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;nier: automata - game of the yorha edition&lt;/td&gt;
      &lt;td&gt;85.0&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
      &lt;td&gt;6.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;resident evil 2&lt;/td&gt;
      &lt;td&gt;88.0&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;sekiro: shadows die twice&lt;/td&gt;
      &lt;td&gt;79.0&lt;/td&gt;
      &lt;td&gt;90&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;monster hunter: world - iceborne&lt;/td&gt;
      &lt;td&gt;84.0&lt;/td&gt;
      &lt;td&gt;89&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;335&lt;/th&gt;
      &lt;td&gt;zombieland: double tap - road trip&lt;/td&gt;
      &lt;td&gt;46.0&lt;/td&gt;
      &lt;td&gt;39&lt;/td&gt;
      &lt;td&gt;7.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;336&lt;/th&gt;
      &lt;td&gt;left alive&lt;/td&gt;
      &lt;td&gt;83.0&lt;/td&gt;
      &lt;td&gt;37&lt;/td&gt;
      &lt;td&gt;46.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;337&lt;/th&gt;
      &lt;td&gt;eternity: the last unicorn&lt;/td&gt;
      &lt;td&gt;38.0&lt;/td&gt;
      &lt;td&gt;36&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;338&lt;/th&gt;
      &lt;td&gt;dayz&lt;/td&gt;
      &lt;td&gt;28.0&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;339&lt;/th&gt;
      &lt;td&gt;where the bees make honey&lt;/td&gt;
      &lt;td&gt;32.0&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;310 rows × 4 columns&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;discretize-disparity-computed-earlier-into-categories&#34;&gt;Discretize Disparity Computed Earlier Into Categories&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# categories names and their corresponding intervals
# category at location x corresponds to interval equal or greater than intervals location x and less than location x + 1
# except for last category, has no end
categories = pd.Series([&amp;quot;low&amp;quot;, &amp;quot;moderate&amp;quot;, &amp;quot;high&amp;quot;, &amp;quot;very_high&amp;quot;, &amp;quot;extremely_high&amp;quot;])
intervals_categories = [0, 20, 30, 40, 50]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# compute categories as defined earlier

# loop on platforms
for platformName in platform_df:
    # get dataframe of the platform
    df = platform_df[platformName]
    # add category based on difference just defined
    df[&#39;difference_category&#39;] = df.apply(discIntCat.numToCat, axis=1, args=(&#39;userCritic_difference&#39;, categories, intervals_categories))
    
    # let categories be recognized by pandas
    df[&#39;difference_category&#39;] = df[&#39;difference_category&#39;].astype(&amp;quot;category&amp;quot;)
    # re-order categories
    df[&#39;difference_category&#39;] = df[&#39;difference_category&#39;].cat.set_categories(categories, ordered=True)
    
    
    # assign back to our dataframe
    platform_df[platformName] = df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# take a look after our new columns added
platform_df[&#39;ps4&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;user_rating&lt;/th&gt;
      &lt;th&gt;critic_rating&lt;/th&gt;
      &lt;th&gt;userCritic_difference&lt;/th&gt;
      &lt;th&gt;difference_category&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;final fantasy xiv: shadowbringers&lt;/td&gt;
      &lt;td&gt;83.0&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
      &lt;td&gt;8.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;nier: automata - game of the yorha edition&lt;/td&gt;
      &lt;td&gt;85.0&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
      &lt;td&gt;6.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;resident evil 2&lt;/td&gt;
      &lt;td&gt;88.0&lt;/td&gt;
      &lt;td&gt;91&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;sekiro: shadows die twice&lt;/td&gt;
      &lt;td&gt;79.0&lt;/td&gt;
      &lt;td&gt;90&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;monster hunter: world - iceborne&lt;/td&gt;
      &lt;td&gt;84.0&lt;/td&gt;
      &lt;td&gt;89&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;335&lt;/th&gt;
      &lt;td&gt;zombieland: double tap - road trip&lt;/td&gt;
      &lt;td&gt;46.0&lt;/td&gt;
      &lt;td&gt;39&lt;/td&gt;
      &lt;td&gt;7.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;336&lt;/th&gt;
      &lt;td&gt;left alive&lt;/td&gt;
      &lt;td&gt;83.0&lt;/td&gt;
      &lt;td&gt;37&lt;/td&gt;
      &lt;td&gt;46.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;337&lt;/th&gt;
      &lt;td&gt;eternity: the last unicorn&lt;/td&gt;
      &lt;td&gt;38.0&lt;/td&gt;
      &lt;td&gt;36&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;338&lt;/th&gt;
      &lt;td&gt;dayz&lt;/td&gt;
      &lt;td&gt;28.0&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;339&lt;/th&gt;
      &lt;td&gt;where the bees make honey&lt;/td&gt;
      &lt;td&gt;32.0&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;310 rows × 5 columns&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;sort-according-to-disparity-between-users-and-critics&#34;&gt;Sort According to Disparity Between Users and Critics&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# for each platform
for platformName in platform_df:
    # get platform dataframe
    df = platform_df[platformName]
    # sort it by userCritic_difference
    df = df.sort_values(axis=0, by=&#39;userCritic_difference&#39;, ascending=False)
    # assign sorted dataframe back to our dataframe
    platform_df[platformName] = df
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;basic-stats-on-disparity-between-users-and-critics&#34;&gt;Basic Stats on Disparity Between Users and Critics&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# for each platform
for platformName in platform_df:
    # print platform name
    print(&amp;quot;\n&amp;quot;, &amp;quot;on &amp;quot;, platformName)
    # show basic stat
    print(platform_df[platformName][&#39;userCritic_difference&#39;].describe())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; on  ps4
count    310.000000
mean      15.893548
std       13.074530
min        0.000000
25%        5.000000
50%       12.000000
75%       23.000000
max       69.000000
Name: userCritic_difference, dtype: float64

 on  xbox
count    186.000000
mean      14.801075
std       13.192881
min        0.000000
25%        5.000000
50%       11.000000
75%       21.000000
max       69.000000
Name: userCritic_difference, dtype: float64

 on  switch
count    364.000000
mean       6.876374
std        8.741062
min        0.000000
25%        1.750000
50%        4.000000
75%        9.000000
max       58.000000
Name: userCritic_difference, dtype: float64

 on  pc
count    327.000000
mean      13.547401
std       12.322982
min        0.000000
25%        4.000000
50%       10.000000
75%       19.000000
max       63.000000
Name: userCritic_difference, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;categories-size&#34;&gt;Categories Size&lt;/h2&gt;
&lt;h3 id=&#34;platform-x-category-2d-sizes-dataframe&#34;&gt;Platform x Category 2D Sizes Dataframe&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;platform_category_size = transform.map_columnCount(platform_df, &#39;difference_category&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;platform_category_size
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;low&lt;/th&gt;
      &lt;th&gt;moderate&lt;/th&gt;
      &lt;th&gt;high&lt;/th&gt;
      &lt;th&gt;very_high&lt;/th&gt;
      &lt;th&gt;extremely_high&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;ps4&lt;/th&gt;
      &lt;td&gt;211&lt;/td&gt;
      &lt;td&gt;52&lt;/td&gt;
      &lt;td&gt;33&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;xbox&lt;/th&gt;
      &lt;td&gt;131&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;switch&lt;/th&gt;
      &lt;td&gt;334&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;pc&lt;/th&gt;
      &lt;td&gt;249&lt;/td&gt;
      &lt;td&gt;43&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;category-x-platform-2d-sizes-dataframe&#34;&gt;Category x Platform 2D Sizes Dataframe&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;category_platform_size = platform_category_size.transpose()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;category_platform_size
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;ps4&lt;/th&gt;
      &lt;th&gt;xbox&lt;/th&gt;
      &lt;th&gt;switch&lt;/th&gt;
      &lt;th&gt;pc&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;low&lt;/th&gt;
      &lt;td&gt;211&lt;/td&gt;
      &lt;td&gt;131&lt;/td&gt;
      &lt;td&gt;334&lt;/td&gt;
      &lt;td&gt;249&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;moderate&lt;/th&gt;
      &lt;td&gt;52&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;43&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;high&lt;/th&gt;
      &lt;td&gt;33&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;very_high&lt;/th&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;extremely_high&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;category_platform_size.loc[&#39;low&#39;, &#39;ps4&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;211
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;graphing-disparity-between-users-and-critics&#34;&gt;Graphing Disparity Between Users and Critics&lt;/h2&gt;
&lt;h3 id=&#34;pie-graph&#34;&gt;Pie Graph&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for columnName in category_platform_size:
    platSeries = category_platform_size[columnName]
    platName = platSeries.name
    pieGraph.showPieGraph(platSeries, platName + &#39; categories percentages&#39;, 6, 6)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./index_53_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./index_53_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./index_53_2.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./index_53_3.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;grouped-bar&#34;&gt;Grouped Bar&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;groupedBarsGraph.showGroupedBars(platform_category_size, platformsNames, &#39;categories size&#39;, &#39;categories size by platform&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./index_55_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;categorical-heatmap&#34;&gt;Categorical Heatmap&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;categoricalHeatmapGraph.showCategoricalHeatmap(8, 8, category_platform_size, &amp;quot;categories sizes among platforms&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./index_57_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;maximum-disparity-between-users-and-critics-ratings&#34;&gt;Maximum Disparity Between Users and Critics Ratings&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;platform_df[&#39;ps4&#39;].head(20)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;user_rating&lt;/th&gt;
      &lt;th&gt;critic_rating&lt;/th&gt;
      &lt;th&gt;userCritic_difference&lt;/th&gt;
      &lt;th&gt;difference_category&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;93&lt;/th&gt;
      &lt;td&gt;nba 2k20&lt;/td&gt;
      &lt;td&gt;9.0&lt;/td&gt;
      &lt;td&gt;78&lt;/td&gt;
      &lt;td&gt;69.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;82&lt;/th&gt;
      &lt;td&gt;fifa 20&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
      &lt;td&gt;79&lt;/td&gt;
      &lt;td&gt;68.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;116&lt;/th&gt;
      &lt;td&gt;madden nfl 20&lt;/td&gt;
      &lt;td&gt;16.0&lt;/td&gt;
      &lt;td&gt;76&lt;/td&gt;
      &lt;td&gt;60.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;79&lt;/th&gt;
      &lt;td&gt;gravity ghost: deluxe edition&lt;/td&gt;
      &lt;td&gt;27.0&lt;/td&gt;
      &lt;td&gt;79&lt;/td&gt;
      &lt;td&gt;52.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;172&lt;/th&gt;
      &lt;td&gt;simulacra&lt;/td&gt;
      &lt;td&gt;21.0&lt;/td&gt;
      &lt;td&gt;72&lt;/td&gt;
      &lt;td&gt;51.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;36&lt;/th&gt;
      &lt;td&gt;mortal kombat 11&lt;/td&gt;
      &lt;td&gt;33.0&lt;/td&gt;
      &lt;td&gt;82&lt;/td&gt;
      &lt;td&gt;49.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;58&lt;/th&gt;
      &lt;td&gt;call of duty: modern warfare&lt;/td&gt;
      &lt;td&gt;32.0&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;48.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;199&lt;/th&gt;
      &lt;td&gt;hitman hd enhanced collection&lt;/td&gt;
      &lt;td&gt;21.0&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;48.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;217&lt;/th&gt;
      &lt;td&gt;mxgp 2019&lt;/td&gt;
      &lt;td&gt;20.0&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;48.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;224&lt;/th&gt;
      &lt;td&gt;we. the revolution&lt;/td&gt;
      &lt;td&gt;20.0&lt;/td&gt;
      &lt;td&gt;67&lt;/td&gt;
      &lt;td&gt;47.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;218&lt;/th&gt;
      &lt;td&gt;giga wrecker alt.&lt;/td&gt;
      &lt;td&gt;20.0&lt;/td&gt;
      &lt;td&gt;67&lt;/td&gt;
      &lt;td&gt;47.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;336&lt;/th&gt;
      &lt;td&gt;left alive&lt;/td&gt;
      &lt;td&gt;83.0&lt;/td&gt;
      &lt;td&gt;37&lt;/td&gt;
      &lt;td&gt;46.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;65&lt;/th&gt;
      &lt;td&gt;dauntless&lt;/td&gt;
      &lt;td&gt;34.0&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;46.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;285&lt;/th&gt;
      &lt;td&gt;darksiders iii: keepers of the void&lt;/td&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;59&lt;/td&gt;
      &lt;td&gt;41.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;286&lt;/th&gt;
      &lt;td&gt;attack of the earthlings&lt;/td&gt;
      &lt;td&gt;20.0&lt;/td&gt;
      &lt;td&gt;59&lt;/td&gt;
      &lt;td&gt;39.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;299&lt;/th&gt;
      &lt;td&gt;the lego movie 2 videogame&lt;/td&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;57&lt;/td&gt;
      &lt;td&gt;39.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;275&lt;/th&gt;
      &lt;td&gt;asterix &amp;amp; obelix xxl 3: the crystal menhir&lt;/td&gt;
      &lt;td&gt;21.0&lt;/td&gt;
      &lt;td&gt;60&lt;/td&gt;
      &lt;td&gt;39.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;68&lt;/th&gt;
      &lt;td&gt;lonely mountains: downhill&lt;/td&gt;
      &lt;td&gt;41.0&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;39.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;256&lt;/th&gt;
      &lt;td&gt;a knight&#39;s quest&lt;/td&gt;
      &lt;td&gt;24.0&lt;/td&gt;
      &lt;td&gt;63&lt;/td&gt;
      &lt;td&gt;39.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;21&lt;/th&gt;
      &lt;td&gt;far: lone sails&lt;/td&gt;
      &lt;td&gt;44.0&lt;/td&gt;
      &lt;td&gt;83&lt;/td&gt;
      &lt;td&gt;39.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;platform_df[&#39;xbox&#39;].head(20)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;user_rating&lt;/th&gt;
      &lt;th&gt;critic_rating&lt;/th&gt;
      &lt;th&gt;userCritic_difference&lt;/th&gt;
      &lt;th&gt;difference_category&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;70&lt;/th&gt;
      &lt;td&gt;nba 2k20&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;69.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;74&lt;/th&gt;
      &lt;td&gt;fifa 20&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
      &lt;td&gt;79&lt;/td&gt;
      &lt;td&gt;68.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;75&lt;/th&gt;
      &lt;td&gt;madden nfl 20&lt;/td&gt;
      &lt;td&gt;20.0&lt;/td&gt;
      &lt;td&gt;79&lt;/td&gt;
      &lt;td&gt;59.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;mortal kombat 11&lt;/td&gt;
      &lt;td&gt;31.0&lt;/td&gt;
      &lt;td&gt;86&lt;/td&gt;
      &lt;td&gt;55.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;115&lt;/th&gt;
      &lt;td&gt;timespinner&lt;/td&gt;
      &lt;td&gt;23.0&lt;/td&gt;
      &lt;td&gt;74&lt;/td&gt;
      &lt;td&gt;51.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;169&lt;/th&gt;
      &lt;td&gt;wolfenstein: youngblood&lt;/td&gt;
      &lt;td&gt;20.0&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;48.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;57&lt;/th&gt;
      &lt;td&gt;call of duty: modern warfare&lt;/td&gt;
      &lt;td&gt;37.0&lt;/td&gt;
      &lt;td&gt;81&lt;/td&gt;
      &lt;td&gt;44.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;nhl 20&lt;/td&gt;
      &lt;td&gt;42.0&lt;/td&gt;
      &lt;td&gt;85&lt;/td&gt;
      &lt;td&gt;43.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;143&lt;/th&gt;
      &lt;td&gt;disney classic games: aladdin and the lion king&lt;/td&gt;
      &lt;td&gt;30.0&lt;/td&gt;
      &lt;td&gt;72&lt;/td&gt;
      &lt;td&gt;42.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;24&lt;/th&gt;
      &lt;td&gt;far: lone sails&lt;/td&gt;
      &lt;td&gt;43.0&lt;/td&gt;
      &lt;td&gt;84&lt;/td&gt;
      &lt;td&gt;41.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;45&lt;/th&gt;
      &lt;td&gt;dauntless&lt;/td&gt;
      &lt;td&gt;43.0&lt;/td&gt;
      &lt;td&gt;82&lt;/td&gt;
      &lt;td&gt;39.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;106&lt;/th&gt;
      &lt;td&gt;far cry new dawn&lt;/td&gt;
      &lt;td&gt;37.0&lt;/td&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;38.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;76&lt;/th&gt;
      &lt;td&gt;grid&lt;/td&gt;
      &lt;td&gt;45.0&lt;/td&gt;
      &lt;td&gt;79&lt;/td&gt;
      &lt;td&gt;34.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;248&lt;/th&gt;
      &lt;td&gt;wwe 2k20&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
      &lt;td&gt;45&lt;/td&gt;
      &lt;td&gt;34.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;92&lt;/th&gt;
      &lt;td&gt;assassin&#39;s creed iii remastered&lt;/td&gt;
      &lt;td&gt;43.0&lt;/td&gt;
      &lt;td&gt;77&lt;/td&gt;
      &lt;td&gt;34.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;160&lt;/th&gt;
      &lt;td&gt;genesis alpha one&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;34.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;17&lt;/th&gt;
      &lt;td&gt;trials rising&lt;/td&gt;
      &lt;td&gt;52.0&lt;/td&gt;
      &lt;td&gt;85&lt;/td&gt;
      &lt;td&gt;33.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;19&lt;/th&gt;
      &lt;td&gt;crash team racing: nitro-fueled&lt;/td&gt;
      &lt;td&gt;51.0&lt;/td&gt;
      &lt;td&gt;84&lt;/td&gt;
      &lt;td&gt;33.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;204&lt;/th&gt;
      &lt;td&gt;narcos: rise of the cartels&lt;/td&gt;
      &lt;td&gt;30.0&lt;/td&gt;
      &lt;td&gt;63&lt;/td&gt;
      &lt;td&gt;33.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;fell seal: arbiter&#39;s mark&lt;/td&gt;
      &lt;td&gt;54.0&lt;/td&gt;
      &lt;td&gt;86&lt;/td&gt;
      &lt;td&gt;32.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;platform_df[&#39;pc&#39;].head(20)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;user_rating&lt;/th&gt;
      &lt;th&gt;critic_rating&lt;/th&gt;
      &lt;th&gt;userCritic_difference&lt;/th&gt;
      &lt;th&gt;difference_category&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;203&lt;/th&gt;
      &lt;td&gt;nba 2k20&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
      &lt;td&gt;74&lt;/td&gt;
      &lt;td&gt;63.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;234&lt;/th&gt;
      &lt;td&gt;fifa 20&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
      &lt;td&gt;72&lt;/td&gt;
      &lt;td&gt;61.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;237&lt;/th&gt;
      &lt;td&gt;madden nfl 20&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;72&lt;/td&gt;
      &lt;td&gt;60.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;77&lt;/th&gt;
      &lt;td&gt;call of duty: modern warfare&lt;/td&gt;
      &lt;td&gt;25.0&lt;/td&gt;
      &lt;td&gt;81&lt;/td&gt;
      &lt;td&gt;56.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;48&lt;/th&gt;
      &lt;td&gt;mortal kombat 11&lt;/td&gt;
      &lt;td&gt;27.0&lt;/td&gt;
      &lt;td&gt;82&lt;/td&gt;
      &lt;td&gt;55.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;279&lt;/th&gt;
      &lt;td&gt;hearthstone: heroes of warcraft - saviors of u...&lt;/td&gt;
      &lt;td&gt;19.0&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;49.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;19&lt;/th&gt;
      &lt;td&gt;the sims 4: realm of magic&lt;/td&gt;
      &lt;td&gt;37.0&lt;/td&gt;
      &lt;td&gt;85&lt;/td&gt;
      &lt;td&gt;48.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;264&lt;/th&gt;
      &lt;td&gt;wolfenstein: youngblood&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;47.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;383&lt;/th&gt;
      &lt;td&gt;left alive&lt;/td&gt;
      &lt;td&gt;86.0&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;46.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;96&lt;/th&gt;
      &lt;td&gt;bury me, my love&lt;/td&gt;
      &lt;td&gt;34.0&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;46.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;red dead redemption 2&lt;/td&gt;
      &lt;td&gt;48.0&lt;/td&gt;
      &lt;td&gt;93&lt;/td&gt;
      &lt;td&gt;45.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;235&lt;/th&gt;
      &lt;td&gt;oninaki&lt;/td&gt;
      &lt;td&gt;31.0&lt;/td&gt;
      &lt;td&gt;72&lt;/td&gt;
      &lt;td&gt;41.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;47&lt;/th&gt;
      &lt;td&gt;the sims 4: discover university&lt;/td&gt;
      &lt;td&gt;41.0&lt;/td&gt;
      &lt;td&gt;82&lt;/td&gt;
      &lt;td&gt;41.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;360&lt;/th&gt;
      &lt;td&gt;wolfenstein: cyberpilot&lt;/td&gt;
      &lt;td&gt;15.0&lt;/td&gt;
      &lt;td&gt;54&lt;/td&gt;
      &lt;td&gt;39.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;187&lt;/th&gt;
      &lt;td&gt;assassin&#39;s creed iii remastered&lt;/td&gt;
      &lt;td&gt;36.0&lt;/td&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;39.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;181&lt;/th&gt;
      &lt;td&gt;defector&lt;/td&gt;
      &lt;td&gt;36.0&lt;/td&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;39.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;68&lt;/th&gt;
      &lt;td&gt;the elder scrolls online: dragonhold&lt;/td&gt;
      &lt;td&gt;42.0&lt;/td&gt;
      &lt;td&gt;81&lt;/td&gt;
      &lt;td&gt;39.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;130&lt;/th&gt;
      &lt;td&gt;surviving mars: green planet&lt;/td&gt;
      &lt;td&gt;40.0&lt;/td&gt;
      &lt;td&gt;78&lt;/td&gt;
      &lt;td&gt;38.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;28&lt;/th&gt;
      &lt;td&gt;dirt rally 2.0&lt;/td&gt;
      &lt;td&gt;46.0&lt;/td&gt;
      &lt;td&gt;84&lt;/td&gt;
      &lt;td&gt;38.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;150&lt;/th&gt;
      &lt;td&gt;plants vs. zombies: battle for neighborville&lt;/td&gt;
      &lt;td&gt;40.0&lt;/td&gt;
      &lt;td&gt;77&lt;/td&gt;
      &lt;td&gt;37.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;platform_df[&#39;switch&#39;].head(20)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;user_rating&lt;/th&gt;
      &lt;th&gt;critic_rating&lt;/th&gt;
      &lt;th&gt;userCritic_difference&lt;/th&gt;
      &lt;th&gt;difference_category&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;240&lt;/th&gt;
      &lt;td&gt;nba 2k20&lt;/td&gt;
      &lt;td&gt;15.0&lt;/td&gt;
      &lt;td&gt;73&lt;/td&gt;
      &lt;td&gt;58.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;66&lt;/th&gt;
      &lt;td&gt;pillars of eternity: complete edition&lt;/td&gt;
      &lt;td&gt;27.0&lt;/td&gt;
      &lt;td&gt;82&lt;/td&gt;
      &lt;td&gt;55.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;94&lt;/th&gt;
      &lt;td&gt;pokemon sword / shield dual pack&lt;/td&gt;
      &lt;td&gt;29.0&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;51.0&lt;/td&gt;
      &lt;td&gt;extremely_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;416&lt;/th&gt;
      &lt;td&gt;catan&lt;/td&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;61&lt;/td&gt;
      &lt;td&gt;43.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;123&lt;/th&gt;
      &lt;td&gt;mortal kombat 11&lt;/td&gt;
      &lt;td&gt;36.0&lt;/td&gt;
      &lt;td&gt;78&lt;/td&gt;
      &lt;td&gt;42.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;87&lt;/th&gt;
      &lt;td&gt;pokemon shield&lt;/td&gt;
      &lt;td&gt;44.0&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;36.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;91&lt;/th&gt;
      &lt;td&gt;pokemon sword&lt;/td&gt;
      &lt;td&gt;45.0&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;492&lt;/th&gt;
      &lt;td&gt;fifa 20: legacy edition&lt;/td&gt;
      &lt;td&gt;9.0&lt;/td&gt;
      &lt;td&gt;43&lt;/td&gt;
      &lt;td&gt;34.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;476&lt;/th&gt;
      &lt;td&gt;devil may cry 2&lt;/td&gt;
      &lt;td&gt;84.0&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;34.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;345&lt;/th&gt;
      &lt;td&gt;giga wrecker alt.&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;67&lt;/td&gt;
      &lt;td&gt;32.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;359&lt;/th&gt;
      &lt;td&gt;wolfenstein: youngblood&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;65&lt;/td&gt;
      &lt;td&gt;30.0&lt;/td&gt;
      &lt;td&gt;high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;280&lt;/th&gt;
      &lt;td&gt;mutant year zero: road to eden - deluxe edition&lt;/td&gt;
      &lt;td&gt;42.0&lt;/td&gt;
      &lt;td&gt;71&lt;/td&gt;
      &lt;td&gt;29.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;237&lt;/th&gt;
      &lt;td&gt;dauntless&lt;/td&gt;
      &lt;td&gt;44.0&lt;/td&gt;
      &lt;td&gt;73&lt;/td&gt;
      &lt;td&gt;29.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;398&lt;/th&gt;
      &lt;td&gt;rad rodgers: radical edition&lt;/td&gt;
      &lt;td&gt;34.0&lt;/td&gt;
      &lt;td&gt;62&lt;/td&gt;
      &lt;td&gt;28.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;432&lt;/th&gt;
      &lt;td&gt;farming simulator 20&lt;/td&gt;
      &lt;td&gt;32.0&lt;/td&gt;
      &lt;td&gt;59&lt;/td&gt;
      &lt;td&gt;27.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;466&lt;/th&gt;
      &lt;td&gt;whipseey and the lost atlas&lt;/td&gt;
      &lt;td&gt;80.0&lt;/td&gt;
      &lt;td&gt;54&lt;/td&gt;
      &lt;td&gt;26.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;263&lt;/th&gt;
      &lt;td&gt;my time at portia&lt;/td&gt;
      &lt;td&gt;46.0&lt;/td&gt;
      &lt;td&gt;72&lt;/td&gt;
      &lt;td&gt;26.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;374&lt;/th&gt;
      &lt;td&gt;deponia&lt;/td&gt;
      &lt;td&gt;38.0&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;26.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;496&lt;/th&gt;
      &lt;td&gt;car mechanic simulator&lt;/td&gt;
      &lt;td&gt;15.0&lt;/td&gt;
      &lt;td&gt;41&lt;/td&gt;
      &lt;td&gt;26.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;499&lt;/th&gt;
      &lt;td&gt;blades of time&lt;/td&gt;
      &lt;td&gt;63.0&lt;/td&gt;
      &lt;td&gt;38&lt;/td&gt;
      &lt;td&gt;25.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def searchforTitleInPlatform(platformStr_in, game_in):
    tem_df = platform_df[platformStr_in][platform_df[platformStr_in][&#39;title&#39;] == game_in]
    if len(tem_df) == 1:
        return tem_df.iloc[0]
    elif len(tem_df) == 0:
        return -1
    else:
        raise ValueError(&amp;quot;unexpected no of games found&amp;quot;)
        
searchforTitleInPlatform(&#39;xbox&#39;, &amp;quot;hitman hd enhanced collection&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;title                    hitman hd enhanced collection
user_rating                                         46
critic_rating                                       66
userCritic_difference                               20
difference_category                           moderate
Name: 187, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;minimum-disparity-between-users-and-critics&#34;&gt;Minimum Disparity Between Users and Critics&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;platform_df[&#39;ps4&#39;].tail(20)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;user_rating&lt;/th&gt;
      &lt;th&gt;critic_rating&lt;/th&gt;
      &lt;th&gt;userCritic_difference&lt;/th&gt;
      &lt;th&gt;difference_category&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;55&lt;/th&gt;
      &lt;td&gt;five nights at freddy&#39;s vr: help wanted&lt;/td&gt;
      &lt;td&gt;78.0&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;251&lt;/th&gt;
      &lt;td&gt;metal wolf chaos xd&lt;/td&gt;
      &lt;td&gt;62.0&lt;/td&gt;
      &lt;td&gt;63&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;201&lt;/th&gt;
      &lt;td&gt;erica&lt;/td&gt;
      &lt;td&gt;70.0&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;113&lt;/th&gt;
      &lt;td&gt;blazing chrome&lt;/td&gt;
      &lt;td&gt;75.0&lt;/td&gt;
      &lt;td&gt;76&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;207&lt;/th&gt;
      &lt;td&gt;sea of solitude&lt;/td&gt;
      &lt;td&gt;68.0&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;88&lt;/th&gt;
      &lt;td&gt;blasphemous&lt;/td&gt;
      &lt;td&gt;77.0&lt;/td&gt;
      &lt;td&gt;78&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;339&lt;/th&gt;
      &lt;td&gt;where the bees make honey&lt;/td&gt;
      &lt;td&gt;32.0&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;22&lt;/th&gt;
      &lt;td&gt;bloodstained: ritual of the night&lt;/td&gt;
      &lt;td&gt;84.0&lt;/td&gt;
      &lt;td&gt;83&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;317&lt;/th&gt;
      &lt;td&gt;eden-tomorrow&lt;/td&gt;
      &lt;td&gt;53.0&lt;/td&gt;
      &lt;td&gt;52&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;78&lt;/th&gt;
      &lt;td&gt;knights and bikes&lt;/td&gt;
      &lt;td&gt;78.0&lt;/td&gt;
      &lt;td&gt;79&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;38&lt;/th&gt;
      &lt;td&gt;efootball pes 2020&lt;/td&gt;
      &lt;td&gt;81.0&lt;/td&gt;
      &lt;td&gt;82&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;75&lt;/th&gt;
      &lt;td&gt;children of morta&lt;/td&gt;
      &lt;td&gt;78.0&lt;/td&gt;
      &lt;td&gt;79&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;306&lt;/th&gt;
      &lt;td&gt;ice age: scrat&#39;s nutty adventure&lt;/td&gt;
      &lt;td&gt;56.0&lt;/td&gt;
      &lt;td&gt;55&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;110&lt;/th&gt;
      &lt;td&gt;motogp 19&lt;/td&gt;
      &lt;td&gt;76.0&lt;/td&gt;
      &lt;td&gt;76&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;188&lt;/th&gt;
      &lt;td&gt;lost ember&lt;/td&gt;
      &lt;td&gt;70.0&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;198&lt;/th&gt;
      &lt;td&gt;chocobo&#39;s mystery dungeon: every buddy!&lt;/td&gt;
      &lt;td&gt;69.0&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;330&lt;/th&gt;
      &lt;td&gt;submersed&lt;/td&gt;
      &lt;td&gt;44.0&lt;/td&gt;
      &lt;td&gt;44&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;214&lt;/th&gt;
      &lt;td&gt;effie&lt;/td&gt;
      &lt;td&gt;68.0&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;76&lt;/th&gt;
      &lt;td&gt;star wars jedi: fallen order&lt;/td&gt;
      &lt;td&gt;79.0&lt;/td&gt;
      &lt;td&gt;79&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;56&lt;/th&gt;
      &lt;td&gt;blood &amp;amp; truth&lt;/td&gt;
      &lt;td&gt;80.0&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;games-which-got-higher-ratings-from-users-than-from-critics&#34;&gt;Games Which Got Higher Ratings From Users Than From Critics&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def higherUserRatings(platform_in):
    return platform_df[platform_in][platform_df[platform_in][&#39;user_rating&#39;] &amp;gt; platform_df[platform_in][&#39;critic_rating&#39;]].head(10)
    
higherUserRatings(&#39;pc&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;user_rating&lt;/th&gt;
      &lt;th&gt;critic_rating&lt;/th&gt;
      &lt;th&gt;userCritic_difference&lt;/th&gt;
      &lt;th&gt;difference_category&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;383&lt;/th&gt;
      &lt;td&gt;left alive&lt;/td&gt;
      &lt;td&gt;86.0&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;46.0&lt;/td&gt;
      &lt;td&gt;very_high&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;376&lt;/th&gt;
      &lt;td&gt;paranoia: happiness is mandatory&lt;/td&gt;
      &lt;td&gt;71.0&lt;/td&gt;
      &lt;td&gt;47&lt;/td&gt;
      &lt;td&gt;24.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;355&lt;/th&gt;
      &lt;td&gt;little misfortune&lt;/td&gt;
      &lt;td&gt;80.0&lt;/td&gt;
      &lt;td&gt;57&lt;/td&gt;
      &lt;td&gt;23.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;348&lt;/th&gt;
      &lt;td&gt;terminator: resistance&lt;/td&gt;
      &lt;td&gt;82.0&lt;/td&gt;
      &lt;td&gt;59&lt;/td&gt;
      &lt;td&gt;23.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;384&lt;/th&gt;
      &lt;td&gt;eternity: the last unicorn&lt;/td&gt;
      &lt;td&gt;61.0&lt;/td&gt;
      &lt;td&gt;39&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;341&lt;/th&gt;
      &lt;td&gt;summer catchers&lt;/td&gt;
      &lt;td&gt;83.0&lt;/td&gt;
      &lt;td&gt;61&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;365&lt;/th&gt;
      &lt;td&gt;bannermen&lt;/td&gt;
      &lt;td&gt;72.0&lt;/td&gt;
      &lt;td&gt;52&lt;/td&gt;
      &lt;td&gt;20.0&lt;/td&gt;
      &lt;td&gt;moderate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;374&lt;/th&gt;
      &lt;td&gt;i love you, colonel sanders! a finger lickin&#39; ...&lt;/td&gt;
      &lt;td&gt;68.0&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;344&lt;/th&gt;
      &lt;td&gt;medieval kingdom wars&lt;/td&gt;
      &lt;td&gt;77.0&lt;/td&gt;
      &lt;td&gt;60&lt;/td&gt;
      &lt;td&gt;17.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;302&lt;/th&gt;
      &lt;td&gt;outbuddies&lt;/td&gt;
      &lt;td&gt;83.0&lt;/td&gt;
      &lt;td&gt;66&lt;/td&gt;
      &lt;td&gt;17.0&lt;/td&gt;
      &lt;td&gt;low&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;exploratoy-analysis-summary&#34;&gt;Exploratoy Analysis Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NBA, Fifa, Madden, COD: modern warefare games are on top of nearly all platforms lists of maximum disparity between users and professional critics&lt;/li&gt;
&lt;li&gt;Star Wars Jedi: Fallen Order got zero disparity between users and professional critics ratings&lt;/li&gt;
&lt;li&gt;Left Alive is the most praised game by the community not appreciated by professional critics&lt;/li&gt;
&lt;li&gt;Switch games got much lower percentage of high and moderate disparity&lt;/li&gt;
&lt;li&gt;Switch games got a mean of 7 disparity, nearly half of other platforms&amp;rsquo; disparity which got about 14&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;a-single-permutation-shuffle-based-trial-with-histogram--probability-density-function&#34;&gt;A Single Permutation Shuffle Based Trial With Histogram &amp;amp; Probability Density Function&lt;/h2&gt;
&lt;p&gt;We compare platforms distributions through permutation-test. It is a more systematic approach than relying upon intuition of visualizing and comparing distributions. Given two platforms, We concatenate them into one group. That group&amp;rsquo;s elements are randomly shuffled. Then we divide the group into new two groups. We compare the two distributions of the new two groups and assess whether the insight is still present as in the case of the two original groups of platforms. If the insight is not present in the two new groups, then that would count an evidence on behalf of our hypothesis. That is, The insight (difference in distribution) of original distributions is attributed to the two platforms. In addition, We consider average a p-value of a distribution and utilize it in our test. In Next section, We apply this method iteratively.&lt;/p&gt;
&lt;h3 id=&#34;ensure-series-data-are-ascendingly-ordered&#34;&gt;Ensure Series Data are Ascendingly Ordered&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(platform_df[&#39;ps4&#39;][&#39;userCritic_difference&#39;])
print(&amp;quot;&amp;quot;)
print(platform_df[&#39;switch&#39;][&#39;userCritic_difference&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;93     69.0
82     68.0
116    60.0
79     52.0
172    51.0
       ... 
198     0.0
330     0.0
214     0.0
76      0.0
56      0.0
Name: userCritic_difference, Length: 310, dtype: float64

240    58.0
66     55.0
94     51.0
416    43.0
123    42.0
       ... 
443     0.0
89      0.0
106     0.0
53      0.0
208     0.0
Name: userCritic_difference, Length: 364, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ps4-distribution&#34;&gt;PS4 Distribution&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;histogramPdfGraph.showHistPdf(platform_df[&#39;ps4&#39;][&#39;userCritic_difference&#39;], 30, &#39;#e3e2e2&#39;, &#39;black&#39;, &#39;disparity&#39;, &#39;ps4&#39;, 10, 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./index_74_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;average-of-ps4s-disparity&#34;&gt;Average of PS4&amp;rsquo;s Disparity&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;platform_df[&#39;ps4&#39;][&#39;userCritic_difference&#39;].mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;15.893548387096773
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;switch-distribution&#34;&gt;Switch Distribution&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;histogramPdfGraph.showHistPdf(platform_df[&#39;switch&#39;][&#39;userCritic_difference&#39;], 30, &#39;#e3e2e2&#39;, &#39;black&#39;, &#39;disparity&#39;, &#39;switch&#39;, 10, 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./index_78_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;average-of-switch-disparity&#34;&gt;Average of Switch Disparity&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;platform_df[&#39;switch&#39;][&#39;userCritic_difference&#39;].mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;6.876373626373627
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The difference between &lt;em&gt;ps4&lt;/em&gt; and &lt;em&gt;switch&lt;/em&gt; distributions is notable&lt;/li&gt;
&lt;li&gt;The difference between &lt;em&gt;ps4&lt;/em&gt; and &lt;em&gt;switch&lt;/em&gt; means is about 9&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;concatenate-both-ps4-and-switch&#34;&gt;Concatenate Both PS4 and Switch&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bothGroups = pd.concat([platform_df[&#39;switch&#39;][&#39;userCritic_difference&#39;], platform_df[&#39;ps4&#39;][&#39;userCritic_difference&#39;]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;shuffle-and-divide&#34;&gt;Shuffle and Divide&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# permutation based shuffling
rng = np.random.default_rng()
bothGroups = rng.permutation(bothGroups)
# divide into two groups
firstGroup = bothGroups[:int(len(bothGroups)/2)]
secondGroup = bothGroups[int(len(bothGroups)/2):]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;first-group-distribution&#34;&gt;First Group Distribution&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;histogramPdfGraph.showHistPdf(firstGroup, 30, &#39;#e3e2e2&#39;, &#39;black&#39;, &#39;disparity&#39;, &#39;first group&#39;, 10, 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./index_87_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;first-group-average&#34;&gt;First Group Average&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;firstGroup.mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;11.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;second-group-distribution&#34;&gt;Second Group Distribution&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;histogramPdfGraph.showHistPdf(secondGroup, 30, &#39;#e3e2e2&#39;, &#39;black&#39;, &#39;disparity&#39;, &#39;second group&#39;, 10, 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./index_91_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;second-group-average&#34;&gt;Second Group Average&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;secondGroup.mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;11.047477744807122
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;conclusion-1&#34;&gt;Conclusion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The difference between first and second groups distributions is not notable alike ps4 and switch&lt;/li&gt;
&lt;li&gt;The difference between first and second groups means is much less than disparity between ps4 and switch distributions&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;permutation-test-and-p-value-based-statistical-significance&#34;&gt;Permutation Test and P-Value Based Statistical Significance&lt;/h2&gt;
&lt;p&gt;We apply the above method iteratively. The more tests, The more confident we are of our hypothesis. That is, The pattern of two distributions is attributed to the difference in two platforms.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# computes average of a list
def avgOfList(list_in):
    return pd.Series(list_in).mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# loop on pairs of platforms
for idx, platformName in enumerate(platformsNames):
    for idx_, platformName_ in enumerate(platformsNames):
        # compare only unique pairs
        if idx_ &amp;gt; idx:
            # print pairs of platforms which are compared
            print(platformName, platformName_)
            # apply test for 25 iterations on first and second platforms of the nested loop
            testResults = permTest.permutationTest(25, platform_df[platformName][&#39;userCritic_difference&#39;], platform_df[platformName_][&#39;userCritic_difference&#39;])
            # print results average
            print(avgOfList(testResults))
            print(&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ps4 xbox
0.6639999999999998

ps4 switch
8.21812431561929

ps4 pc
1.5160265239233675

xbox switch
7.010956187898123

xbox pc
0.5826510174543579

switch pc
6.286296818538614
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;conclusion-2&#34;&gt;Conclusion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;switch has greatest statistical significance in comparison with other platforms&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;systematic-test-summary&#34;&gt;Systematic Test Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;em&gt;ps4&lt;/em&gt; and &lt;em&gt;switch&lt;/em&gt;, The difference between distributions and means is notable&lt;/li&gt;
&lt;li&gt;For the two randomly generated, through shuffling, groups, The difference between distributions and means is not notable alike original &lt;em&gt;ps4&lt;/em&gt; and &lt;em&gt;switch&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The disappearance of noted pattern in the two randomly generated groups counts as an evidence of our hypothesis. That is, the pattern (difference) of &lt;em&gt;switch&lt;/em&gt; and &lt;em&gt;ps4&lt;/em&gt; distributions is attributed to platforms factor.&lt;/li&gt;
&lt;li&gt;Switch has greatest statistical significance in comparison with other platforms&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Scraping Data of 2019 Best PS4 Games on Metacritic</title>
      <link>https://mostafatouny.github.io/post/scraping-metacritic/</link>
      <pubDate>Sat, 01 Feb 2020 00:17:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/scraping-metacritic/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;The post you are currently reading shall demonstrate how far our data published on social media is being heavily gathered for data analysis. The demonstration holds as a beginner kid like me is going to scrape data, i.e store data on a file, after only two weeks of learning. Not only the code I built works solely on the website I shall be presenting but rather on any website! However, It is not robust enough to rely upon except for simple cases.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;contents&#34;&gt;Contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#code-on-github&#34;&gt;Code on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-the-code-works&#34;&gt;How The Code Works?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;motivation&#34;&gt;Motivation&lt;/h3&gt;
&lt;p&gt;Machine learning, The prettiest-looking AI nowadays, does not work without data. In fact, one of the fundamental pillars of AI&amp;rsquo;s success is the availability of right data. Unfortunately, industries do not like to share them. Most probably, due to the sensitivity of competition, as rivals would always favor to stay ahead of their competitors. So, what do you do if you needed data for research, business, or even for a hobbyist-project but could not find it? Buying data costs you too much, and not everyone has tight relationships with industries whose platforms generate desired data. Scraping websites, i.e gathering data on web into a readable format by the computer, is a highly recommended skill for data analysts.&lt;/p&gt;
&lt;h3 id=&#34;code-on-github&#34;&gt;Code on Github&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mostafatouny/data-scraper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt; is the scraper I built. Even-though its design is not restricted to a specific website, I only test it on metacritic. The code contains an example on scraping &lt;a href=&#34;https://www.metacritic.com/browse/games/score/metascore/year/ps4/filtered?year_selected=2019&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;metacritic&amp;rsquo;s 2019 best PS4 games&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;how-the-code-works&#34;&gt;How The Code Works?&lt;/h3&gt;
&lt;p&gt;The following is a brief illustration of metacritic&amp;rsquo;s example on github&amp;rsquo;s repo. If you checked out metacritic&amp;rsquo;s link, you would see a list of games, each with its own score and release date. First, Let&amp;rsquo;s take a look on what your machine actually reads in order to render that page.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ol class=&amp;quot;list_products list_product_condensed&amp;quot;
  &amp;lt;li class=&amp;quot;product game_product&amp;quot;&amp;gt;
    ...
  &amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;product game_product&amp;quot;&amp;gt;
    ...
  &amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;product game_product&amp;quot;&amp;gt;
    ..
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;each &lt;code&gt;li&lt;/code&gt; tag corresponds to some game on the list. While &lt;code&gt;ol&lt;/code&gt; tag corresponds to a wrapper of all games on the list. Here is a sample of what is inside each game&amp;rsquo;s tag.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;li class=&amp;quot;product game_product&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;product_wrap&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;basic_stat product_title&amp;quot;&amp;gt;
      &amp;lt;a href=&amp;quot;/game/playstation-4/nier-automata---game-of-the-yorha-edition&amp;quot;
        NieR: Automata - Game of the YoRHa Edition
      &amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, How does the program scrapes data of websites? There are three steps to get the code working, (I) enter the link which contains data intended to be scraped,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mainURL = &amp;quot;https://www.metacritic.com&amp;quot;
subURL = &amp;quot;/browse/games/score/metascore/year/ps4/filtered?year_selected=2019&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(II) specify the tags&amp;rsquo; path from root up to the tag which wraps all games list,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;listNodeSequence = tagSequence.tagSequence([(&#39;ol&#39;, {&amp;quot;class&amp;quot;:&amp;quot;list_products list_product_condensed&amp;quot;}), (&#39;div&#39;, {&amp;quot;class&amp;quot;:&amp;quot;product_condensed&amp;quot;}), (&#39;div&#39;, {&amp;quot;class&amp;quot;: &amp;quot;body_wrap&amp;quot; ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then (III) for each data desired to be scraped, alike game name, game score, game release date, specify the path from the game&amp;rsquo;s tag up to that data. make sure not to type any game-specific data like the href of &lt;em&gt;nier: automata&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;columns_paths = tagsPaths.tagsPaths(
    [
    (&#39;title&#39;, [(&#39;a&#39;,), (&#39;div&#39;, {&amp;quot;class&amp;quot;:&amp;quot;basic_stat product_title&amp;quot;}), (&#39;div&#39;, {&amp;quot;class&amp;quot;:&amp;quot;product_wrap&amp;quot;})], -1),

    (&#39;critic_rating&#39;, [(&#39;div&#39;,), (&#39;div&#39;, {&amp;quot;class&amp;quot;:&amp;quot;product_score&amp;quot;}), (&#39;div&#39;, {&amp;quot;class&amp;quot;:&amp;quot;product_wrap&amp;quot;})], -1),

    (&#39;user_rating&#39;, [(&#39;span&#39;, {&amp;quot;class&amp;quot;:&amp;quot;textscore&amp;quot;}), (&#39;li&#39;, {&amp;quot;class&amp;quot;:&amp;quot;product_avguserscore&amp;quot;}), (&#39;ul&#39;,), (&#39;div&#39;, {&amp;quot;class&amp;quot;:&amp;quot;condensed_stats&amp;quot;}), (&#39;div&#39;, {&amp;quot;class&amp;quot;:&amp;quot;product_wrap&amp;quot;})], -1),

    (&#39;release_date&#39;, [(&#39;span&#39;, {&amp;quot;class&amp;quot;:&amp;quot;data&amp;quot;}), (&#39;li&#39;, {&amp;quot;class&amp;quot;:&amp;quot;release_date&amp;quot;}), (&#39;ul&#39;,), (&#39;div&#39;, {&amp;quot;class&amp;quot;:&amp;quot;condensed_stats&amp;quot;}), (&#39;div&#39;, {&amp;quot;class&amp;quot;:&amp;quot;product_wrap&amp;quot;})], -1)
    ]
    )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;after running the program, you should obtain a list of containing all games, not just one of them.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
	{
		&amp;quot;critic_rating&amp;quot;: &amp;quot;91&amp;quot;,
		&amp;quot;release_date&amp;quot;: &amp;quot;Jul  2, 2019&amp;quot;,
		&amp;quot;title&amp;quot;: &amp;quot;Final Fantasy XIV: Shadowbringers&amp;quot;,
		&amp;quot;user_rating&amp;quot;: &amp;quot;8.3&amp;quot;
	},
	{
		&amp;quot;critic_rating&amp;quot;: &amp;quot;91&amp;quot;,
		&amp;quot;release_date&amp;quot;: &amp;quot;Feb 26, 2019&amp;quot;,
		&amp;quot;title&amp;quot;: &amp;quot;NieR: Automata - Game of the YoRHa Edition&amp;quot;,
		&amp;quot;user_rating&amp;quot;: &amp;quot;8.4&amp;quot;
	},
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The remaining of the code sample are available in the github&amp;rsquo;s repo. They are named &lt;em&gt;metacritic2019_main.py&lt;/em&gt;, &lt;em&gt;metacritic2019_functions.py.&lt;/em&gt; and &lt;em&gt;metacritic2019_data.json&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;that&amp;rsquo;s it! for any website, just provide the link which contains data, and the two paths, one from root up to wrapper tag, and the other from each record&amp;rsquo;s tag up to desired data.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Global AI Bootcamp: My First Public Speak</title>
      <link>https://mostafatouny.github.io/post/global-ai-bootcamp/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/post/global-ai-bootcamp/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/c8vgf2TuP3I&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;It had been my pleasure to participate in global AI bootcamp 2019. It was targeted at non-technology experts where it aims to raise the awareness about AI&amp;rsquo;s significant role in nearly every field. It aims as well to network technology experts with industry practitioners hoping for fruitful collaboration. We had Ahmed Bahaa, Microsoft&amp;rsquo;s regional director of the Middle-East, as a keynote speaker. Learn more about this great man at &lt;a href=&#34;https://rd.microsoft.com/en-us/ahmed-bahaa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft&amp;rsquo;s regional directors profiles&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It was a great opportunity for me to share my vision of the intersection of science and art. I talked about Netflix one-million dollars prize. The story is well-known and I see no reason to repeat it here. See &lt;a href=&#34;https://spectrum.ieee.org/computing/software/the-million-dollar-programming-prize&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IEEE&amp;rsquo;s spectrum news&lt;/a&gt; for more information. Anyway, My session highlighted two folds. First, how do machines&amp;rsquo; algorithms intrude art realm where they model and compute people&amp;rsquo;s tastes. Second, How could artists delve into computer scientists realm where their aesthetic viewpoints are fruitful for interpreting data and algorithm design. I am planning to blog a survey about the intersection of AI and media/arts. Stay tuned!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://scholar.google.com.eg/citations?user=QiYV8YYAAAAJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dr. Islam El-Shaarawy&lt;/a&gt; introduced me to A. Bahaa who in turn provided me with this opportunity. Originally, I was asked to speak about Microsoft&amp;rsquo;s azure cloud service. However, At the end we agreed upon both telling the story of Netflix and giving a brief azure demo. Literally, This is the first time I could present and do a work dervied purely by my vision, while satisfying someone else&amp;rsquo;s requirements. I always face a dilemma between what I believe and envision to achieve and what real-life constraints impose upon me. Luckily, Mass-communication faculty members attended at first seats. They were responsive and asked RD A. Bahaa for a meeting for further collaboration. Their positive feedback had been inspiring for me. It is really a great experience to spot a problem from different perspectives, and try to think in a wonderful way which no one had ever though of before. As a science/tech guy, working with artists shall certainly polish my skill of tackling problems from novel perspecitves. Probably, you know where to look now for a tech/math enthusiasit&amp;rsquo;s journey with art.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mostafatouny.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://mostafatouny.github.io/admin/config.yml</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mostafatouny.github.io/admin/config.yml</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
